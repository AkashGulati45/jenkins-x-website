<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X â€“ Contribute to the Documentation</title>
    <link>/docs/contributing/documentation/</link>
    <description>Recent content in Contribute to the Documentation on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/contributing/documentation/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Suggest changes to documentation</title>
      <link>/docs/contributing/documentation/changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contributing/documentation/changes/</guid>
      <description>
        
        
        &lt;p&gt;Did you spot a typo or feel something&amp;rsquo;s missing from a certain page? you can still contribute your suggestions without having to go through setting everything up locally as explained on &lt;a href=&#34;/docs/contributing/documentation/&#34;&gt;Contribute to Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The process requires only three steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click the &amp;ldquo;Edit this page&amp;rdquo; link on the right&lt;/li&gt;
&lt;li&gt;Make your suggested changes&lt;/li&gt;
&lt;li&gt;Create a Pull Request&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We&amp;rsquo;ll go through each step here. Keep in mind though, that if you&amp;rsquo;re looking to contribute larger amounts of changes, pages, or sections, it&amp;rsquo;s best to test things out locally first (using the process described on &lt;a href=&#34;/docs/contributing/documentation/&#34;&gt;Contribute to Documentation&lt;/a&gt;) instead of using this method.&lt;/p&gt;
&lt;h2 id=&#34;click-the-edit-this-page-link&#34;&gt;Click the &amp;ldquo;Edit this page&amp;rdquo; link&lt;/h2&gt;
&lt;p&gt;First off, make sure you&amp;rsquo;re viewing the page you want to make changes to. The link you need to click is specific for the page, to make it easier to start making changes.&lt;/p&gt;
&lt;p&gt;On the right hand side of the page, you&amp;rsquo;ll find a column that will always have the following three links:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/contribute/page_links.png&#34; alt=&#34;Triage&#34;&gt;&lt;/p&gt;
&lt;p&gt;The top one (&lt;code&gt;Edit this page&lt;/code&gt;) is the one we need here, as it will allow you to suggest changes to the page you&amp;rsquo;re currently on.
The second one (&lt;code&gt;Create documentation issue&lt;/code&gt;) is a link to create a documentation related issue, for others to look at and hopefully fix. This could be for missing sections, or maybe larger changes you&amp;rsquo;re not comfortable suggesting yourself.
The last one (&lt;code&gt;Create project issue&lt;/code&gt;) is a link to create an issue for the main Jenkins X project. This is for problems related to the code and to how Jenkins X works.&lt;/p&gt;
&lt;h2 id=&#34;make-suggested-changes&#34;&gt;Make suggested changes&lt;/h2&gt;
&lt;p&gt;Clicking the &amp;ldquo;Edit this page&amp;rdquo; link takes you to a page on GitHub that looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/contribute/edit_page.png&#34; alt=&#34;Triage&#34;&gt;&lt;/p&gt;
&lt;p&gt;The main part of this page is the text field which includes the text for page you came from. It is using &lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34;&gt;GitHub markdown&lt;/a&gt; to indicate when this should be bold, italic, etc., so if you haven&amp;rsquo;t come across markdown before it might be a good idea to have a look at that if you plan on making changes to/using text formatting. There&amp;rsquo;s also a &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34;&gt;cheat-sheet here&lt;/a&gt; with just the formatting.&lt;/p&gt;
&lt;p&gt;You can make any changes you see fit (it&amp;rsquo;s treated as a suggestion that will be reviewed by others before being applied to the live website).&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;re finished:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Supply a summary of your changes (e.g. &amp;ldquo;fixed typos in documentation contribution page&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Select the option &amp;ldquo;Create a new branch&amp;hellip;&amp;rdquo; and give it a meaningful name&lt;/li&gt;
&lt;li&gt;Click &amp;ldquo;Propose file change&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The page should look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/contribute/commit_changes.png&#34; alt=&#34;Triage&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-a-pull-request&#34;&gt;Create a Pull Request&lt;/h2&gt;
&lt;p&gt;The next screen after you clicked &amp;ldquo;Propose file changes&amp;rdquo; should be &amp;ldquo;Open Pull Request&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;You can add more description if you wish, but at this point its fine to just click &amp;ldquo;Create pull request&amp;rdquo;. If there are any questions about your changes, or suggestions for improvements, they will be added to the pull request, so in case you have opted out of notifications from GitHub it would be good to check back now and then until the change is applied.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Contribute to the API Documentation</title>
      <link>/docs/contributing/documentation/apidocs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contributing/documentation/apidocs/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X has two types of API documentation: &lt;a href=&#34;/apidocs/&#34;&gt;Kubernetes Custom Resource Documentation&lt;/a&gt; and &lt;a href=&#34;https://godoc.org/github.com/jenkins-x/jx&#34;&gt;Godoc&lt;/a&gt;.
Both types are generated from the &lt;code&gt;codegen&lt;/code&gt; binary which is part of the jx &lt;a href=&#34;https://github.com/jenkins-x/jx&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;setup-your-development-environment&#34;&gt;Setup your development environment&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s best to make changes to the Jenkins X code on your local machine. Follow the &lt;a href=&#34;/docs/contributing/code/&#34;&gt;development&lt;/a&gt; guide
to get set up.&lt;/p&gt;
&lt;h2 id=&#34;writing-custom-resource-documentation&#34;&gt;Writing custom resource documentation&lt;/h2&gt;
&lt;p&gt;The custom resource documentation is mostly generated from the comments on the &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/pkg/apis/jenkins.io/v1&#34;&gt;go structs&lt;/a&gt; that define the custom resources, with the &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/docs/apidocs/static_includes&#34;&gt;introductory content&lt;/a&gt; and &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/docs/apidocs/config.yaml&#34;&gt;structure&lt;/a&gt; injected.&lt;/p&gt;
&lt;h3 id=&#34;toolchain&#34;&gt;Toolchain&lt;/h3&gt;
&lt;p&gt;The custom resource documentation is generated using the &lt;a href=&#34;https://kubernetes.io/docs/contribute/generate-ref-docs/kubernetes-api/&#34;&gt;same toolchain&lt;/a&gt; as Kubernetes, but wrapped up in a series of &lt;code&gt;codegen&lt;/code&gt; commands so that you don&amp;rsquo;t have to download and setup the different tools yourself.&lt;/p&gt;
&lt;p&gt;The HTML docs are generated via an &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/docs/apidocs/openapi-spec&#34;&gt;OpenAPI specification&lt;/a&gt; which in turn is generated from &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/pkg/client/openapi&#34;&gt;Go Structs&lt;/a&gt; which are generated from the code comments.
To generate the structs and the OpenAPI specification run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;make generate-openapi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

&lt;code&gt;make generate-openapi&lt;/code&gt; is just a wrapper for &lt;code&gt;codegen openapi&lt;/code&gt;, passing in package to generate from, generate to, and the group (&lt;code&gt;jenkins.io&lt;/code&gt;) and version (&lt;code&gt;v1&lt;/code&gt;) to generate for.
You can run this command directly if you prefer.
&lt;/div&gt;

&lt;p&gt;and to generate the HTML run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;make generate-docs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

&lt;code&gt;make generate-docs&lt;/code&gt; is just a wrapper for &lt;code&gt;codegen docs&lt;/code&gt;. You can run this command directly if you prefer.
&lt;/div&gt;

&lt;p&gt;You should run &lt;code&gt;make generate-openapi&lt;/code&gt; whenever you change the custom resources, and check the generated changes into
source control. This means that there is always a tagged version of the OpenAPI spec available for others to use.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

You can also run &lt;code&gt;make generate&lt;/code&gt; which will do all the code generation needed by Jenkins X (mocks and client as well
as openapi)
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;make generate-docs&lt;/code&gt; is run by the release build, and the changes are automatically uploaded to the Jenkins X
website on every release. They&amp;rsquo;ll be available a few minutes after the release build completes.&lt;/p&gt;
&lt;h3 id=&#34;making-changes-to-the-documentation&#34;&gt;Making changes to the documentation&lt;/h3&gt;
&lt;p&gt;Each file for which you want to generate docs must be located in the &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/pkg/apis/jenkins.io/v1&#34;&gt;jenkins.io/v1&lt;/a&gt; directory, and must have a the&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// +k8s:openapi-gen=true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;comment at the top of the file.&lt;/p&gt;
&lt;p&gt;To exclude a type or member, add&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// +k8s:openapi-gen=false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to it.&lt;/p&gt;
&lt;p&gt;Comments on types are ignored. Comments on struct fields are used as the description for each field.&lt;/p&gt;
&lt;p&gt;The left hand menu is generated from the &lt;code&gt;resource_categories&lt;/code&gt; in &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/docs/apidocs/config.yaml&#34;&gt;config.yaml&lt;/a&gt;. The introductory text for each category is authored as
&lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/docs/apidocs/static_includes&#34;&gt;html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The styles can &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/docs/apidocs/static/stylesheet.css&#34;&gt;also be customized&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;openapi&#34;&gt;OpenAPI&lt;/h3&gt;
&lt;p&gt;The OpenAPI spec is generated from the code. The structure is generated from the structs and fields. The &lt;code&gt;json&lt;/code&gt;
&lt;a href=&#34;https://golang.org/pkg/encoding/json/#Marshal&#34;&gt;tags&lt;/a&gt; are used to provide additional information including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is generated from the &lt;code&gt;key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;omitempty&lt;/code&gt; is not set, the property will be &lt;code&gt;required&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if the &lt;code&gt;key&lt;/code&gt; is &lt;code&gt;-&lt;/code&gt; the field will be skipped&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;inline&lt;/code&gt; is set, the properties will be inlined into the parent object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally the&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// +optional
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;comment can be used to prevent a property being &lt;code&gt;required&lt;/code&gt;. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;metav1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TypeMeta&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;,inline&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	// +optional
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	metav1.ObjectMeta `&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata,omitempty&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protobuf&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bytes,1,opt,name=metadata&amp;#34;`
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Spec BuildPackSpec `&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec,omitempty&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protobuf&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bytes,2,opt,name=spec&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;openapi-extensions&#34;&gt;OpenAPI Extensions&lt;/h4&gt;
&lt;p&gt;OpenAPI spec can have extensions on types. To define one or more extensions on a type or its member
add &lt;code&gt;+k8s:openapi-gen=x-kubernetes-$NAME:$VALUE&lt;/code&gt; to the comment lines before type/member. A type/member can
have multiple extensions. The rest of the line in the comment will be used as $VALUE so there is no need to
escape or quote the value string. Extensions can be used to pass more information to client generators or
documentation generators. For example a type might have a friendly name to be displayed in documentation or
being used in a client&amp;rsquo;s fluent interface.&lt;/p&gt;
&lt;h4 id=&#34;custom-openapi-type-definitions&#34;&gt;Custom OpenAPI type definitions&lt;/h4&gt;
&lt;p&gt;Custom types which otherwise don&amp;rsquo;t map directly to OpenAPI can override their
OpenAPI definition by implementing a function named &amp;ldquo;OpenAPIDefinition&amp;rdquo; with
the following signature:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;openapi&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;k8s.io/kube-openapi/pkg/common&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAPIDefinition&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;openapi&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAPIDefinition&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;openapi&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAPIDefinition&lt;/span&gt;{
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Schema&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;spec&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Schema&lt;/span&gt;{
				&lt;span style=&#34;color:#a6e22e&#34;&gt;SchemaProps&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;spec&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SchemaProps&lt;/span&gt;{
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt;:   []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;},
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Format&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date-time&amp;#34;&lt;/span&gt;,
				},
			},
		}
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alternatively, the type can avoid the &amp;ldquo;openapi&amp;rdquo; import by defining the following
methods. The following example produces the same OpenAPI definition as the
example above:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAPISchemaType&lt;/span&gt;() []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;} }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;OpenAPISchemaFormat&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date-time&amp;#34;&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;write-godoc&#34;&gt;Write Godoc&lt;/h2&gt;
&lt;p&gt;Jenkins X uses the standard approach to Godoc, and it is automatically generated by &lt;a href=&#34;http://godoc.org&#34;&gt;godoc.org&lt;/a&gt;.
This &lt;a href=&#34;https://blog.golang.org/godoc-documenting-go-code&#34;&gt;blog&lt;/a&gt; provides a good introduction to writing Godoc.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
