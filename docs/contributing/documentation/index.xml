<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X â€“ Contribute to the Documentation</title>
    <link>/docs/contributing/documentation/</link>
    <description>Recent content in Contribute to the Documentation on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/contributing/documentation/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Contribute to the API Documentation</title>
      <link>/docs/contributing/documentation/apidocs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contributing/documentation/apidocs/</guid>
      <description>
        
        
        

&lt;p&gt;Jenkins X has two types of API documentation: &lt;a href=&#34;/apidocs&#34;&gt;Kubernetes Custom Resource Documentation&lt;/a&gt; and &lt;a href=&#34;https://godoc.org/github.com/jenkins-x/jx&#34; target=&#34;_blank&#34;&gt;Godoc&lt;/a&gt;.
Both types are generated from the &lt;code&gt;codegen&lt;/code&gt; binary which is part of the jx &lt;a href=&#34;https://github.com/jenkins-x/jx&#34; target=&#34;_blank&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;setup-your-development-environment&#34;&gt;Setup your development environment&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s best to make changes to the Jenkins X code on your local machine. Follow the &lt;a href=&#34;../development&#34;&gt;development&lt;/a&gt; guide
to get set up.&lt;/p&gt;

&lt;h2 id=&#34;writing-custom-resource-documentation&#34;&gt;Writing custom resource documentation&lt;/h2&gt;

&lt;p&gt;The custom resource documentation is mostly generated from the comments on the &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/pkg/apis/jenkins.io/v1&#34; target=&#34;_blank&#34;&gt;go structs&lt;/a&gt; that define the custom resources, with the &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/docs/apidocs/static_includes&#34; target=&#34;_blank&#34;&gt;introductory content&lt;/a&gt; and &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/docs/apidocs/config.yaml&#34; target=&#34;_blank&#34;&gt;structure&lt;/a&gt; injected.&lt;/p&gt;

&lt;h3 id=&#34;toolchain&#34;&gt;Toolchain&lt;/h3&gt;

&lt;p&gt;The custom resource documentation is generated using the &lt;a href=&#34;https://kubernetes.io/docs/contribute/generate-ref-docs/kubernetes-api/&#34; target=&#34;_blank&#34;&gt;same toolchain&lt;/a&gt; as Kubernetes, but wrapped up in a series of &lt;code&gt;codegen&lt;/code&gt; commands so that you don&amp;rsquo;t have to download and setup the different tools yourself.&lt;/p&gt;

&lt;p&gt;The HTML docs are generated via an &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/docs/apidocs/openapi-spec&#34; target=&#34;_blank&#34;&gt;OpenAPI specification&lt;/a&gt; which in turn is generated from &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/pkg/client/openapi&#34; target=&#34;_blank&#34;&gt;Go Structs&lt;/a&gt; which are generated from the code comments.
To generate the structs and the OpenAPI specification run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; $ make generate-openapi
&lt;/code&gt;&lt;/pre&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

&lt;code&gt;make generate-openapi&lt;/code&gt; is just a wrapper for &lt;code&gt;codegen openapi&lt;/code&gt;, passing in package to generate from, generate to, and the group (&lt;code&gt;jenkins.io&lt;/code&gt;) and version (&lt;code&gt;v1&lt;/code&gt;) to generate for.
 You can run this command directly if you prefer.
&lt;/div&gt;


&lt;p&gt;and to generate the HTML run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; make generate-docs
&lt;/code&gt;&lt;/pre&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

&lt;code&gt;make generate-docs&lt;/code&gt; is just a wrapper for &lt;code&gt;codegen docs&lt;/code&gt;. You can run this command directly if you prefer.
&lt;/div&gt;


&lt;p&gt;You should run &lt;code&gt;make generate-openapi&lt;/code&gt; whenever you change the custom resources, and check the generated changes into
 source control. This means that there is always a tagged version of the OpenAPI spec available for others to use.&lt;/p&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

You can also run &lt;code&gt;make generate&lt;/code&gt; which will do all the code generation needed by Jenkins X (mocks and client as well
as openapi)
&lt;/div&gt;


&lt;p&gt;&lt;code&gt;make generate-docs&lt;/code&gt; is run by the release build, and the changes are automatically uploaded to the Jenkins X
 website on every release. They&amp;rsquo;ll be available a few minutes after the release build completes.&lt;/p&gt;

&lt;h3 id=&#34;making-changes-to-the-documentation&#34;&gt;Making changes to the documentation&lt;/h3&gt;

&lt;p&gt;Each file for which you want to generate docs must be located in the &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/pkg/apis/jenkins.io/v1&#34; target=&#34;_blank&#34;&gt;jenkins.io/v1&lt;/a&gt; directory, and must have a the&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// +k8s:openapi-gen=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;comment at the top of the file.&lt;/p&gt;

&lt;p&gt;To exclude a type or member, add&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// +k8s:openapi-gen=false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to it.&lt;/p&gt;

&lt;p&gt;Comments on types are ignored. Comments on struct fields are used as the description for each field.&lt;/p&gt;

&lt;p&gt;The left hand menu is generated from the &lt;code&gt;resource_categories&lt;/code&gt; in &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/docs/apidocs/config.yaml&#34; target=&#34;_blank&#34;&gt;config.yaml&lt;/a&gt;. The introductory text for each category is authored as
&lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/docs/apidocs/static_includes&#34; target=&#34;_blank&#34;&gt;html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The styles can &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/docs/apidocs/static/stylesheet.css&#34; target=&#34;_blank&#34;&gt;also be customized&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;openapi&#34;&gt;OpenAPI&lt;/h3&gt;

&lt;p&gt;The OpenAPI spec is generated from the code. The structure is generated from the structs and fields. The &lt;code&gt;json&lt;/code&gt;
&lt;a href=&#34;https://golang.org/pkg/encoding/json/#Marshal&#34; target=&#34;_blank&#34;&gt;tags&lt;/a&gt; are used to provide additional information including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is generated from the &lt;code&gt;key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;omitempty&lt;/code&gt; is not set, the property will be &lt;code&gt;required&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if the &lt;code&gt;key&lt;/code&gt; is &lt;code&gt;-&lt;/code&gt; the field will be skipped&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;inline&lt;/code&gt; is set, the properties will be inlined into the parent object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally the&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// +optional
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;comment can be used to prevent a property being &lt;code&gt;required&lt;/code&gt;. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;  metav1.TypeMeta `json:&amp;quot;,inline&amp;quot;
	// +optional
	metav1.ObjectMeta `json:&amp;quot;metadata,omitempty&amp;quot; protobuf:&amp;quot;bytes,1,opt,name=metadata&amp;quot;`
  Spec BuildPackSpec `json:&amp;quot;spec,omitempty&amp;quot; protobuf:&amp;quot;bytes,2,opt,name=spec&amp;quot;`
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;openapi-extensions&#34;&gt;OpenAPI Extensions&lt;/h4&gt;

&lt;p&gt;OpenAPI spec can have extensions on types. To define one or more extensions on a type or its member
add &lt;code&gt;+k8s:openapi-gen=x-kubernetes-$NAME:$VALUE&lt;/code&gt; to the comment lines before type/member. A type/member can
have multiple extensions. The rest of the line in the comment will be used as $VALUE so there is no need to
escape or quote the value string. Extensions can be used to pass more information to client generators or
documentation generators. For example a type might have a friendly name to be displayed in documentation or
being used in a client&amp;rsquo;s fluent interface.&lt;/p&gt;

&lt;h4 id=&#34;custom-openapi-type-definitions&#34;&gt;Custom OpenAPI type definitions&lt;/h4&gt;

&lt;p&gt;Custom types which otherwise don&amp;rsquo;t map directly to OpenAPI can override their
OpenAPI definition by implementing a function named &amp;ldquo;OpenAPIDefinition&amp;rdquo; with
the following signature:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;	import openapi &amp;quot;k8s.io/kube-openapi/pkg/common&amp;quot;

	// ...

	type Time struct {
		time.Time
	}

	func (_ Time) OpenAPIDefinition() openapi.OpenAPIDefinition {
		return openapi.OpenAPIDefinition{
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Type:   []string{&amp;quot;string&amp;quot;},
					Format: &amp;quot;date-time&amp;quot;,
				},
			},
		}
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, the type can avoid the &amp;ldquo;openapi&amp;rdquo; import by defining the following
methods. The following example produces the same OpenAPI definition as the
example above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    func (_ Time) OpenAPISchemaType() []string { return []string{&amp;quot;string&amp;quot;} }
    func (_ Time) OpenAPISchemaFormat() string { return &amp;quot;date-time&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;write-godoc&#34;&gt;Write Godoc&lt;/h2&gt;

&lt;p&gt;Jenkins X uses the standard approach to Godoc, and it is automatically generated by &lt;a href=&#34;http://godoc.org&#34; target=&#34;_blank&#34;&gt;godoc.org&lt;/a&gt;.
This &lt;a href=&#34;https://blog.golang.org/godoc-documenting-go-code&#34; target=&#34;_blank&#34;&gt;blog&lt;/a&gt; provides a good introduction to writing Godoc.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
