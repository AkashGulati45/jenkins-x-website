<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X â€“ Deprecated documentation</title>
    <link>/docs/managing-jx/old/</link>
    <description>Recent content in Deprecated documentation on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/managing-jx/old/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Configuration</title>
      <link>/docs/managing-jx/old/config/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/old/config/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X should work out of the box with smart defaults for your cloud provider. e.g. Jenkins X automatically uses ECR if you are using AWS or EKS.&lt;/p&gt;
&lt;p&gt;However you can configure values in the underlying helm charts used by Jenkins X.&lt;/p&gt;
&lt;p&gt;To do this you need to create a &lt;code&gt;myvalues.yaml&lt;/code&gt; file in the current directory you are in when you run either &lt;a href=&#34;/commands/jx_create_cluster/&#34;&gt;jx create cluster&lt;/a&gt; or &lt;a href=&#34;/commands/deprecation/&#34;&gt;jx install&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then this YAML file can be used to override any of the underlying &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/values.yaml&#34;&gt;&lt;code&gt;values.yaml&lt;/code&gt;&lt;/a&gt; in any of the &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/requirements.yaml&#34;&gt;charts&lt;/a&gt; in Jenkins X.&lt;/p&gt;
&lt;h2 id=&#34;making-changes-after-the-install&#34;&gt;Making changes after the install&lt;/h2&gt;
&lt;p&gt;Once you have installed you can make more changes via &lt;a href=&#34;/commands/deprecation/&#34;&gt;jx upgrade platform&lt;/a&gt; which will reuse your &lt;code&gt;myvalues.yaml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Or if you use &lt;a href=&#34;/docs/managing-jx/common-tasks/manage-via-gitops/&#34;&gt;GitOps management&lt;/a&gt; you can just create a Pull Request on your Development environment git repository.&lt;/p&gt;
&lt;h2 id=&#34;nexus&#34;&gt;Nexus&lt;/h2&gt;
&lt;p&gt;e.g. if you wish to disable Nexus being installed and instead service link to a separate nexus at a different host name you can use this &lt;code&gt;myvalues.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;nexus&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;nexusServiceLink&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;externalName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nexus.jx.svc.cluster.local&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;chartmuseum&#34;&gt;ChartMuseum&lt;/h2&gt;
&lt;p&gt;To disable and service link chart museum add:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;chartmuseum&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;chartmuseumServiceLink&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;externalName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jenkins-x-chartmuseum.jx.svc.cluster.local&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;jenkins-image&#34;&gt;Jenkins Image&lt;/h2&gt;
&lt;p&gt;We ship with a default Jenkins docker image &lt;a href=&#34;https://hub.docker.com/r/jenkinsxio/jenkinsx/&#34;&gt;jenkinsxio/jenkinsx&lt;/a&gt; with Jenkins X which has all of our required plugins inside.&lt;/p&gt;
&lt;p&gt;If you wish to add your own plugins you can create your own &lt;code&gt;Dockerfile&lt;/code&gt; and image using our base image like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Dockerfile for adding plugins to Jenkins X&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; jenkinsxio/jenkinsx:latest&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; plugins.txt /usr/share/jenkins/ref/openshift-plugins.txt&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; /usr/local/bin/install-plugins.sh &amp;lt; /usr/share/jenkins/ref/openshift-plugins.txt&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then add your custom plugins to &lt;code&gt;plugins.txt&lt;/code&gt; locally of the form:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;myplugin:1.2.3
anotherplugin:4.5.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you have built and released your image via CI/CD you can then use it in your Jenkins X installation.&lt;/p&gt;
&lt;p&gt;To configure Jenkins X to use your custom image you can specify your own Jenkins image via a &lt;code&gt;myvalues.yaml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;jenkins&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;Master&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;Image&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;acme/my-jenkinsx&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;ImageTag&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.2.3&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is an example OSS project &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-openshift-image&#34;&gt;jenkins-x/jenkins-x-openshift-image&lt;/a&gt; you could use as a template which creates a new Jenkins image to add OpenShift specific plugins and configuration for using Jenkins X on OpenShift.&lt;/p&gt;
&lt;h2 id=&#34;docker-registry&#34;&gt;Docker Registry&lt;/h2&gt;
&lt;p&gt;We try and use the best defaults for each platform for the Docker Registry; e.g. using ECR on AWS.&lt;/p&gt;
&lt;p&gt;However you can also specify this via the &lt;code&gt;--docker-registry&lt;/code&gt; option when running  &lt;a href=&#34;/commands/jx_create_cluster/&#34;&gt;jx create cluster&lt;/a&gt; or &lt;a href=&#34;/commands/deprecation/&#34;&gt;jx install&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create cluster gke --docker-registry eu.gcr.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Though if you use a different Docker Registry you will probably need to &lt;a href=&#34;/docs/reference/components/docker-registry/#update-the-configjson-secret&#34;&gt;also modify the secret for connecting to docker&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create cluster documentation</title>
      <link>/docs/managing-jx/old/create-cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/old/create-cluster/</guid>
      <description>
        
        
        &lt;p&gt;To create a new Kubernetes cluster with Jenkins X installed use the  &lt;a href=&#34;/commands/jx_create_cluster/&#34;&gt;jx create cluster&lt;/a&gt; command.&lt;/p&gt;
&lt;p&gt;A number of different public cloud providers are supported as shown below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For the best getting started experience we currently recommend using Google Container Engine (GKE)&lt;/strong&gt;. The Google Cloud Platform offers a $300 free credit if you don&amp;rsquo;t have a Google Cloud account.  See &lt;a href=&#34;https://console.cloud.google.com/freetrial&#34;&gt;https://console.cloud.google.com/freetrial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a little demo showing GKE, AKS and Minikube in parallel. It can take some time to start on different machines/clouds so please be patient!&lt;/p&gt;
&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/ELA4tytdFeA&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;h2 id=&#34;using-google-cloud-gke&#34;&gt;Using Google Cloud (GKE)&lt;/h2&gt;
&lt;p&gt;First make sure you have created/selected a Project in the &lt;a href=&#34;https://console.cloud.google.com/&#34;&gt;Google Cloud Console&lt;/a&gt;.&lt;/p&gt;
&lt;img src=&#34;/images/quickstart/gke-select-project.png&#34; class=&#34;img-thumbnail&#34;&gt;
&lt;p&gt;Currently the best experience for running Jenkins X is on Google Container Engine (GKE).&lt;/p&gt;
&lt;p&gt;Now &lt;a href=&#34;/docs/getting-started/setup/install//&#34;&gt;download&lt;/a&gt; the &lt;code&gt;jx&lt;/code&gt; CLI which is used to create and interact with the Jenkins X cluster.&lt;/p&gt;
&lt;p&gt;Now use the &lt;a href=&#34;/commands/jx_create_cluster_gke/&#34;&gt;jx create cluster gke&lt;/a&gt; command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jx create cluster gke
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you wish to name your cluster and provide your own admin password you can run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jx create cluster gke --default-admin-password=mySecretPassWord123 -n myclustername
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then follow all the prompts on the console (mostly just hitting enter will do).&lt;/p&gt;
&lt;p&gt;Note if you wish to use a different git provider than GitHub for your environments see &lt;a href=&#34;/docs/reference/components/git/#using-a-different-git-provider-for-environments&#34;&gt;how to use a different git provider&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;using-the-google-cloud-shell&#34;&gt;Using the Google Cloud Shell&lt;/h2&gt;
&lt;p&gt;The simplest way to install Jenkins X on Google Cloud is using the &lt;a href=&#34;https://console.cloud.google.com/&#34;&gt;Google Cloud Shell&lt;/a&gt; as it already comes with most of the things you may need to install (&lt;code&gt;git, gcloud, kubectl&lt;/code&gt; etc).&lt;/p&gt;
&lt;p&gt;First you need to open the Google Cloud Shell via the button in the toolbar:&lt;/p&gt;
&lt;img src=&#34;/images/quickstart/gke-start-shell.png&#34; class=&#34;img-thumbnail&#34;&gt;
&lt;p&gt;Then you need to download the &lt;code&gt;jx&lt;/code&gt; binary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl -L https://storage.googleapis.com/artifacts.jenkinsxio.appspot.com/binaries/cjxd/latest/jx-linux-amd64.tar.gz | tar xzv
sudo mv jx /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now use the &lt;a href=&#34;/commands/jx_create_cluster_gke/&#34;&gt;jx create cluster gke&lt;/a&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create cluster gke --skip-login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you wish to name your cluster and provide your own admin password you can run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create cluster gke --skip-login  --default-admin-password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mySecretPassWord123 -n myclustername
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-jx-create-cluster-gke-process&#34;&gt;The &lt;code&gt;jx create cluster gke&lt;/code&gt; process&lt;/h2&gt;
&lt;p&gt;The Jenkins X cluster creation process is a multi-step interactive
process performed via command-line interface and your desktop web
browser.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open a terminal or command prompt window (or the GCP Cloud Shell in
your web browser) and commence the Jenkins X installation process.
In this example, the Google Kubernetes Engine is used as the
Kubernetes provider:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create cluster gke
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;The installation is interactive, stepping you through the entire
installation and configuration of the Kubernetes cluster creation
process.&lt;/p&gt;
&lt;p&gt;After automatically installing the &lt;code&gt;helm&lt;/code&gt; command for package
management and &lt;code&gt;gcloud&lt;/code&gt; command for cluster configuration on
kubernetes, the installer prompts you for your administrative
password to complete the installation process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A browser window appears prompting you to choose the email address
associated with your Google Cloud Platform account, then prompts you
to accept rights permission to associate your GCP account&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installer prompts you to choose a &lt;code&gt;regional&lt;/code&gt; or &lt;code&gt;zonal&lt;/code&gt; cluster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Regional clusters spread kubernetes resources in a region to
multiple zones with each zone having a cluster master.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zonal clusters run multiple kubernetes resources to multiple
cluster nodes using one cluster master.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installer prompts you for your Cloud node machine type:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Standard: a machine that scales CPU and Memory evenly, (1 vCPU
with 3.75GB RAM, 2 vCPU with 7.5GB RAM, and so on).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;High-memory: a machine with higher memory allocation for each
CPU (2 vCPU with 13GB RAM, 4 vCPU with 26GB RAM, and so on).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;High-CPU: a machine with higher vCPU allocation relative to
Memory (2 vCPU 1.8GB RAM, 4 vCPU 3.6GB RAM, and so on).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installer asks to enter the &lt;em&gt;minimum&lt;/em&gt; quantity of nodes for the
cluster. The recommended minimum for a Jenkins X cluster is 3 nodes
for each cluster zone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installer asks you to enter the &lt;em&gt;maximum&lt;/em&gt; quantity of nodes per
zone. The recommended maximum for Jenkins X is 5 nodes per cluster&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installer asks if you want to use &lt;em&gt;preemptible VMs&lt;/em&gt;. Preemptible
VMs are used typically for less than 24 hours for specific tasks
such as short-term compute cluster calculations, media rendering or
transcoding, financial industry asset performance modeling, and
others. It is &lt;em&gt;not&lt;/em&gt; recommended for typical Jenkins X deployments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installer asks if you want access to Google Cloud Storage or
Google Container Registry. If you enter &lt;code&gt;Y&lt;/code&gt; for yes, the installer
creates Oauth enabled scopes for accessing Google Cloud Storage and
Google Cloud Registry API authentication and access. Default is
&lt;code&gt;no&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installer asks if you want to enable Kaniko for building
container images. &lt;code&gt;kaniko&lt;/code&gt; is used to create Docker Images without
access to a &lt;code&gt;docker&lt;/code&gt; daemon. Jenkins X default is &lt;code&gt;no&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installer continues the installation process to
post-installation configuration. The first post-installation prompt
searches for a configured &lt;em&gt;ingress controller&lt;/em&gt;. An ingress
controller works with an external load balancer (such as Google
Cloud Load Balancing) to control various traffic types such as
HTTP(S), SSL, TCP and others on any externally accessible network
port. Jenkins X requires this in typical deployments, so the default
is &lt;code&gt;yes&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You are then prompted with creating a DNS service to use for your
cluster load balancer. If your network does not provide custom DNS,
the Jenkins X installer will create a simple wildcard DNS services
to translate to your cluster load balancer and allow access to the
nodes from the Internet. By default, the installer uses &lt;code&gt;nip.io&lt;/code&gt; to
create a domain based on your IP address.&lt;/p&gt;
&lt;p&gt;For example, if your external internet IP address is 172.31.0.2, the
installer will assign the domain name &lt;code&gt;172.31.0.2.nip.io&lt;/code&gt; so that
users and Jenkins X administrators can access the cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installer asks for a local git user for GitHub access:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Enter the GitHub User Name you want to associate to the cluster&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose whether or not you want to use GitHub as the CI/CD
pipeline &lt;code&gt;git&lt;/code&gt; server. The default is &lt;code&gt;yes&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When prompted, copy and paste the provided URL into a browser
and create a GitHub API token for use in your cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose whether you want to use Serverless Jenkins X Pipelines
with Tekton or traditional Jenkins with Jenkinsfile. Choose
Serverless Jenkins X Pipelines with Tekton, as that method
supports cloud native CI/CD declarative pipelines for kubernetes
clusters using Tekton custom resources.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installer creates an autogenerated password for
administrative access to the cluster. Copy that password and
paste it for later access.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note if you wish to use a different git provider than GitHub for your environments see &lt;a href=&#34;/docs/reference/components/git/#using-a-different-git-provider-for-environments&#34;&gt;how to use a different git provider&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now &lt;strong&gt;&lt;a href=&#34;/docs/getting-started/next/&#34;&gt;develop apps faster with Jenkins X&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;connecting-to-the-cluster-from-your-laptop&#34;&gt;Connecting to the cluster from your laptop&lt;/h3&gt;
&lt;p&gt;If you wish to work with the Jenkins X cluster from your laptop then click on the &lt;code&gt;Connect&lt;/code&gt; button on the &lt;a href=&#34;https://console.cloud.google.com/kubernetes/list&#34;&gt;Kubernetes Engine page&lt;/a&gt; in the &lt;a href=&#34;https://console.cloud.google.com/&#34;&gt;Google Console&lt;/a&gt;&lt;/p&gt;
&lt;img src=&#34;/images/quickstart/gke-connect.png&#34; class=&#34;img-thumbnail&#34;&gt;
&lt;p&gt;You should now be able to use the &lt;code&gt;kubectl&lt;/code&gt; and &lt;code&gt;jx&lt;/code&gt; CLI tools on your laptop to talk to the GKE cluster.&lt;/p&gt;
&lt;h3 id=&#34;using-google-cloud-from-your-laptop&#34;&gt;Using Google Cloud from your laptop&lt;/h3&gt;
&lt;p&gt;Use the &lt;a href=&#34;/commands/jx_create_cluster_gke/&#34;&gt;jx create cluster gke&lt;/a&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create cluster gke --verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or if you are already logged in by previously using &lt;code&gt;gcloud init&lt;/code&gt; or &lt;code&gt;gcloud auth login&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create cluster gke --skip-login --verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Those commands assume you have a google account and you&amp;rsquo;ve set up a default project that you can use to create the kubernetes cluster within.
Now &lt;strong&gt;&lt;a href=&#34;/docs/getting-started/next/&#34;&gt;develop apps faster with Jenkins X&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;using-amazon-aws&#34;&gt;Using Amazon (AWS)&lt;/h2&gt;
&lt;p&gt;If you are using AWS be sure to check out the detailed blog on &lt;a href=&#34;https://aws.amazon.com/blogs/opensource/continuous-delivery-eks-jenkins-x/&#34;&gt;Continuous Delivery with Amazon EKS and Jenkins X&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/hekonsek&#34;&gt;Henryk Konsek&lt;/a&gt; which goes into lots of detail on how to setup AWS + EKS with Jenkins X.&lt;/p&gt;
&lt;p&gt;We support both &lt;code&gt;kops&lt;/code&gt; or &lt;code&gt;eks&lt;/code&gt; to create your Kubernetes cluster with Jenkins X where EKS is the most strategic direction; increasingly AWS will manage more of the kubernetes side for you with EKS.&lt;/p&gt;
&lt;h3 id=&#34;ingress-options&#34;&gt;Ingress options&lt;/h3&gt;
&lt;p&gt;On AWS the ideal setup is to use a Route 53 DNS wildcard CNAME to point &lt;code&gt;*.somedomain&lt;/code&gt; at your ELB or NLB host name; then when prompted by &lt;code&gt;jx&lt;/code&gt; you install &lt;code&gt;somedomain&lt;/code&gt; (where &lt;code&gt;somedomain&lt;/code&gt; is an actual DNS domain/subdomain you own).&lt;/p&gt;
&lt;p&gt;Then all the &lt;code&gt;Ingress&lt;/code&gt; resources for any exposed service in any namespace will appear as &lt;code&gt;mysvc.myns.somedomain&lt;/code&gt; - whether for things like Jenkins or Nexus or for your own microservices or Preview Environments.&lt;/p&gt;
&lt;p&gt;Using wildcard DNS pointing to your ELB/NLB also means you&amp;rsquo;ll be able to use all the availability zones on AWS.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;jx&lt;/code&gt; command will ask you if you want to automate the setup fo the Route 53 wildcard CNAME. If you want to do it yourself you need to point to the ELB host name defined via:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl get service -n kube-system jxing-nginx-ingress-controller  -oyaml | grep hostname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;avoiding-dns&#34;&gt;Avoiding DNS&lt;/h4&gt;
&lt;p&gt;If you want to kick the tires of Jenkins X without going to the trouble of getting a DNS domain name to use and setting up wildcard DNS you can instead use an NLP and use one of the IP addresses of one of the availability zones as your domain via &lt;code&gt;$IP.ip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is not really intended for real production installations; but can be a quick way to get started trying out Jenkins X.&lt;/p&gt;
&lt;p&gt;When using &lt;code&gt;jx create cluster aws&lt;/code&gt;, &lt;code&gt;jx create cluster eks&lt;/code&gt; or &lt;code&gt;jx install --provider=(aws|eks)&lt;/code&gt; you are prompted if you want to use DNS and optionally setup a wildcard DNS CNAME record on Route 53; if not we are assuming you&amp;rsquo;re gonna avoid DNS to kick the tires on a single availability zone IP address by resolving the NLB host name to one of the availability zone IP addresses.&lt;/p&gt;
&lt;p&gt;Note if you wish to use a different git provider than GitHub for your environments see &lt;a href=&#34;/docs/reference/components/git/#using-a-different-git-provider-for-environments&#34;&gt;how to use a different git provider&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;eks&#34;&gt;EKS&lt;/h3&gt;
&lt;p&gt;Use the &lt;a href=&#34;/commands/jx_create_cluster_eks/&#34;&gt;jx create cluster eks&lt;/a&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create cluster eks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Under the covers this will download and use the &lt;a href=&#34;https://eksctl.io/&#34;&gt;eksctl&lt;/a&gt; tool to create a new EKS cluster, then it&amp;rsquo;ll install Jenkins X on top.&lt;/p&gt;
&lt;h3 id=&#34;kops&#34;&gt;Kops&lt;/h3&gt;
&lt;p&gt;Use the &lt;a href=&#34;/commands/deprecation/&#34;&gt;jx create cluster aws&lt;/a&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create cluster aws
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will use &lt;a href=&#34;https://github.com/kubernetes/kops&#34;&gt;kops&lt;/a&gt; on your Amazon account to create a new kubernetes cluster and install Jenkins X.&lt;/p&gt;
&lt;p&gt;To try this out we recommend you follow the &lt;a href=&#34;https://github.com/aws-samples/aws-workshop-for-kubernetes/tree/master/01-path-basics/101-start-here#create-aws-cloud9-environment&#34;&gt;AWS Workshop for Kubernetes&lt;/a&gt; to set up an AWS Cloud9 IDE session.&lt;/p&gt;
&lt;p&gt;Then create a new terminal in Cloud9 and try these commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl -L https://github.com/jenkins-x/jx/releases/download/v&lt;span style=&#34;color:#f92672&#34;&gt;{{&lt;/span&gt;.Site.Params.release&lt;span style=&#34;color:#f92672&#34;&gt;}}&lt;/span&gt;/jx-linux-amd64.tar.gz | tar xzv
sudo mv jx /usr/local/bin
jx create cluster aws
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now &lt;strong&gt;&lt;a href=&#34;/docs/getting-started/next/&#34;&gt;develop apps faster with Jenkins X&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;using-azure-aks&#34;&gt;Using Azure (AKS)&lt;/h2&gt;
&lt;p&gt;Before you start you may find &lt;a href=&#34;https://cloudblogs.microsoft.com/opensource/2019/03/06/jenkins-x-azure-kubernetes-service-setup/&#34;&gt;this blog helpful&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Use the &lt;a href=&#34;/commands/jx_create_cluster_aks/&#34;&gt;jx create cluster aks&lt;/a&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create cluster aks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now &lt;strong&gt;&lt;a href=&#34;/docs/getting-started/next/&#34;&gt;develop apps faster with Jenkins X&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;using-oracle-oke&#34;&gt;Using Oracle (OKE)&lt;/h2&gt;
&lt;p&gt;Use the &lt;a href=&#34;/commands/deprecation/&#34;&gt;jx create cluster oke&lt;/a&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create cluster oke
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will use &lt;a href=&#34;https://github.com/oracle/oci-cli&#34;&gt;oci&lt;/a&gt; on your Oracle Cloud Infrastructure account to create a new OKE cluster and install Jenkins X.&lt;/p&gt;
&lt;p&gt;Please add your $HOME/bin to $PATH otherwise jx will have issue invoking OCI CLI command. If you have already installed OCI CLI, please make sure it is in $PATH.&lt;/p&gt;
&lt;p&gt;Now &lt;strong&gt;&lt;a href=&#34;/docs/getting-started/next/&#34;&gt;develop apps faster with Jenkins X&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;using-ibm-cloud-kubernetes-service-iks&#34;&gt;Using IBM Cloud Kubernetes Service (IKS)&lt;/h2&gt;
&lt;p&gt;Use the &lt;a href=&#34;/commands/jx_create_cluster_iks/&#34;&gt;jx create cluster iks&lt;/a&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create cluster iks --apikey&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;IBM Cloud API Key&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will use &lt;a href=&#34;https://console.bluemix.net/docs/cli/index.html#overview&#34;&gt;IBM Cloud CLI&lt;/a&gt; on your IBM Cloud Infrastructure account to create a new IKS cluster and install Jenkins X.&lt;/p&gt;
&lt;p&gt;You need to make sure you have the $HOME/.jx/bin folder in your $PATH.&lt;/p&gt;
&lt;p&gt;Now &lt;strong&gt;&lt;a href=&#34;/docs/getting-started/next/&#34;&gt;develop apps faster with Jenkins X&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;using-minikube-local&#34;&gt;Using Minikube (local)&lt;/h2&gt;
&lt;p&gt;Some folks have trouble getting minikube to work for a variety of reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;minikube requires up to date virtualisation software to be installed and your machine&lt;/li&gt;
&lt;li&gt;you may have an old Docker installation or old minikube / kubectl or helm binaries and so forth.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So we &lt;strong&gt;highly&lt;/strong&gt; recommend using one of the public clouds above to try out Jenkins X. They all have free tiers so it should not cost you any significant cash and it&amp;rsquo;ll give you a chance to try out the cloud.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;minikube does not produce a public-facing IP so webhooks will not be able to reach the cluster. As a result, only polling for changes works and it might take a long while for pipelines to fire.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you still want to try minikube then we recommend letting jx create the cluster for you (as opposed to installing jx into an existing minikube cluster) by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create cluster minikube
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You&amp;rsquo;ll be prompted for the amount of memory, cores, and disk size to use, and also the driver.&lt;/p&gt;
&lt;p&gt;A known good configuration on a 2015 model Macbook Pro is to use 8 GB of RAM, 8 cores*, a 150 GB disk size and hyperkit. For installing hyperkit, see the &lt;a href=&#34;https://github.com/kubernetes/minikube/blob/master/docs/drivers.md#hyperkit-driver&#34;&gt;hyperkit installation documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The disk size is particularly large as a number of images will need to be downloaded. These are used by jx and here are the sizes at the time of this document:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jxpv1                           8Gi        RWO            Recycle          Bound       jx/jenkins-x-nexus                                                               5d
jxpv2                           100Gi      RWO            Recycle          Bound       jx/jenkins-x-docker-registry                                                     6d
jxpv3                           8Gi        RWO            Recycle          Bound       jx/jenkins-x-mongodb                                                             22h
jxpv4                           30Gi       RWO            Recycle          Bound       jx/jenkins                                                                    6d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;ldquo;I get &lt;code&gt;Error creating cluster exit status 1&lt;/code&gt;, or it seems to be hanging - what should I do?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Check to see if &lt;code&gt;minikube status&lt;/code&gt; reports that minikube is actually already running. If it is, do &lt;code&gt;minikube stop&lt;/code&gt; and then repeat the cluster creation process. Removing your &lt;code&gt;~/.minikube&lt;/code&gt; directory is also known to help: you want to make sure you have a clean environment with a working driver installed before attemping to run &lt;code&gt;jx create cluster minikube&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;I get &lt;code&gt;Error: Command failed kubectl create clusterrolebinding add-on-cluster-admin --clusterrole cluster-admin --serviceaccount kube-system:default&lt;/code&gt;, help!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The cluster role binding may exist through your use of Minikube before with RBAC. Delete any existing cluster role binding with the above name (&lt;code&gt;kubectl delete clusterrolebinding add-on-cluster-admin&lt;/code&gt;) and then repeat the &lt;code&gt;jx create cluster minikube&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;If the above proceeds OK, you&amp;rsquo;ll be greeted with &lt;code&gt;Please enter the name you wish to use with git:&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you can specify more cores than you actually have!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now &lt;strong&gt;&lt;a href=&#34;/docs/getting-started/next/&#34;&gt;develop apps faster with Jenkins X&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;using-minishift-local&#34;&gt;Using Minishift (local)&lt;/h2&gt;
&lt;p&gt;If you want to try out Jenkins X on a local OpenShift cluster then you can try using minishift.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;minishift does not produce a public-facing IP so webhooks will not be able to reach the cluster. As a result, only polling for changes works and it might take a long while for pipelines to fire.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To create a minishift VM with Jenkins X installed on it try the &lt;a href=&#34;/commands/deprecation/&#34;&gt;jx create cluster minishift&lt;/a&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx create cluster minishift
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now &lt;strong&gt;&lt;a href=&#34;/docs/getting-started/next/&#34;&gt;develop apps faster with Jenkins X&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;If you hit any issues installing Jenkins X then please check out our &lt;a href=&#34;/docs/managing-jx/faq/&#34;&gt;troubleshooting guide&lt;/a&gt; or &lt;a href=&#34;/community/&#34;&gt;let us know&lt;/a&gt; and we&amp;rsquo;ll try our best to help.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Install on Kubernetes</title>
      <link>/docs/managing-jx/old/install-on-cluster/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/old/install-on-cluster/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X can be installed on 1.8 or later of Kubernetes. The requirements are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RBAC is enabled&lt;/li&gt;
&lt;li&gt;Your Kubernetes cluster has a &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/storage-classes/&#34;&gt;default storage class&lt;/a&gt; setup so that &lt;code&gt;Persistent Volume Claims&lt;/code&gt; can be bound to &lt;code&gt;Persistent Volumes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If not using the &lt;code&gt;aws&lt;/code&gt; or &lt;code&gt;eks&lt;/code&gt; providers, then we need to make sure that insecure Docker registries are enabled. This is so that pipelines can use a Docker registry running inside the Kubernetes cluster (which typically is not public, so no https support). You can modify your pipelines to use other registries later.&lt;/li&gt;
&lt;li&gt;A cluster with at least 4 vCPUs in addition to the master node (e.g. 2 m4.large worker nodes + 1 m4.large master node)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;validating-cluster-conformance&#34;&gt;Validating cluster conformance&lt;/h3&gt;
&lt;p&gt;You can validate that your cluster is compliant with Jenkins X by executing the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jx compliance run
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will run the Kubernetes conformance tests provided by &lt;a href=&#34;https://github.com/heptio/sonobuoy&#34;&gt;sonobuoy&lt;/a&gt;. Typically, the execution takes up to an hour.
You can check the status at any time with this command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jx compliance status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the compliance tests are completed, you can see the results with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jx compliance results
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ideally, you should not see any failed tests in the output.&lt;/p&gt;
&lt;p&gt;All the resources created by the conformance tests can be cleaned up with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jx compliance delete
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;using-aws&#34;&gt;Using AWS&lt;/h2&gt;
&lt;p&gt;If you are using AWS, be sure to check out the detailed blog on &lt;a href=&#34;https://aws.amazon.com/blogs/opensource/continuous-delivery-eks-jenkins-x/&#34;&gt;Continuous Delivery with Amazon EKS and Jenkins X&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/hekonsek&#34;&gt;Henryk Konsek&lt;/a&gt; which goes into lots of detail on how to setup AWS + EKS with Jenkins X.&lt;/p&gt;
&lt;!--
TODO Terraform 
If you want to go further with infrastructure as code you can follow this
[guide](/docs/managing-jx/common-tasks/aws-terraform-install-gitops/) about setting up an EKS cluster and other
requirements in AWS with Terraform and then installing Jenkins X on it using GitOps for the
installation.
--&gt;
&lt;h3 id=&#34;ingress-on-aws&#34;&gt;Ingress on AWS&lt;/h3&gt;
&lt;p&gt;On AWS, the ideal setup is to use a Route 53 DNS wildcard CNAME to point &lt;code&gt;*.somedomain&lt;/code&gt; at your ELB or NLB host name. Then, when prompted by &lt;code&gt;jx&lt;/code&gt;, you install &lt;code&gt;somedomain&lt;/code&gt; (where &lt;code&gt;somedomain&lt;/code&gt; is an actual DNS domain/subdomain you own).&lt;/p&gt;
&lt;p&gt;Then, all the &lt;code&gt;Ingress&lt;/code&gt; resources for any exposed service in any namespace will appear as &lt;code&gt;mysvc.myns.somedomain&lt;/code&gt; - whether for things like Jenkins or Nexus or for your own microservices or Preview Environments.&lt;/p&gt;
&lt;p&gt;Using wildcard DNS pointing to your ELB/NLB also means you&amp;rsquo;ll be able to use all the availability zones on AWS.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;jx&lt;/code&gt; command will ask you if you want to automate the setup fo the Route 53 wildcard CNAME. If you want to do it yourself, you need to point to the ELB host name defined via:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl get service -n kube-system jxing-nginx-ingress-controller  -oyaml | grep hostname
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;avoiding-dns&#34;&gt;Avoiding DNS&lt;/h4&gt;
&lt;p&gt;If you want to kick the tires of Jenkins X without going to the trouble of getting a DNS domain name to use and setting up wildcard DNS, you can instead use an NLB and use one of the IP addresses of one of the availability zones as your domain via &lt;code&gt;$IP.ip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is not really intended for real production installations. However, it can be a quick way to get started trying out Jenkins X.&lt;/p&gt;
&lt;p&gt;When using &lt;code&gt;jx install --provider=(aws|eks)&lt;/code&gt;, you are prompted if you want to use DNS and optionally setup a wildcard DNS CNAME record on Route 53. If not, we assume you&amp;rsquo;re going to avoid DNS to kick the tires on a single availability zone IP address by resolving the NLB host name to one of the availability zone IP addresses.&lt;/p&gt;
&lt;h3 id=&#34;getting-registries-to-work-on-aws-with-cluster-set-up-with-kops&#34;&gt;Getting registries to work on AWS with cluster set up with kops&lt;/h3&gt;
&lt;p&gt;The default on AWS is to use ECR as the Docker container registry. For this to work, the nodes need permission to upload images to ECR. If you instead want to use the embedded Docker registry of Jenkins X inside your Kubernetes cluster, you will need to enable insecure Docker registries.&lt;/p&gt;
&lt;h4 id=&#34;give-nodes-permission-to-use-ecr&#34;&gt;Give nodes permission to use ECR&lt;/h4&gt;
&lt;p&gt;Do the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kops edit cluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then make sure the YAML has this &lt;code&gt;additionalPolicies&lt;/code&gt; entry inside the &lt;code&gt;spec&lt;/code&gt; section:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;...
&lt;span style=&#34;color:#66d9ef&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;additionalPolicies&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;node&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;|
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      [&lt;/span&gt;
        {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#34;Effect&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Allow&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#34;Action&amp;#34;: &lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ecr:InitiateLayerUpload&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ecr:UploadLayerPart&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ecr:CompleteLayerUpload&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ecr:PutImage&amp;#34;&lt;/span&gt;],
        &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#34;Resource&amp;#34;: &lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;]
        }
      ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now to make this change active on your cluster type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kops update cluster --yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should now be good to go!&lt;/p&gt;
&lt;h4 id=&#34;enabling-insecure-registries-on-kops-&#34;&gt;Enabling insecure registries on kops&lt;/h4&gt;
&lt;p&gt;Do the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kops edit cluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then make sure the YAML has this &lt;code&gt;docker&lt;/code&gt; entry inside the &lt;code&gt;spec&lt;/code&gt; section:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;...
&lt;span style=&#34;color:#66d9ef&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;docker&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;insecureRegistry&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100.64.0.0&lt;/span&gt;/&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;logDriver&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That IP range, &lt;code&gt;100.64.0.0/10&lt;/code&gt;, works on AWS, but you may need to change it on other Kubernetes clusters. It depends on the IP range of Kubernetes services.&lt;/p&gt;
&lt;p&gt;Then save the changes. You can verify your changes via:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kops get cluster -oyaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and looking for the &lt;code&gt;insecureRegistry&lt;/code&gt; section.&lt;/p&gt;
&lt;p&gt;Now to make this change active on your cluster type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kops update cluster --yes
kops rolling-update cluster --yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should now be good to go!&lt;/p&gt;
&lt;h2 id=&#34;installing-jenkins-x-on-a-cloud&#34;&gt;Installing Jenkins X on a cloud&lt;/h2&gt;
&lt;p&gt;To install Jenkins X on an existing Kubernetes cluster, you can then use the &lt;a href=&#34;/commands/deprecation/&#34;&gt;jx install&lt;/a&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you know the provider, you can specify the provider on the command line. e.g.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx install --provider&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;aws
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note: if you wish to use a different Git provider than GitHub for your environments, see &lt;a href=&#34;/docs/reference/components/git/#using-a-different-git-provider-for-environments&#34;&gt;how to use a different Git provider&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;installing-jenkins-x-on-premises&#34;&gt;Installing Jenkins X on premises&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Prerequisits&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes &amp;gt; 1.8&lt;/li&gt;
&lt;li&gt;RBAC enabled&lt;/li&gt;
&lt;li&gt;A default cluster &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/&#34;&gt;dynamic storage class&lt;/a&gt; for provisioning persistent volumes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When using an on premise Kubernetes cluster, you can use this command line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx install --provider&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kubernetes --on-premise
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will default the argument for &lt;code&gt;--external-ip&lt;/code&gt; to access services inside your cluster to use the Kubernetes master IP address.&lt;/p&gt;
&lt;p&gt;If you wish to use a different external IP address, you can use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx install --provider&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kubernetes --external-ip 1.2.3.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Otherwise, the &lt;code&gt;jx install&lt;/code&gt; will try and wait for the Ingress Controllers &lt;code&gt;Service.Status.LoadBalancer.Ingress&lt;/code&gt; to resolve to an IP address - which can fail on premise.&lt;/p&gt;
&lt;p&gt;If you already have an ingress controller installed, then try:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx install --provider&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kubernetes &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --skip-ingress &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --external-ip&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;10.20.30.40 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --domain&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;10.20.30.40.nip.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you do not know the domain or want it extracted from your Ingress deployment, try&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx install --provider&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kubernetes --external-ip 10.123.0.17 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --ingress-service&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;yoursvcname&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --ingress-deployment&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;yourdeployname&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --ingress-namespace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kube-system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want an explanation of what the &lt;a href=&#34;/commands/deprecation/&#34;&gt;jx install&lt;/a&gt; command does, you can read &lt;a href=&#34;../install-on-cluster-what-happens/&#34;&gt;what happens with the install&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;installing-jenkins-x-on-ibm-cloud-private&#34;&gt;Installing Jenkins X on IBM Cloud Private&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IBM Cloud Private version 3.1.0 is compatible with Jenkins X version 1.3.572.&lt;/li&gt;
&lt;li&gt;You might have to clean up with the &lt;code&gt;helm delete --purge jenkins-x&lt;/code&gt; or &lt;code&gt;jx uninstall&lt;/code&gt; commands. However, the &lt;code&gt;jx uninstall&lt;/code&gt; command might not correctly pick up Helm releases at the &lt;code&gt;default&lt;/code&gt; namespace if you point to the &lt;code&gt;kube-system&lt;/code&gt; Tiller.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IBM Cloud Private includes a Docker registry and ingress controller. You can install Jenkins X into IBM Cloud Private with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx install --provider&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;icp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The installation process prompts for the master IP address in your Kubernetes cluster. The master IP address is the same address that you used to access the IBM Cloud Private dashboard.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;ClusterImagePolicies&lt;/code&gt; on IBM Cloud Private version 3.1.0 and set the following permissions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;- name: docker.io/*
- name: gcr.io/*
- name: quay.io/*
- name: k8s.gcr.io/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Specify the following two &lt;code&gt;jx install&lt;/code&gt; parameters with the command line or when prompted by the IBM Cloud Private provider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;domain=&#39;&#39;&lt;/code&gt; parameter is the domain to expose ingress endpoints, for example, &lt;code&gt;jenkinsx.io&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;external-ip=&#39;&#39;&lt;/code&gt; parameter is the external IP that is used to access ingress endpoints from outside the Kubernetes cluster and for bare metal on premise clusters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you don&amp;rsquo;t specify these parameters, then the &lt;code&gt;jx install --provider=icp&lt;/code&gt; command first prompts you to enter the &lt;code&gt;external-ip&lt;/code&gt; parameter. Next, it prompts you to enter the &lt;code&gt;domain&lt;/code&gt; parameter and offers you the &lt;code&gt;&amp;lt;external-ip&amp;gt;.nip.io&lt;/code&gt; default value. After you enter these values, an ingress endpoint becomes available at &lt;code&gt;http://jenkins.jx.&amp;lt;your cluster IP&amp;gt;.nip.io&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A Tiller is set in the default namespace as part of the Jenkins X installation process. To ensure that all Helm commands point to the correct Tiller, enter the &lt;code&gt;export TILLER_NAMESPACE=default&lt;/code&gt; command when interacting with your Jenkins X installation.&lt;/p&gt;
&lt;p&gt;Create registry secrets and patch the default service account in any of the namespaces that Jenkins X creates. Deployments can then pull images from the IBM Cloud Private registry.&lt;/p&gt;
&lt;p&gt;If you create environments manually, you can specify &lt;code&gt;--pull-secrets &amp;lt;secret name&amp;gt;&lt;/code&gt; with the &lt;code&gt;jx create environment&lt;/code&gt; command. The created service account is automatically configured to use the pull secret that you mention. The pull secret needs to exist in the created namespace.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Manage by GitOps</title>
      <link>/docs/managing-jx/old/manage-via-gitops/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/old/manage-via-gitops/</guid>
      <description>
        
        
        &lt;p&gt;We recommend you use GitOps to manage your installation of Jenkins X, to upgrade it, configure it and add or remove extension &lt;a href=&#34;/docs/contributing/addons/&#34;&gt;Apps&lt;/a&gt; so itâ€™s easy to audit who changes what in your installation and to easily revert bad changes.&lt;/p&gt;
&lt;p&gt;Currently this only works on AWS and Google cloud as it requires our vault operator (which needs cloud storage &amp;amp; KMS) to store secrets while all other configuration is stored in the development environment git repository.&lt;/p&gt;
&lt;h2 id=&#34;using-gitops-to-manage-jenkins-x&#34;&gt;Using GitOps to manage Jenkins X&lt;/h2&gt;
&lt;p&gt;If you are creating a cluster or installing on an existing cluster there is a quick and handy way to use GitOps to manage Jenkins X itself - itâ€™s &lt;code&gt;â€”ng&lt;/code&gt; for the next generation of Jenkins X. Weâ€™ll make this feature flags options the default when we release 2.x of Jenkins X later this year.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;â€”ng&lt;/code&gt; flag is an alias for these flags: &lt;code&gt;â€”gitops â€”vault â€”no-tiller â€”tekton&lt;/code&gt;. So it also comes with baked in support for &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Jenkins X Pipelines&lt;/a&gt; - the modern cloud native pipeline engine based on Tekton.&lt;/p&gt;
&lt;p&gt;If you still want to use a Jenkins server as the execution engine for the automated CI/CD pipelines in Jenkins X then you can use &lt;code&gt;â€”gitops â€”vault&lt;/code&gt; instead. Though note that even if using &lt;code&gt;â€”ng&lt;/code&gt; and using &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Jenkins X Pipelines&lt;/a&gt; powered by tekton - you can still create your own &lt;a href=&#34;/docs/managing-jx/common-tasks/custom-jenkins/&#34;&gt;custom Jenkins servers&lt;/a&gt; to run traditional Jenkins jobs and pipelines!&lt;/p&gt;
&lt;p&gt;Once you have installed Jenkins X using GitOps to manage the dev environment- the install of Jenkins X and itâ€™s additional Apps - you get an extra git repository for Dev, Staging and Production. It also means that if you use an upgrade command like &lt;a href=&#34;/commands/deprecation/&#34;&gt;jx upgrade platform&lt;/a&gt; or add, upgrade or delete Apps via &lt;a href=&#34;/commands/jx_add_app/&#34;&gt;jx add app&lt;/a&gt; then those commands will generate Pull Requests on the dev environment git repository - rather like how promotion works when you release new versions of your microservices.&lt;/p&gt;
&lt;h2 id=&#34;if-things-go-bad&#34;&gt;If things go bad&lt;/h2&gt;
&lt;p&gt;Generally speaking Jenkins X can upgrade itself quite easily when using tekton. However if an upgrade breaks Jenkins X from implementing CI/CD then the GitOps to revert the change wonâ€™t work ;)&lt;/p&gt;
&lt;p&gt;if you hit any issues upgrading Jenkins X there is a manual way to apply the contents of the development environmentâ€™s git repository&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone $MY_DEV_GIT_CLONE_URL jenkins-x-dev-env
cd jenkins-x-dev-env/env
jx step env apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: What happens during installation</title>
      <link>/docs/managing-jx/old/install-on-cluster-what-happens/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/old/install-on-cluster-what-happens/</guid>
      <description>
        
        
        &lt;p&gt;The Jenkins X CLI will do the following when installing the Jenkins X platform:&lt;/p&gt;
&lt;h2 id=&#34;install-client-binaries-to-manage-your-cluster&#34;&gt;Install client binaries to manage your cluster&lt;/h2&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

If you are running on Mac OS X, Jenkins X is using &lt;code&gt;Homebrew&lt;/code&gt; to install the various CLI. It will install it if not present.
&lt;/div&gt;

&lt;h3 id=&#34;install-kubectl&#34;&gt;Install kubectl&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/kubectl/&#34;&gt;kubectl&lt;/a&gt; is the CLI of Kubernetes. It allows you to interact with your Kubernetes cluster via the API server.&lt;/p&gt;
&lt;h3 id=&#34;install-helm&#34;&gt;Install Helm&lt;/h3&gt;
&lt;p&gt;Jenkins X will install the &lt;a href=&#34;https://github.com/kubernetes/helm&#34;&gt;helm&lt;/a&gt; client - (either  helm &lt;em&gt;2.x&lt;/em&gt; or helm &lt;em&gt;3&lt;/em&gt;), if it does not already exist in your command shell path. Helm is used for packaging applications/resources (called charts) on Kubernetes, and is rapidly becoming the default standard for doing so.&lt;/p&gt;
&lt;h3 id=&#34;install-cloud-provider-cli&#34;&gt;Install cloud provider CLI&lt;/h3&gt;
&lt;p&gt;If you are using a public cloud, there will be an associated CLI for interacting with it. When install is called via the &lt;a href=&#34;/docs/getting-started/setup/create-cluster/&#34;&gt;jx create cluster&lt;/a&gt; command, the associated binary to your cloud provider will also be installed, if not present on your command shell path.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;az&lt;/code&gt; for AKS cluster (Azure)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gcloud&lt;/code&gt; for GKE cluster (Google Cloud)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kops&lt;/code&gt; for AWS cluster (Amazon Web Services)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eksctl&lt;/code&gt; for &lt;a href=&#34;https://aws.amazon.com/eks/&#34;&gt;AWS EKS&lt;/a&gt; cluster&lt;/li&gt;
&lt;li&gt;&lt;code&gt;oci&lt;/code&gt; for OKS cluster (Oracle Cloud)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to run Jenkins X locally via minikube or minishift, the following binaries are added:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;oc&lt;/code&gt; (OpenShift CLI) and &lt;code&gt;minishift&lt;/code&gt; for a local minishift cluster (OpenShift)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minikube&lt;/code&gt; for a local minikube cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Last but not least, Jenkins X will install the VM driver when required, typically &lt;code&gt;xhyve&lt;/code&gt; for Mac OS X or &lt;code&gt;hyperv&lt;/code&gt; for Windows. Other drivers (VirtualBox, VMWare&amp;hellip;) must be installed manually.&lt;/p&gt;
&lt;h2 id=&#34;create-the-kubernetes-cluster&#34;&gt;Create the Kubernetes cluster&lt;/h2&gt;
&lt;p&gt;The cluster is then created using the cloud provider CLI (for example &lt;code&gt;az aks create&lt;/code&gt; command  for Azure).&lt;/p&gt;
&lt;h2 id=&#34;setup-the-jenkins-x-platform&#34;&gt;Setup the Jenkins X platform&lt;/h2&gt;
&lt;h3 id=&#34;create-the-jenkins-x-namespace&#34;&gt;Create the Jenkins X namespace&lt;/h3&gt;
&lt;p&gt;Then Jenkins X install will create a namespace for the Jenkins X platform where all the Jenkins X infrastructure components will reside. The default is &lt;em&gt;jx&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;install-tiller-optional-only-for-helm-2&#34;&gt;Install Tiller (optional, only for Helm 2)&lt;/h3&gt;
&lt;p&gt;Tiller, the server part of Helm, is then deployed on the &lt;em&gt;kube-system&lt;/em&gt; namespace. &lt;a href=&#34;https://www.helm.sh/&#34;&gt;Helm&lt;/a&gt; is THE package manager of Kubernetes and is used subsequently to deploy all other components of Jenkins X.&lt;/p&gt;
&lt;h3 id=&#34;setup-the-ingress-controller&#34;&gt;Setup the Ingress controller&lt;/h3&gt;
&lt;p&gt;In a Kubernetes cluster, services and pods have IPs that are only routable from by the cluster network. In order for traffic to flow into the cluster, an Ingress must be created. An ingress is a collection of rules for routing traffic to your services inside Kubernetes. The ingress rules are configured in an ingress resource held on the Kubernetes API server, and an ingress controller has to be created to fulfil those ingress rules. Jenkins X does all this for you by setting up an ingress controller and associated backend plus ingress rules for the following services (once deployed):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chartmuseum&lt;/li&gt;
&lt;li&gt;docker-registry&lt;/li&gt;
&lt;li&gt;jenkins&lt;/li&gt;
&lt;li&gt;monocular&lt;/li&gt;
&lt;li&gt;nexus&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

By default, Jenkins X will expose the ingress via the &lt;em&gt;nip.io&lt;/em&gt; domain and generate self-signed certificates. You can easily adapt them by using our own custom domain and certificate after the installation with &lt;code&gt;jx upgrade ingress --cluster&lt;/code&gt;
&lt;/div&gt;

&lt;h3 id=&#34;configure-git-source-repository&#34;&gt;Configure git source repository&lt;/h3&gt;
&lt;p&gt;Jenkins X requires a git repository provider to be able to create the environment repositories. It defaults to GitHub if you did not provide a &lt;em&gt;git-provider-url&lt;/em&gt; parameter. You need to provide a username and a token that would be used to interact with the git, especially Jenkins.&lt;/p&gt;
&lt;h2 id=&#34;create-admin-secrets&#34;&gt;Create Admin secrets&lt;/h2&gt;
&lt;p&gt;Jenkins X generates an administration password for Monocular/Nexus/Jenkins and save it in secrets. It then retrieves git secrets for the helm install (so they can be used in the pipelines).&lt;/p&gt;
&lt;h3 id=&#34;clone-the-cloud-environments-repo&#34;&gt;Clone the cloud environments repo&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/jenkins-x/cloud-environments&#34;&gt;cloud environment repository&lt;/a&gt; holds all the specific configuration and encrypted secrets that will be applied to the Jenkins Platform on your Kubernetes cluster. The secrets are encrypted and unencrypted by the Helm package manager.&lt;/p&gt;
&lt;h2 id=&#34;install-the-jenkins-x-platform&#34;&gt;Install the Jenkins X platform&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform&#34;&gt;Jenkins X Platform&lt;/a&gt; holds the Helm charts for installing the components that provide the Jenkins X true CD solution. These include&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkinsci/jenkins&#34;&gt;Jenkins&lt;/a&gt; a CI/CD pipeline solution&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sonatype.com/nexus-repository-oss&#34;&gt;Nexus&lt;/a&gt; an artifact repository&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-helm/chartmuseum&#34;&gt;ChartMuseum&lt;/a&gt; - a Helm Chart repository&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-helm/monocular&#34;&gt;Monocular&lt;/a&gt; which provides a Web UI for searching and discovering charts deployed into your cluster via Jenkins X.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
