<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X â€“ Tutorials</title>
    <link>/docs/managing-jx/tutorials/</link>
    <description>Recent content in Tutorials on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/managing-jx/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Jenkins X Video Tutorial Series - Specify Your Own Builder Within A Pipeline</title>
      <link>/docs/managing-jx/tutorials/custom-builder/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/tutorials/custom-builder/</guid>
      <description>
        
        
        &lt;p&gt;&lt;/br&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/YCEbOI4ZVQ4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Docker Image CVE Scanning</title>
      <link>/docs/managing-jx/tutorials/image-security/</link>
      <pubDate>Sat, 05 May 2018 10:36:00 +0200</pubDate>
      
      <guid>/docs/managing-jx/tutorials/image-security/</guid>
      <description>
        
        
        &lt;p&gt;There is a &lt;a href=&#34;https://jenkins.io/blog/2018/05/08/jenkins-x-anchore/&#34; target=&#34;_blank&#34;&gt;blog on Announcing CVE docker image analysis with Anchore&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can watch the &lt;a href=&#34;https://www.youtube.com/watch?v=rB8Sw0FqCQk&#34; target=&#34;_blank&#34;&gt;video here&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&#34;854&#34; height=&#34;480&#34; src=&#34;https://www.youtube.com/embed/rB8Sw0FqCQk&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Google Cloud Hosted Tutorials</title>
      <link>/docs/managing-jx/tutorials/google-hosted/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/tutorials/google-hosted/</guid>
      <description>
        
        
        

&lt;p&gt;These tutorials can be used against &lt;a href=&#34;https://cloud.google.com/kubernetes-engine/&#34; target=&#34;_blank&#34;&gt;Google Kubernetes Engine&lt;/a&gt; utilising its &lt;a href=&#34;https://cloud.google.com/shell/docs/&#34; target=&#34;_blank&#34;&gt;Google Cloud Shell&lt;/a&gt; feature to help you get up and running quickly.&lt;/p&gt;

&lt;h3 id=&#34;installing-jx-on-gke&#34;&gt;Installing JX on GKE&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Time to complete.&lt;/strong&gt; About 25 minutes&lt;/p&gt;

&lt;p&gt;At the end of this guide you will have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a working JX installation on Google Kubernetes Engine&lt;/li&gt;
&lt;li&gt;created an application using a quickstart&lt;/li&gt;
&lt;li&gt;promoted that application to production&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/cloudshell/open?git_repo=https%3A%2F%2Fgithub.com%2Fjenkins-x%2Fjx-tutorial&amp;amp;page=editor&amp;amp;print=install-guide.txt&amp;amp;tutorial=tutorials%2Finstall-jx-on-gke%2Flesson.md&#34; target=&#34;_blank&#34;&gt;&lt;svg height=&#34;54&#34; width=&#34;274&#34;
   xmlns=&#34;http://www.w3.org/2000/svg&#34;
   version=&#34;1.2&#34;&gt;
  &lt;g
     transform=&#34;translate(0,-6)&#34;
     id=&#34;layer1&#34;&gt;
    &lt;rect
       width=&#34;266.465&#34;
       height=&#34;50.53175&#34;
       ry=&#34;4.6644692&#34;
       x=&#34;1.7675018&#34;
       y=&#34;7.7341251&#34;
       id=&#34;rect3101&#34;
       style=&#34;fill:#3367d6;fill-opacity:1&#34; /&gt;
  &lt;/g&gt;
  &lt;g
     id=&#34;layer2&#34;&gt;
    &lt;text
       x=&#34;52.473&#34;
       y=&#34;31.976562&#34;
       id=&#34;text4303&#34;
       xml:space=&#34;preserve&#34;
       style=&#34;font-size:13px;font-style:normal;font-weight:normal;line-height:100%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Roboto, Sans;user-select: none&#34;&gt;OPEN IN GOOGLE CLOUD SHELL&lt;/text&gt;
    &lt;g
       transform=&#34;matrix(1.1349981,0,0,1.1349981,16.464659,15.380023)&#34;
       id=&#34;g3949&#34;
       style=&#34;fill:#ffffff&#34;&gt;
      &lt;path
         d=&#34;M 21,2 H 3 C 1.9,2 1,2.9 1,4 v 11.9 c 0,1.1 0.9,2 2,2 h 7 V 20 H 8 v 2 h 8 v -2 h -2 v -2.2 h 7 c 1.1,0 2,-0.9 2,-2 V 4 C 23,2.9 22.1,2 21,2 z m -4,13 h -4 v -2 h 4 v 2 z m 0.1,-4.8 -9.9,4.1 v -2.1 l 7.2,-3.1 -7.2,-3 v -2 l 9.9,4.1 v 2 z&#34;
         id=&#34;path3937&#34;
         style=&#34;fill:#ffffff&#34; /&gt;
      &lt;path
         d=&#34;m 10,17.8 h 4 V 20 h -4 z&#34;
         id=&#34;path3939&#34;
         style=&#34;fill:#ffffff&#34; /&gt;
      &lt;path
         d=&#34;m 8,20 h 8 v 2 H 8 z&#34;
         id=&#34;path3941&#34;
         style=&#34;fill:#ffffff&#34; /&gt;
    &lt;/g&gt;
  &lt;/g&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;installing-jx-on-gke-with-terraform&#34;&gt;Installing JX on GKE with Terraform&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Time to complete.&lt;/strong&gt; About 30 minutes&lt;/p&gt;

&lt;p&gt;At the end of this guide you will have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a working JX installation on Google Kubernetes Engine using Terraform&lt;/li&gt;
&lt;li&gt;created an application using a quickstart&lt;/li&gt;
&lt;li&gt;promoted that application to production using prow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/cloudshell/open?git_repo=https%3A%2F%2Fgithub.com%2Fjenkins-x%2Fjx-tutorial&amp;amp;page=editor&amp;amp;print=install-guide.txt&amp;amp;tutorial=tutorials%2Finstall-jx-on-gke-with-terraform%2Flesson.md&#34; target=&#34;_blank&#34;&gt;&lt;svg height=&#34;54&#34; width=&#34;274&#34;
   xmlns=&#34;http://www.w3.org/2000/svg&#34;
   version=&#34;1.2&#34;&gt;
  &lt;g
     transform=&#34;translate(0,-6)&#34;
     id=&#34;layer1&#34;&gt;
    &lt;rect
       width=&#34;266.465&#34;
       height=&#34;50.53175&#34;
       ry=&#34;4.6644692&#34;
       x=&#34;1.7675018&#34;
       y=&#34;7.7341251&#34;
       id=&#34;rect3101&#34;
       style=&#34;fill:#3367d6;fill-opacity:1&#34; /&gt;
  &lt;/g&gt;
  &lt;g
     id=&#34;layer2&#34;&gt;
    &lt;text
       x=&#34;52.473&#34;
       y=&#34;31.976562&#34;
       id=&#34;text4303&#34;
       xml:space=&#34;preserve&#34;
       style=&#34;font-size:13px;font-style:normal;font-weight:normal;line-height:100%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Roboto, Sans;user-select: none&#34;&gt;OPEN IN GOOGLE CLOUD SHELL&lt;/text&gt;
    &lt;g
       transform=&#34;matrix(1.1349981,0,0,1.1349981,16.464659,15.380023)&#34;
       id=&#34;g3949&#34;
       style=&#34;fill:#ffffff&#34;&gt;
      &lt;path
         d=&#34;M 21,2 H 3 C 1.9,2 1,2.9 1,4 v 11.9 c 0,1.1 0.9,2 2,2 h 7 V 20 H 8 v 2 h 8 v -2 h -2 v -2.2 h 7 c 1.1,0 2,-0.9 2,-2 V 4 C 23,2.9 22.1,2 21,2 z m -4,13 h -4 v -2 h 4 v 2 z m 0.1,-4.8 -9.9,4.1 v -2.1 l 7.2,-3.1 -7.2,-3 v -2 l 9.9,4.1 v 2 z&#34;
         id=&#34;path3937&#34;
         style=&#34;fill:#ffffff&#34; /&gt;
      &lt;path
         d=&#34;m 10,17.8 h 4 V 20 h -4 z&#34;
         id=&#34;path3939&#34;
         style=&#34;fill:#ffffff&#34; /&gt;
      &lt;path
         d=&#34;m 8,20 h 8 v 2 H 8 z&#34;
         id=&#34;path3941&#34;
         style=&#34;fill:#ffffff&#34; /&gt;
    &lt;/g&gt;
  &lt;/g&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Jenkins X Video Tutorial Series - Deploy a Java Gradle app and add custom Tekton Steps To Your Pipeline</title>
      <link>/docs/managing-jx/tutorials/java-gradle-app/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/tutorials/java-gradle-app/</guid>
      <description>
        
        
        &lt;p&gt;&lt;/br&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/scFfqwgSA5M&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Progressive Delivery</title>
      <link>/docs/managing-jx/tutorials/progressive-delivery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/tutorials/progressive-delivery/</guid>
      <description>
        
        
        

&lt;p&gt;It&amp;rsquo;s likely you have heard of &amp;ldquo;blue green deployment&amp;rdquo; or &amp;ldquo;canary deployment&amp;rdquo;. The idea is to carefully roll out new versions of your application, if problems happen (gasp!) in production, then the system will automatically roll them back, and the majority of users will not be impacted.&lt;/p&gt;

&lt;p&gt;This has become a popular CD technique over the years.&lt;/p&gt;

&lt;p&gt;As Jenkins X runs on top of Kubernetes, there are some additional built in protections about starting new versions: if a new application fails to start, it is likely that it will never really make it to production, this is a good thing! And you get it for free!&lt;/p&gt;

&lt;p&gt;Progressive Delivery takes this a bit further: changes can be rolled out to a small percentage of users or traffic (say 1%) and then progressively released to more users (say 5%) before the delivery is considered complete.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Progressive Delivery&lt;/strong&gt; makes it easier to adopt Continuous Delivery, by deploying new versions to a subset of users and evaluating their correctness and performance before rolling them to the totality of the users, and rolled back if not matching some key metrics.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Progressive Delivery is used by Netflix, Facebook and others to reduce the risk of deployments. But you can now adopt it when using Jenkins X.&lt;/p&gt;

&lt;p&gt;In particular we focused on Canary releases and made it really easy to adopt them in your Jenkins X applications. Canary releases consist on sending a small percentage of traffic to the new version of your application and validate there are no errors before rolling it out to the rest of the users. Facebook does it this way, delivering new versions first to internal employees, then a small percentage of the users, then everybody else, but you donâ€™t need to be Facebook to take advantage of it!&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&#34;https://martinfowler.com/bliki/CanaryRelease.html&#34; target=&#34;_blank&#34;&gt;read more on Canaries at Martin Fowlerâ€™s website&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;jenkins-x-promotion-with-canaries&#34;&gt;Jenkins X Promotion with Canaries&lt;/h1&gt;

&lt;p&gt;If you already have an application in Jenkins X you know that you can promote it to the &lt;em&gt;production&lt;/em&gt; environment with &lt;code&gt;jx promote myapp --version 1.0 --env production&lt;/code&gt;. But it can also be automatically and gradually rolled it out to a percentage of users while checking that the new version is not failing. If that happens the application will be automatically rolled back. No human intervention at all during the process.&lt;/p&gt;

&lt;p&gt;As the first step three Jenkins X addons need to be installed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34;&gt;Istio&lt;/a&gt;: &lt;a href=&#34;https://istio.io/docs/concepts/what-is-istio/&#34; target=&#34;_blank&#34;&gt;a service mesh&lt;/a&gt; that allows us to manage traffic to our services.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/weaveworks/flagger&#34; target=&#34;_blank&#34;&gt;Flagger&lt;/a&gt;: a project that uses Istio to automate canarying and rollbacks using metrics from Prometheus.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The addons can be installed with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx create addon istio --version 1.1.7
jx create addon flagger
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will enable Istio in the &lt;strong&gt;jx-production&lt;/strong&gt; namespace for metrics gathering.&lt;/p&gt;

&lt;p&gt;Now get the ip of the Istio ingress and point a wildcard domain to it (e.g. &lt;code&gt;*.example.com&lt;/code&gt;), so we can use it to route multiple services based on host names. The Istio ingress provides the routing capabilities needed for Canary releases (traffic shifting) that the traditional Kubernetes ingress objects do not support.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl -n istio-system get service istio-ingressgateway \
-o jsonpath=&#39;{.status.loadBalancer.ingress[0].ip}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The cluster is configured, and itâ€™s time to configure our application. Add a &lt;code&gt;canary.yaml&lt;/code&gt; to your helm chart, under &lt;code&gt;charts/myapp/templates&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;{{- if eq .Release.Namespace &amp;quot;jx-production&amp;quot; }}
{{- if .Values.canary.enable }}
apiVersion: flagger.app/v1alpha2
kind: Canary
metadata:
  name: {{ template &amp;quot;fullname&amp;quot; . }}
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ template &amp;quot;fullname&amp;quot; . }}
  progressDeadlineSeconds: 60
  service:
    port: {{.Values.service.internalPort}}
{{- if .Values.canary.service.gateways }}
    gateways:
{{ toYaml .Values.canary.service.gateways | indent 4 }}
{{- end }}
{{- if .Values.canary.service.hosts }}
    hosts:
{{ toYaml .Values.canary.service.hosts | indent 4 }}
{{- end }}
  canaryAnalysis:
    interval: {{ .Values.canary.canaryAnalysis.interval }}
    threshold: {{ .Values.canary.canaryAnalysis.threshold }}
    maxWeight: {{ .Values.canary.canaryAnalysis.maxWeight }}
    stepWeight: {{ .Values.canary.canaryAnalysis.stepWeight }}
{{- if .Values.canary.canaryAnalysis.metrics }}
    metrics:
{{ toYaml .Values.canary.canaryAnalysis.metrics | indent 4 }}
{{- end }}
{{- end }}
{{- end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then append to the &lt;code&gt;charts/myapp/values.yaml&lt;/code&gt; the following, changing &lt;code&gt;myapp.example.com&lt;/code&gt; to your host name or names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;canary:
  enable: true
  service:
    # Istio virtual service host names
    hosts:
    - myapp.example.com
    gateways:
    - jx-gateway.istio-system.svc.cluster.local
  canaryAnalysis:
    # schedule interval (default 60s)
    interval: 60s
    # max number of failed metric checks before rollback
    threshold: 5
    # max traffic percentage routed to canary
    # percentage (0-100)
    maxWeight: 50
    # canary increment step
    # percentage (0-100)
    stepWeight: 10
    metrics:
    - name: request-success-rate
      # minimum req success rate (non 5xx responses)
      # percentage (0-100)
      threshold: 99
      interval: 60s
    - name: request-duration
      # maximum req duration P99
      # milliseconds
      threshold: 500
      interval: 60s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thatâ€™s it! Now when the app is promoted to the production environment with &lt;code&gt;jx promote myapp --version 1.0 --env production&lt;/code&gt; it will do a Canary rollout. Note that the first time it is promoted it will not do a Canary as it needs a previous version data to compare to, but it will work from the second promotion on.&lt;/p&gt;

&lt;p&gt;With the configuration in the values.yaml file above it would look like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;minute 1: send 10% of the traffic to the new version&lt;/li&gt;
&lt;li&gt;minute 2: send 20% of the traffic to the new version&lt;/li&gt;
&lt;li&gt;minute 3: send 30% of the traffic to the new version&lt;/li&gt;
&lt;li&gt;minute 4: send 40% of the traffic to the new version&lt;/li&gt;
&lt;li&gt;minute 5: send 100% of the traffic to the new version&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the metrics we have configured (request duration over 500 milliseconds or more than 1% responses returning 500 errors) fail, Flagger then will note that failure, and if it is repeated 5 times it will rollback the release, sending 100% of the traffic to the old version.&lt;/p&gt;

&lt;p&gt;To get the Canary events run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ kubectl -n jx-production get events --watch \
  --field-selector involvedObject.kind=Canary
LAST SEEN   FIRST SEEN   COUNT   NAME                                                  KIND     SUBOBJECT   TYPE     REASON   SOURCE    MESSAGE
23m         10d          7       jx-production-myapp.1584d8fbf5c306ee   Canary               Normal   Synced   flagger   New revision detected! Scaling up jx-production-myapp.jx-production
22m         10d          8       jx-production-myapp.1584d89a36d2e2f2   Canary               Normal   Synced   flagger   Starting canary analysis for jx-production-myapp.jx-production
22m         10d          8       jx-production-myapp.1584d89a38592636   Canary               Normal   Synced   flagger   Advance jx-production-myapp.jx-production canary weight 10
21m         10d          7       jx-production-myapp.1584d917ed63f6ec   Canary               Normal   Synced   flagger   Advance jx-production-myapp.jx-production canary weight 20
20m         10d          7       jx-production-myapp.1584d925d801faa0   Canary               Normal   Synced   flagger   Advance jx-production-myapp.jx-production canary weight 30
19m         10d          7       jx-production-myapp.1584d933da5f218e   Canary               Normal   Synced   flagger   Advance jx-production-myapp.jx-production canary weight 40
18m         10d          6       jx-production-myapp.1584d941d4cb21e8   Canary               Normal   Synced   flagger   Advance jx-production-myapp.jx-production canary weight 50
18m         10d          6       jx-production-myapp.1584d941d4cbc55b   Canary               Normal   Synced   flagger   Copying jx-production-myapp.jx-production template spec to jx-production-myapp-primary.jx-production
17m         10d          6       jx-production-myapp.1584d94fd1218ebc   Canary               Normal   Synced   flagger   Promotion completed! Scaling down jx-production-myapp.jx-production
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dashboard&#34;&gt;Dashboard&lt;/h2&gt;

&lt;p&gt;Flagger includes a Grafana dashboard for visualization purposes as it is not needed for the Canary releases. It can be accessed locally using Kubernetes port forwarding&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl --namespace istio-system port-forward deploy/flagger-grafana 3000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then accessing &lt;a href=&#34;http://localhost:3000&#34; target=&#34;_blank&#34;&gt;http://localhost:3000&lt;/a&gt; using admin/admin, selecting the canary-analysis dashboard and&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;namespace: jx-production&lt;/li&gt;
&lt;li&gt;primary: jx-production-myapp-primary&lt;/li&gt;
&lt;li&gt;canary: jx-production-myapp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;would provide us with a view of different metrics (cpu, memory, request duration, response errors,â€¦) of the incumbent and new versions side by side.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/grafana-canary-analysis.png&#34; class=&#34;img-thumbnail&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;caveats&#34;&gt;Caveats&lt;/h2&gt;

&lt;p&gt;Note that Istio 1.0.x by default will prevent access from your pods to the outside of the cluster, a behavior that has changed in Istio 1.1. &lt;a href=&#34;https://istio.io/docs/tasks/traffic-management/egress/&#34; target=&#34;_blank&#34;&gt;Learn how to control the Istio egress traffic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If a rollback happens automatically because the metrics fail, the Jenkins X GitOps repository for the production environment becomes out of date, still using the new version instead of the old one. This is something planned to be fixed in next releases.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Serverless Apps</title>
      <link>/docs/managing-jx/tutorials/serverless-apps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/tutorials/serverless-apps/</guid>
      <description>
        
        
        

&lt;p&gt;Serverless applications are regular applications that &amp;ldquo;scale to zero&amp;rdquo;. This means when your application isn&amp;rsquo;t in use - no resources at all will be used. You only pay for what you use. These applications scale up elastically to meet the workload.&lt;/p&gt;

&lt;p&gt;Once you have this feature enabled - all new apps you import or quickstarts you use by default will be serverless style (you can override as needed - see below). You don&amp;rsquo;t have to change the way you build web apps. This is currently in a preview state (but works well), and in future most web apps will work in this fashion (and this will be the default).&lt;/p&gt;

&lt;h2 id=&#34;enabling-serverless-apps&#34;&gt;Enabling serverless apps&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx create addon gloo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you are then good to go. Any new projects you create will be created in this serverless style.&lt;/p&gt;

&lt;h2 id=&#34;converting-existing-applications&#34;&gt;Converting existing applications&lt;/h2&gt;

&lt;p&gt;If you already have a microservice and you want to convert it over to Knative Serve just &lt;a href=&#34;/docs/using-jx/creating/import/&#34;&gt;import the source repository into Jenkins X&lt;/a&gt; and you should be all done.&lt;/p&gt;

&lt;p&gt;If your application was imported recently into Jenkins X but before you installed and enabled Knative Serve you can use &lt;a href=&#34;/commands/jx_edit_deploy/&#34;&gt;jx edit deploy&lt;/a&gt; to switch between the &lt;code&gt;default&lt;/code&gt; deployment kind (using kubernetes &lt;code&gt;Deployment&lt;/code&gt; and &lt;code&gt;Service&lt;/code&gt; resources) and the &lt;code&gt;knative&lt;/code&gt; kind (using Knative &lt;code&gt;Service&lt;/code&gt; resource)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx edit deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will modify the &lt;code&gt;knativeDeploy&lt;/code&gt; flag in your helm &lt;code&gt;charts/myapp/values.yaml&lt;/code&gt; file to enable / disable Knative Serve. Once you have committed that code change and merged to master your application will be released to staging using Knative Serve by the automated CI/CD pipeline in Jenkins X.&lt;/p&gt;

&lt;h2 id=&#34;edit-your-team-s-deploy-kind&#34;&gt;Edit your teamâ€™s deploy kind&lt;/h2&gt;

&lt;p&gt;You can edit the default deployment kind for your team which is used whenâ€™re you create a QuickStart or import a repository via the &lt;a href=&#34;/commands/jx_edit_deploy/&#34;&gt;jx edit deploy&lt;/a&gt; command with the &lt;code&gt;-t&lt;/code&gt; argument:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx edit deploy -t
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-it-works&#34;&gt;How it works&lt;/h3&gt;

&lt;p&gt;We use an open source project called &lt;a href=&#34;https://www.knative.dev/&#34; target=&#34;_blank&#34;&gt;Knative&lt;/a&gt; to provide the elastic scaling of your applications and functions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.knative.dev/&#34; target=&#34;_blank&#34;&gt;Knative Serve&lt;/a&gt; exposes functions in any programming language over HTTP with elastic scaling from zero to many pods. This lets you build serverless applications which run on any cloud or kubernetes cluster and make an efficient use of resources.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.knative.dev/&#34; target=&#34;_blank&#34;&gt;Knative&lt;/a&gt; works with service mesh technologies like &lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34;&gt;Istio&lt;/a&gt; or &lt;a href=&#34;https://gloo.solo.io/&#34; target=&#34;_blank&#34;&gt;Gloo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Jenkins X builld packs create a Knative Serve resource in your helm chart at &lt;code&gt;charts/myapp/templates/ksvc.yaml&lt;/code&gt;. This resource is only created if the &lt;code&gt;knativeDeploy&lt;/code&gt; flag is true / otherwise the default kubernetes &lt;code&gt;Service&lt;/code&gt; &amp;amp; &lt;code&gt;Deployment&lt;/code&gt; are created.&lt;/p&gt;

&lt;h2 id=&#34;installing-knative-serve&#34;&gt;Installing Knative Serve&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gloo.solo.io/&#34; target=&#34;_blank&#34;&gt;Gloo&lt;/a&gt; is much smaller and simpler to install than &lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34;&gt;Istio&lt;/a&gt; so in this guide we are going to use that.&lt;/p&gt;

&lt;p&gt;We have a simple command &lt;a href=&#34;/commands/jx_create_addon_gloo/&#34;&gt;jx create addon gloo&lt;/a&gt; to install Gloo and Knative Serve on Jenkins X:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx create addon gloo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will install Knative Serve into the &lt;code&gt;knative-serving&lt;/code&gt; namespace and Gloo into the &lt;code&gt;gloo-system&lt;/code&gt; namespace. You can check itâ€™s all installed and working via:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl get pod -n knative-serving
kubectl get pod -n gloo-system
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you can follow the &lt;a href=&#34;https://www.knative.dev/docs/install/&#34; target=&#34;_blank&#34;&gt;Knative install guide&lt;/a&gt; to install it directly via istio or gloo.&lt;/p&gt;

&lt;h2 id=&#34;using-knative-serve&#34;&gt;Using Knative Serve&lt;/h2&gt;

&lt;p&gt;Now you have installed &lt;a href=&#34;https://www.knative.dev/&#34; target=&#34;_blank&#34;&gt;Knative Serve&lt;/a&gt; snd &lt;a href=&#34;https://gloo.solo.io/&#34; target=&#34;_blank&#34;&gt;Gloo&lt;/a&gt; you can &lt;a href=&#34;/docs/getting-started/first-project/create-quickstart/&#34;&gt;create a new quicktart&lt;/a&gt; or &lt;a href=&#34;/docs/getting-started/demos-talks-posts/create_spring/&#34;&gt;create a new spring boot application&lt;/a&gt; and it will default to using Knative Serve to elastically scale your microservice based on its load over HTTP.&lt;/p&gt;

&lt;p&gt;You can check if Knative Serve is being used on your application by doing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl get ksvc -n jx-staging
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which should show all of the Knative Service resources in your Staging environment.&lt;/p&gt;

&lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;

&lt;p&gt;Here is a &lt;a href=&#34;https://youtu.be/eYIaz_plUOw?t=1980&#34; target=&#34;_blank&#34;&gt;demo of using Knative Serve snd Gloo&lt;/a&gt; from the &lt;a href=&#34;/community/april-4/&#34;&gt;April 4th, 2019&lt;/a&gt; &lt;a href=&#34;/community/&#34;&gt;Office Hours&lt;/a&gt;:&lt;/p&gt;

&lt;iframe width=&#34;565&#34; height=&#34;480&#34; src=&#34;https://www.youtube.com/embed/eYIaz_plUOw&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;

      </description>
    </item>
    
  </channel>
</rss>
