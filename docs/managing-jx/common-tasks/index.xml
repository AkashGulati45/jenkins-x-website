<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X â€“ Core Tasks</title>
    <link>/docs/managing-jx/common-tasks/</link>
    <description>Recent content in Core Tasks on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/managing-jx/common-tasks/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Access Control</title>
      <link>/docs/managing-jx/common-tasks/access-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/common-tasks/access-control/</guid>
      <description>
        
        
        

&lt;p&gt;Jenkins X uses Role-Based Access Control (RBAC) policies to control access to its various resources.  The enforcement of the policies is provided by &lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/rbac/&#34; target=&#34;_blank&#34;&gt;Kubernetes&amp;rsquo; RBAC support&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/docs/concepts/features/#teams&#34;&gt;Teams&lt;/a&gt; can have a number of &lt;a href=&#34;/docs/concepts/features/#environments&#34;&gt;Environments&lt;/a&gt; (e.g., Dev, Staging, Production) along with dynamic &lt;a href=&#34;/docs/reference/preview/&#34;&gt;Preview Environments&lt;/a&gt;; keeping  the &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Role&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;RoleBinding&lt;/code&gt;&lt;/a&gt; resources from &lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/rbac/&#34; target=&#34;_blank&#34;&gt;Kubernetes RBAC&lt;/a&gt; in sync with all the various namespaces and members of your team can be challenging.&lt;/p&gt;

&lt;p&gt;To make this management easier, Jenkins X creates a new &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34; target=&#34;_blank&#34;&gt;Custom Resource&lt;/a&gt; called &lt;a href=&#34;/docs/reference/components/custom-resources/#environmentrolebinding&#34;&gt;&lt;code&gt;EnvironmentRoleBinding&lt;/code&gt;&lt;/a&gt; which allows you to associate a &lt;code&gt;Role&lt;/code&gt; labeled with &lt;code&gt;jenkins.io/kind=EnvironmentRole&lt;/code&gt; with as many &lt;code&gt;Users&lt;/code&gt; or &lt;code&gt;ServiceAccounts&lt;/code&gt; as you like. As Environments are created or the &lt;code&gt;Role&lt;/code&gt; or &lt;code&gt;EnvironmentRoleBinding&lt;/code&gt; in the Dev environment is modified, the &lt;a href=&#34;/commands/jx_controller_role/#jx-controller-role&#34;&gt;&lt;code&gt;role controller&lt;/code&gt;&lt;/a&gt; ensures that the configuration is replicated to all the environment namespaces by creating or updating all of the &lt;code&gt;Role&lt;/code&gt; and &lt;code&gt;RoleBinding&lt;/code&gt;s per namespace.&lt;/p&gt;

&lt;p&gt;Roles are per Team so it is possible to have special roles per team, or to use common names for roles but have them customized for each team.&lt;/p&gt;

&lt;h2 id=&#34;security-implications-for-the-admin-namespace&#34;&gt;Security Implications for the admin namespace&lt;/h2&gt;

&lt;p&gt;Jenkins X stores various configuration and settings (e.g., &lt;code&gt;Users&lt;/code&gt;, &lt;code&gt;Teams&lt;/code&gt;) in the main admin namespace (&lt;code&gt;jx&lt;/code&gt;). Be careful when granting roles in the default &lt;code&gt;jx&lt;/code&gt; team as allowing users to edit some of these files may allow them to escalate their permissions.
Instead of granting non-admin users access to the &lt;code&gt;jx&lt;/code&gt; namespace, create teams and grant users access to those when using a shared cluster.&lt;/p&gt;

&lt;h2 id=&#34;default-roles&#34;&gt;Default Roles&lt;/h2&gt;

&lt;p&gt;Jenkins X ships with a collection of default &lt;code&gt;Role&lt;/code&gt; objects you can use in the &lt;code&gt;jenkins-x-platform&lt;/code&gt; template.  You can create your own if you wish, but any edits may be lost when Jenkins X is upgraded.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/templates/viewer-role.yaml&#34; target=&#34;_blank&#34;&gt;viewer&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;The &lt;code&gt;viewer&lt;/code&gt; role allows access to read projects, builds, and logs. It does not allow access to sensitive information&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/templates/committer-role.yaml&#34; target=&#34;_blank&#34;&gt;committer&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;The &lt;code&gt;committer&lt;/code&gt; role provides the same permissions as &lt;code&gt;viewer&lt;/code&gt; and allows the user to trigger builds and import new projects.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/templates/owner-role.yaml&#34; target=&#34;_blank&#34;&gt;owner&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;The owner role allows users to modify all team resources.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&#34;adding-users&#34;&gt;Adding Users&lt;/h2&gt;

&lt;p&gt;To add users use the &lt;a href=&#34;/commands/jx_create_user/&#34;&gt;jx create user&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx create user --email &amp;quot;joe@example.com&amp;quot; --login joe --name &amp;quot;Joe Bloggs&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;changing-user-roles&#34;&gt;Changing User Roles&lt;/h2&gt;

&lt;p&gt;To modify the roles for a user, use &lt;a href=&#34;/commands/jx_edit_userroles/&#34;&gt;jx edit userroles&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx edit userrole --login joe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you omit the &lt;code&gt;--login&lt;/code&gt; (&lt;code&gt;-l&lt;/code&gt;) flag, you will be prompted to pick the user to edit.&lt;/p&gt;

&lt;p&gt;For example, to make a user &lt;code&gt;joe&lt;/code&gt; have the &lt;code&gt;committer&lt;/code&gt; Role (and remove any existing roles):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx edit userrole --login joe --role committer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have fine-grained roles and want to grant multiple roles to a user, you can specify the roles as a comma-separated list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx edit userrole --login joe --role committer,viewer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modifying a user&amp;rsquo;s roles changes the &lt;code&gt;EnvironmentRoleBinding&lt;/code&gt;. The &lt;a href=&#34;/commands/jx_controller_role/#jx-controller-role&#34;&gt;role controller&lt;/a&gt; will replicate these changes to all the underlying Environment namespaces.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: DNS</title>
      <link>/docs/managing-jx/common-tasks/dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/common-tasks/dns/</guid>
      <description>
        
        
        

&lt;p&gt;To be able to access services hosted within your cluster we default to an &lt;a href=&#34;https://nip.io/&#34; target=&#34;_blank&#34;&gt;nip.io&lt;/a&gt; domain. This makes it super easy to setup and manage DNS.&lt;/p&gt;

&lt;p&gt;However, for users who want services in the cluster to be available on a personal domain, we use external-dns which is just as easy.&lt;/p&gt;

&lt;h2 id=&#34;external-dns&#34;&gt;external-dns&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;em&gt;Currently only supported on GKE&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-incubator/external-dns&#34; target=&#34;_blank&#34;&gt;ExternalDNS&lt;/a&gt; can be used to help expose Kubernetes Services and Ingresses by synchronizing with DNS providers.&lt;/p&gt;

&lt;p&gt;If you are using &lt;a href=&#34;/docs/getting-started/setup/boot/&#34;&gt;jx boot&lt;/a&gt; to install and configure your setup then modify your &lt;code&gt;jx-requirements.yml&lt;/code&gt; file to enable &lt;code&gt;ingress.externalDNS: true&lt;/code&gt; as described in the &lt;a href=&#34;/docs/getting-started/setup/boot/#ingress&#34;&gt;boot ingress documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Otherwise to setup your cluster using ExternalDNS use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx install --provider gke --tekton --external-dns
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;This will then prompt you for your domain.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ðŸ™… developer ~/go-workspace/jx(master)$ jx install --provider gke --tekton --external-dns
WARNING: When using tekton, only kaniko is supported as a builder
Context &amp;quot;gke_&amp;lt;your-project-id&amp;gt;_europe-west1-b_&amp;lt;your-cluster-name&amp;gt;&amp;quot; modified.
set exposeController Config URLTemplate &amp;quot;{{.Service}}-{{.Namespace}}.{{.Domain}}&amp;quot;
Git configured for user: **********  and email *********@****.***
helm installed and configured
? Provide the domain Jenkins X should be available at: your-domain.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A CloudDNS managed zone is then created within your clusters GCP Project, the record-sets which expose your services will be created by ExternalDNS within this managed zone.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ðŸ™… developer ~/go-workspace()$ gcloud dns managed-zones list
NAME                           DNS_NAME                   DESCRIPTION                       VISIBILITY
your-domain-com-zone           your-domain.com.           managed-zone utilised by jx       public
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;delegation&#34;&gt;delegation&lt;/h3&gt;

&lt;p&gt;Once the installation is complete, a list of name servers will be outputted to the terminal, please update your registrar using these name servers in order to delegate your domain onto Google CloudDNS.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;
        ********************************************************

            External DNS: Please delegate your-domain.com via
            your registrar onto the following name servers:
                ns-cloud-d1.googledomains.com.
                ns-cloud-d2.googledomains.com.
                ns-cloud-d3.googledomains.com.
                ns-cloud-d4.googledomains.com.

        ********************************************************

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;google-domains-https-domains-google&#34;&gt;&lt;a href=&#34;https://domains.google&#34; target=&#34;_blank&#34;&gt;Google domains&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;If you&amp;rsquo;re using Google Domains as your domain registrar please see &lt;a href=&#34;https://support.google.com/domains/answer/3290309?hl=en-GB&amp;amp;ref_topic=9018335&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; for details on delegating to custom name servers.&lt;/p&gt;

&lt;h3 id=&#34;url-template&#34;&gt;URL template&lt;/h3&gt;

&lt;p&gt;All services should be available on the same domain, of which is derived as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;lt;service&amp;gt;-&amp;lt;namespace&amp;gt;.&amp;lt;your-domain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Security Features</title>
      <link>/docs/managing-jx/common-tasks/security-features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/common-tasks/security-features/</guid>
      <description>
        
        
        

&lt;p&gt;Jenkins X has a few useful addons that can aid with ensuring the ongoing security of your deployed applications. There are static and container security, as well as dynamic security addons available.&lt;/p&gt;

&lt;h3 id=&#34;static-security&#34;&gt;Static security&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/anchore/anchore-engine&#34; target=&#34;_blank&#34;&gt;Anchore Engine&lt;/a&gt; is used to provide image security, by examining contents of containers either in pull request/review state, or on running containers.&lt;/p&gt;

&lt;p&gt;This was introduced &lt;a href=&#34;https://jenkins.io/blog/2018/05/08/jenkins-x-anchore/&#34; target=&#34;_blank&#34;&gt;in this blog post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To enable this run the following command and let it prepare the services:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx create addon anchore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will launch the require engine and services, and make it available to run on any of your teams environments, and on any running preview applications.&lt;/p&gt;

&lt;p&gt;To try it out, you can use the following command to report on any problems found:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx get cve --environment=staging
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a video &lt;a href=&#34;https://youtu.be/rB8Sw0FqCQk&#34; target=&#34;_blank&#34;&gt;showing it in action&lt;/a&gt;. To remove this addon:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx delete addon anchore
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dynamic-security&#34;&gt;Dynamic security&lt;/h3&gt;

&lt;p&gt;The Open Web Application Security Project publishes a tool called ZAP: the &lt;a href=&#34;https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project&#34; target=&#34;_blank&#34;&gt;Zed Attack Proxy&lt;/a&gt;. This provides various tools including a baseline command that can be run against an application endpoint looking for a base set of problems.&lt;/p&gt;

&lt;p&gt;In Jenkins X this can be run against a Preview Application (that each application gets) by creating a post-preview hook:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx create addon owasp-zap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any pull requests will then have their preview application run through the ZAP baseline scan, and should any failures be detected it will fail the CI pipeline automatically. The pipelines do not be changed to run this test, and they will apply to all pull requests for the team.&lt;/p&gt;

&lt;p&gt;To remove the ZAP test:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx delete post preview job --name owasp-zap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The post preview hook can also be configured with a command like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx create post preview job --name owasp --image owasp/zap2docker-weekly:latest -c &amp;quot;zap-baseline.py&amp;quot; -c &amp;quot;-I&amp;quot; -c &amp;quot;-t&amp;quot; -c &amp;quot;\$(JX_PREVIEW_URL)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can have multiple hooks configured, so if you had specific containers that had probes/tests you would like to run against every preview app (ie every pull request) you could add it this way.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/docs/reference/preview/&#34;&gt;Preview Environments&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Storage</title>
      <link>/docs/managing-jx/common-tasks/storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/common-tasks/storage/</guid>
      <description>
        
        
        

&lt;p&gt;When we use a Static Jenkins Server with Jenkins X we inherit the usual Jenkins storage model; that build logs and test results and reports are stored on the Persistent Volume of the Jenkins server.&lt;/p&gt;

&lt;p&gt;However as we move towards a more &lt;a href=&#34;/blog/2018/11/26/changes-november-26-2018/&#34;&gt;Cloud Native Jenkins&lt;/a&gt; and use &lt;a href=&#34;/news/serverless-jenkins/&#34;&gt;Serverless Jenkins&lt;/a&gt; we need a better solution for the storage of things like logs, test results, code coverage reports etc.&lt;/p&gt;

&lt;h2 id=&#34;storage-extensions&#34;&gt;Storage Extensions&lt;/h2&gt;

&lt;p&gt;So we&amp;rsquo;ve added a storage extension point which is used from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;storing logs when using &lt;a href=&#34;/news/serverless-jenkins/&#34;&gt;Serverless Jenkins&lt;/a&gt; which is done by the &lt;a href=&#34;/commands/jx_controller_build/&#34;&gt;jx controller build&lt;/a&gt; command&lt;/li&gt;
&lt;li&gt;using the &lt;a href=&#34;/commands/jx_step_stash/&#34;&gt;jx step stash&lt;/a&gt; command which stashes files from a build (test or coverage reports)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;configuring-storage&#34;&gt;Configuring Storage&lt;/h2&gt;

&lt;p&gt;You can setup the default location to use for storage. We currently support:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;storing files (logs, test or coverage reports) in a branch of a git repository. e.g. they could be part of your &lt;code&gt;gh-pages&lt;/code&gt; branch for your static site.&lt;/li&gt;
&lt;li&gt;storing files in Cloud Storage buckets like S3, GCS, Azure blobs etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Storage uses classifications which are used to define the folder in which the kind of resources live such as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;logs&lt;/li&gt;
&lt;li&gt;tests&lt;/li&gt;
&lt;li&gt;coverage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also use the special classification &lt;code&gt;default&lt;/code&gt; which is used if you don&amp;rsquo;t have a configuration for the classification in question. e.g. you could define a location of &lt;code&gt;default&lt;/code&gt; and then just configure where &lt;code&gt;logs&lt;/code&gt; go if thats different.&lt;/p&gt;

&lt;p&gt;If you are using &lt;a href=&#34;/docs/getting-started/setup/boot/&#34;&gt;jx boot&lt;/a&gt; to install and configure your setup then modify your &lt;code&gt;jx-requirements.yml&lt;/code&gt; file to configure storage as described in the &lt;a href=&#34;/docs/getting-started/setup/boot/#storage&#34;&gt;boot storage documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Otherwise to configure the storage location for a classification and team you use the &lt;a href=&#34;/commands/jx_edit_storage/&#34;&gt;jx edit storage&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Configure the tests to be stored in cloud storage (using S3 / GCS / Azure Blobs etc)
jx edit storage -c tests --bucket-url s3://myExistingBucketName

# Configure the git URL and branch of where to store logs
jx edit storage -c logs --git-url https://github.com/myorg/mylogs.git --git-branch cheese
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can view your teams storage settings via &lt;a href=&#34;/commands/jx_get_storage/&#34;&gt;jx get storage&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;using-stash&#34;&gt;Using Stash&lt;/h2&gt;

&lt;p&gt;Inside a pipeline you can then run the &lt;a href=&#34;/commands/jx_step_stash/&#34;&gt;jx step stash&lt;/a&gt; command to stash files:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# lets collect some files with the file names relative to the &#39;target/test-reports&#39; folder and store in a Git URL
jx step stash -c tests -p &amp;quot;target/test-reports/*&amp;quot; --basedir target/test-reports

# lets collect some files to a specific AWS cloud storage bucket
jx step stash -c coverage -p &amp;quot;build/coverage/*&amp;quot; --bucket-url s3://my-aws-bucket
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;specify the &lt;code&gt;classifier&lt;/code&gt; via &lt;code&gt;-c&lt;/code&gt; such as for &lt;code&gt;tests&lt;/code&gt; or &lt;code&gt;coverage&lt;/code&gt; etc.&lt;/li&gt;
&lt;li&gt;specify the files to collect via &lt;code&gt;-p&lt;/code&gt; which supports wildcards like &lt;code&gt;*&lt;/code&gt;. files which will be stored with the relative directory path&lt;/li&gt;
&lt;li&gt;if you want to remove a direectory prefix from the stashed files, like &lt;code&gt;target/reports&lt;/code&gt; you can use &lt;code&gt;--basedir&lt;/code&gt; to specify the directory to create relative file names from&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default &lt;a href=&#34;/commands/jx_step_stash/&#34;&gt;jx step stash&lt;/a&gt; will use your team&amp;rsquo;s configured location for the classification you give. If you wish you can override the location for a stash using &lt;code&gt;--git-url&lt;/code&gt; or &lt;code&gt;--bucket-url&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;unstashing&#34;&gt;Unstashing&lt;/h3&gt;

&lt;p&gt;If you need to you can unstash previously stored files via &lt;a href=&#34;/commands/jx_step_unstash/&#34;&gt;jx step unstash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are in some Go source code and you have a URL from Jenkins X, such as a Build Log URL or Attachment from a &lt;a href=&#34;/docs/reference/components/custom-resources/&#34;&gt;PipelineActivity Custom Resource&lt;/a&gt; the URL could be in various forms such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gs://anotherBucket/mydir/something.txt&lt;/code&gt; : using a GCS bucket on GCP&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s3://nameOfBucket/mydir/something.txt&lt;/code&gt; : using S3 bucket on AWS&lt;/li&gt;
&lt;li&gt;&lt;code&gt;azblob://thatBucket/mydir/something.txt&lt;/code&gt; : using an Azure bucket&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://foo/bar&lt;/code&gt; : file stored in git not using HTTPS&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://foo/bar&lt;/code&gt; : file stored in a git repo using HTTPS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to easily be able to read from the URL from Go source code you can use the &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/e5a7943dc0c3d79c27f30aea73235f18b3f5dcff/pkg/cloud/buckets/buckets.go#L44-L45&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ReadURL&lt;/code&gt; function&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: TLS</title>
      <link>/docs/managing-jx/common-tasks/tls/</link>
      <pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/common-tasks/tls/</guid>
      <description>
        
        
        &lt;p&gt;Please see the &lt;a href=&#34;/docs/getting-started/setup/boot/#ingress&#34;&gt;boot ingress documentation&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Upgrading Jenkins X</title>
      <link>/docs/managing-jx/common-tasks/upgrade-jx/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/common-tasks/upgrade-jx/</guid>
      <description>
        
        
        

&lt;p&gt;Keeping your Jenkins X environment updated can be done by command line
using the &lt;code&gt;jx upgrade&lt;/code&gt; command. Here are the most common resources that
can be upgraded. A comprehensive list of upgradeable resources are
available at &lt;a href=&#34;/commands/jx_upgrade/&#34;&gt;the Jenkins X documentation site for the
command.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;upgrading-the-cli-binary&#34;&gt;Upgrading the CLI binary&lt;/h2&gt;

&lt;p&gt;Upgrade your Jenkins X command-line by opening a terminal and running
&lt;code&gt;jx&lt;/code&gt; to upgrade the binary :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jx upgrade cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Without options, the command upgrades to the latest version of the &lt;code&gt;jx&lt;/code&gt;
binary released. If you want to install a certain version of the Jenkins
X command-line binaries, you can add an option specifying the particular
version of &lt;code&gt;jx&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jx upgrade cli -v 2.0.46
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;upgrading-the-platform&#34;&gt;Upgrading the platform&lt;/h2&gt;

&lt;p&gt;Upgrade your Jenkins X platform and any associated packages by using
&lt;code&gt;jx&lt;/code&gt; to upgrade the resource:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jx upgrade platform
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;platform&lt;/code&gt; specified in the command is Jenkins, the Helm package
manager and its associated ChartMuseum repository service, Nexus
artifact repository, and Monocular for browsing and searching chart
apps. Any ChartMuseum server associated with the cluster (such as the
&lt;a href=&#34;http://chartmuseum.jenkins-x.io&#34; target=&#34;_blank&#34;&gt;one hosted by the Jenkins X project&lt;/a&gt;)
is also referenced by the platform.&lt;/p&gt;

&lt;h2 id=&#34;upgrading-apps&#34;&gt;Upgrading apps&lt;/h2&gt;

&lt;p&gt;You can upgrade any Jenkins X apps installed during the Jenkins X
cluster creation process by using &lt;code&gt;jx&lt;/code&gt; to upgrade the resource:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jx upgrade apps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;apps&lt;/code&gt; specified includes &lt;em&gt;all&lt;/em&gt; installed apps in your kubernetes
cluster if upgrades are available. If you want to upgrade only specific
apps, you can use the &lt;code&gt;jx upgrade app&lt;/code&gt; command and the specified app:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx upgrade app cb-app-slack
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create custom Builder</title>
      <link>/docs/managing-jx/common-tasks/create-custom-builder/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/common-tasks/create-custom-builder/</guid>
      <description>
        
        
        

&lt;p&gt;In Jenkins X, it is possible to create your custom Builders (aka &lt;a href=&#34;https://github.com/jenkinsci/kubernetes-plugin&#34; target=&#34;_blank&#34;&gt;POD templates&lt;/a&gt;) or overwrite existing onces. You just need to base your Docker
image on this &lt;a href=&#34;https://github.com/jenkins-x/builder-base/blob/master/Dockerfile.common&#34; target=&#34;_blank&#34;&gt;builder-base&lt;/a&gt; image or on its &lt;a href=&#34;https://github.com/jenkins-x/builder-base/blob/master/Dockerfile.slim&#34; target=&#34;_blank&#34;&gt;slim&lt;/a&gt; version.
These images contain a number of pre-installed tools which get constantly updated and published to &lt;a href=&#34;https://hub.docker.com/r/jenkinsxio/builder-base/&#34; target=&#34;_blank&#34;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-a-custom-builder-from-scratch&#34;&gt;Create a custom Builder from scratch&lt;/h2&gt;

&lt;h3 id=&#34;builder-image&#34;&gt;Builder image&lt;/h3&gt;

&lt;p&gt;First you need to create a docker image for your builder. For instance a starting &lt;code&gt;Dockerfile&lt;/code&gt; can look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM jenkinsxio/builder-base:latest

# Install your tools and libraries
RUN yum install -y gcc openssl-devel

CMD [&amp;quot;gcc&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can build the image and publish it to your registry:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export BUILDER_IMAGE=&amp;lt;YOUR_REGISTRY&amp;gt;/&amp;lt;YOUR_BUILDER_IMAGE&amp;gt;:&amp;lt;VERSION&amp;gt;
docker build -t ${BUILDER_IMAGE} .
docker push ${BUILDER_IMAGE}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Do not worry, you do not have to run manually these steps every time when a new image needs to be built.
Jenkins X can manage this for you. You just need to push your &lt;code&gt;Dockerfile&lt;/code&gt; in a repository similar with &lt;a href=&#34;https://github.com/jenkins-x/builder-go&#34; target=&#34;_blank&#34;&gt;this
&lt;/a&gt; one. Adjust the &lt;code&gt;Jenkinsfile&lt;/code&gt; according with your organization and
application name, and then import the repository into your Jenkins X platform with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx import --url &amp;lt;REPOSITORY_URL&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From now on, every time you push a change, Jenkins X will build and publish automatically the image.&lt;/p&gt;

&lt;h3 id=&#34;install-the-builder&#34;&gt;Install the Builder&lt;/h3&gt;

&lt;p&gt;You can now install your builder either when you install Jenkins X or upgrade it.&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;myvalues.yaml&lt;/code&gt; file in your &lt;code&gt;~/.jx/&lt;/code&gt; folder with the following content:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jenkins:
  Agent:
    PodTemplates:
      MyBuilder:
        Name: mybuilder
        Label: jenkins-mybuilder
        volumes:
        - type: Secret
          secretName: jenkins-docker-cfg
          mountPath: /home/jenkins/.docker
        EnvVars:
          JENKINS_URL: http://jenkins:8080
          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_NAME: jenkins-x-bot
          GIT_COMMITTER_NAME: jenkins-x-bot
          XDG_CONFIG_HOME: /home/jenkins
          DOCKER_CONFIG: /home/jenkins/.docker/
        ServiceAccount: jenkins
        Containers:
          Jnlp:
            Image: jenkinsci/jnlp-slave:3.14-1
            RequestCpu: &amp;quot;100m&amp;quot;
            RequestMemory: &amp;quot;128Mi&amp;quot;
            Args: &#39;${computer.jnlpmac} ${computer.name}&#39;
          Dlang:
            Image: &amp;lt;YOUR_BUILDER_IMAGE&amp;gt;
            Privileged: true
            RequestCpu: &amp;quot;400m&amp;quot;
            RequestMemory: &amp;quot;512Mi&amp;quot;
            LimitCpu: &amp;quot;1&amp;quot;
            LimitMemory: &amp;quot;1024Mi&amp;quot;
            Command: &amp;quot;/bin/sh -c&amp;quot;
            Args: &amp;quot;cat&amp;quot;
            Tty: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace the builder name and image accordingly.&lt;/p&gt;

&lt;p&gt;You can proceed now with the Jenkins X installation, the builder will be automatically added to the platform.&lt;/p&gt;

&lt;h3 id=&#34;use-the-builder&#34;&gt;Use the Builder&lt;/h3&gt;

&lt;p&gt;Now that your builder was installed in Jenkins, you can easily reference it in a &lt;code&gt;Jenkinsfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Groovy&#34;&gt;pipeline {
    agent {
        label &amp;quot;jenkins-mybuilder&amp;quot;
    }
    stages {
      stage(&#39;Build&#39;) {
        when {
          branch &#39;master&#39;
        }
        steps {
          container(&#39;mybuilder&#39;) {
              // your steps
          }
        }
      }
    }
    post {
        always {
            cleanWs()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;overwrite-existing-builders&#34;&gt;Overwrite existing Builders&lt;/h2&gt;

&lt;p&gt;Jenkins X comes with a number of &lt;a href=&#34;https://raw.githubusercontent.com/jenkins-x/jenkins-x-platform/master/jenkins-x-platform/values.yaml&#34; target=&#34;_blank&#34;&gt;pre-installed builders&lt;/a&gt;
which you can overwrite if required during installation or upgrade.&lt;/p&gt;

&lt;p&gt;You just need to build your custom image either based on &lt;a href=&#34;https://github.com/jenkins-x/builder-base/blob/master/Dockerfile.common&#34; target=&#34;_blank&#34;&gt;builder-base&lt;/a&gt;
image or the &lt;a href=&#34;https://hub.docker.com/u/jenkinsxio/&#34; target=&#34;_blank&#34;&gt;builder image&lt;/a&gt; you want to overwrite. See more details above.&lt;/p&gt;

&lt;p&gt;Then you can create a &lt;code&gt;myvalues.yaml&lt;/code&gt; file in your &lt;code&gt;~/.jx/&lt;/code&gt; folder with the following content:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jenkins:
  Agent:
    PodTemplates:
      Maven:
        Containers:
          Maven:
            Image: &amp;lt;YOUR_REGISTRY&amp;gt;/&amp;lt;YOUR_MAVEN_BUILDER_IMAGE&amp;gt;:&amp;lt;VERSION&amp;gt;
      Nodejs:
        Containers:
          Nodejs:
            Image: &amp;lt;YOUR_REGISTRY&amp;gt;/&amp;lt;YOUR_NODEJS_BUILDER_IMAGE&amp;gt;:&amp;lt;VERSION&amp;gt;
      Go:
        Containers:
          Go:
            Image: &amp;lt;YOUR_REGISTRY&amp;gt;/&amp;lt;YOUR_GO_BUILDER_IMAGE&amp;gt;:&amp;lt;VERSION&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can proceed now with the Jenkins X installation, the builder will  be added automatically to the platform.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
