<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X â€“ Setup Jenkins X</title>
    <link>/docs/getting-started/setup/</link>
    <description>Recent content in Setup Jenkins X on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/getting-started/setup/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Create cluster</title>
      <link>/docs/getting-started/setup/create-cluster/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/setup/create-cluster/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X requires a Kubernetes cluster to exist so that it can be installed via &lt;a href=&#34;/docs/getting-started/setup/boot/&#34;&gt;jx boot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a number of approaches for creating Kubernetes clusters.&lt;/p&gt;

&lt;p&gt;Our recommended a approach is to use &lt;a href=&#34;https://www.terraform.io&#34; target=&#34;_blank&#34;&gt;Terraform&lt;/a&gt; to setup all of your Cloud Infrastructure (kubernetes cluster, service accounts, storage buckets, logging etc) and to use a cloud provider to create and manage your kubernetes clusters.&lt;/p&gt;

&lt;p&gt;Or you can use a kubernetes provider specific approach:&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Install jx</title>
      <link>/docs/getting-started/setup/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/setup/install/</guid>
      <description>
        
        
        

&lt;p&gt;Pick the most suitable instructions for your operating system:&lt;/p&gt;

&lt;h2 id=&#34;macos&#34;&gt;macOS&lt;/h2&gt;

&lt;p&gt;On a Mac you can use &lt;a href=&#34;https://brew.sh/&#34; target=&#34;_blank&#34;&gt;brew&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew tap jenkins-x/jx
brew install jx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install Jenkins X on macOS without brew, download the &lt;code&gt;.tar&lt;/code&gt; file, and unarchive it in a directory where you can run the &lt;code&gt;jx&lt;/code&gt; command.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Download the &lt;code&gt;jx&lt;/code&gt; binary archive using &lt;code&gt;curl&lt;/code&gt; and pipe (&lt;code&gt;|&lt;/code&gt;) the compressed archive to
the &lt;code&gt;tar&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -L &amp;quot;https://github.com/jenkins-x/jx/releases/download/$(curl --silent https://api.github.com/repos/jenkins-x/jx/releases/latest | jq -r &#39;.tag_name&#39;)/jx-darwin-amd64.tar.gz&amp;quot; | tar xzv &amp;quot;jx&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or, if you don&amp;rsquo;t have &lt;code&gt;jq&lt;/code&gt; installed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -L &amp;quot;https://github.com/jenkins-x/jx/releases/download/$(curl --silent &amp;quot;https://github.com/jenkins-x/jx/releases/latest&amp;quot; | sed &#39;s#.*tag/\(.*\)\&amp;quot;.*#\1#&#39;)/jx-darwin-amd64.tar.gz&amp;quot; | tar xzv &amp;quot;jx&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install the &lt;code&gt;jx&lt;/code&gt; binary by moving it to a location which should be on your environments PATH, using
the &lt;code&gt;mv&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo mv jx /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run &lt;code&gt;jx version&lt;/code&gt; to make sure you&amp;rsquo;re on the latest stable version&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx version
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;

&lt;p&gt;To install Jenkins X on Linux, download the &lt;code&gt;.tar&lt;/code&gt; file, and unarchive it in a directory where you can run the &lt;code&gt;jx&lt;/code&gt; command.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Download the &lt;code&gt;jx&lt;/code&gt; binary archive using &lt;code&gt;curl&lt;/code&gt; and pipe (&lt;code&gt;|&lt;/code&gt;) the compressed archive to
the &lt;code&gt;tar&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -L &amp;quot;https://github.com/jenkins-x/jx/releases/download/$(curl --silent https://api.github.com/repos/jenkins-x/jx/releases/latest | jq -r &#39;.tag_name&#39;)/jx-linux-amd64.tar.gz&amp;quot; | tar xzv &amp;quot;jx&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or, if you don&amp;rsquo;t have &lt;code&gt;jq&lt;/code&gt; installed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -L &amp;quot;https://github.com/jenkins-x/jx/releases/download/$(curl --silent &amp;quot;https://github.com/jenkins-x/jx/releases/latest&amp;quot; | sed &#39;s#.*tag/\(.*\)\&amp;quot;.*#\1#&#39;)/jx-linux-amd64.tar.gz&amp;quot; | tar xzv &amp;quot;jx&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install the &lt;code&gt;jx&lt;/code&gt; binary by moving it to a location which should be on your environments PATH, using
the &lt;code&gt;mv&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo mv jx /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run &lt;code&gt;jx version&lt;/code&gt; to make sure you&amp;rsquo;re on the latest stable version&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx version
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;windows&#34;&gt;Windows&lt;/h2&gt;

&lt;p&gt;You can install Jenkins X on Windows through Chocolatey, a third-party package management system that provides convenient one-step commands for local Jenkins X installations and upgrades.&lt;/p&gt;

&lt;p&gt;Install the Chocolatey package management system using an Administrative
Shell:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Right-click menu:Start[Command Prompt (Admin)].&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At the shell prompt, execute a &lt;code&gt;powershell.exe&lt;/code&gt; command to download
and install the &lt;code&gt;choco&lt;/code&gt; binary and set the installation path so that
the binary can be executed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@&amp;quot;%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe&amp;quot; -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command &amp;quot;iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))&amp;quot; &amp;amp;&amp;amp; SET &amp;quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install Jenkins X using Chocolatey:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;choco install jenkins-x
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can update to the latest version of Jenkins X using Chocolatey:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;choco upgrade jenkins-x
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;If you use &lt;a href=&#34;https://scoop.sh&#34; target=&#34;_blank&#34;&gt;scoop&lt;/a&gt;, then there is a &lt;a href=&#34;https://github.com/lukesampson/scoop/blob/master/bucket/jx.json&#34; target=&#34;_blank&#34;&gt;manifest available&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To install the &lt;code&gt;jx&lt;/code&gt; binary run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  scoop install jx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To upgrade the &lt;code&gt;jx&lt;/code&gt; binary run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  scoop update jx
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;google-cloud-platform-gcp&#34;&gt;Google Cloud Platform (GCP)&lt;/h2&gt;

&lt;p&gt;To run &lt;code&gt;jx&lt;/code&gt; commands from the GCP Cloud Shell, install the Jenkins X
binaries from the GitHub repository and install it via GCP shell
commands:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the &lt;a href=&#34;https://cloud.google.com/shell/docs/starting-cloud-shell&#34; target=&#34;_blank&#34;&gt;GCP Cloud Shell&lt;/a&gt;,
and choose your GCP project for Jenkins X.&lt;/li&gt;
&lt;/ol&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

It is highly recommended that you use Google Chrome browser with
GCP Cloud Shell, as you may experience issues using other
browsers.
&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In GCP Cloud Shell, download the &lt;code&gt;jx&lt;/code&gt; binary archive using &lt;code&gt;curl&lt;/code&gt; and pipe (&lt;code&gt;|&lt;/code&gt;) the compressed archive to
the &lt;code&gt;tar&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -L &amp;quot;https://github.com/jenkins-x/jx/releases/download/$(curl --silent https://api.github.com/repos/jenkins-x/jx/releases/latest | jq -r &#39;.tag_name&#39;)/jx-linux-amd64.tar.gz&amp;quot; | tar xzv &amp;quot;jx&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Move the &lt;code&gt;jx&lt;/code&gt; exectutable into the executable directory with this
command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo mv jx /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run &lt;code&gt;jx version&lt;/code&gt; to make sure you&amp;rsquo;re on the latest stable version&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx version
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you have the &lt;code&gt;jx&lt;/code&gt; binary installed you can then &lt;a href=&#34;/getting-started/create-cluster/&#34;&gt;configure a Jenkins X cluster on Google Kubernetes Engine&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;other-platforms&#34;&gt;Other platforms&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jenkins-x/jx/releases&#34; target=&#34;_blank&#34;&gt;download the binary&lt;/a&gt; for &lt;code&gt;jx&lt;/code&gt; and add it to your &lt;code&gt;$PATH&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or you can try &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/docs/contributing/hacking.md&#34; target=&#34;_blank&#34;&gt;build it yourself&lt;/a&gt;. Though if build it yourself please be careful to remove any older &lt;code&gt;jx&lt;/code&gt; binary so your local build is found first on the &lt;code&gt;$PATH&lt;/code&gt; :)&lt;/p&gt;

&lt;h2 id=&#34;getting-help&#34;&gt;Getting Help&lt;/h2&gt;

&lt;p&gt;To find out the available commands type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or to get help on a specific command, say, &lt;code&gt;create&lt;/code&gt; then type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx help create
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also browse the &lt;a href=&#34;/commands/jx&#34;&gt;jx command reference documentation&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Jenkins X Boot</title>
      <link>/docs/getting-started/setup/boot/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/setup/boot/</guid>
      <description>
        
        
        

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Jenkins X Boot&lt;/em&gt; uses the following approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;create your kubernetes cluster however you want:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use Terraform to create your kubernetes clusters + the associated cloud resources&lt;/li&gt;
&lt;li&gt;use your cloud providers web console to create a new kubernetes cluster&lt;/li&gt;

&lt;li&gt;&lt;p&gt;use &lt;code&gt;jx create cluster --skip-installation&lt;/code&gt; e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx create cluster gke --skip-installation
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;use some custom tool of your choice or maybe its provided to you by your operations team&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;you may want to verify you can communicate correctly with your kubernetes cluster via:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl get ns
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;run the &lt;a href=&#34;/commands/jx_boot&#34;&gt;jx boot&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx boot
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will now be prompted for any missing parameters required to install such as your admin user/password, the Pipeline git user and token etc.&lt;/p&gt;

&lt;p&gt;Then Jenkins X should be installed and setup on your kubernetes cluster.&lt;/p&gt;

&lt;h3 id=&#34;about-jx-boot&#34;&gt;About &amp;lsquo;jx boot&amp;rsquo;&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/commands/jx_boot&#34;&gt;jx boot&lt;/a&gt; interprets the boot pipeline using your local &lt;code&gt;jx&lt;/code&gt; binary. The underlying pipeline for booting Jenkins X can later on be ran inside kubernetes via Tekton. If ever something goes wrong with tekton you can always &lt;code&gt;jx boot&lt;/code&gt; again to get things back up and running (e.g. if someone accidentally deletes your cluster).&lt;/p&gt;

&lt;h4 id=&#34;pre-and-post-validation&#34;&gt;Pre and Post Validation&lt;/h4&gt;

&lt;p&gt;Before any installation is attempted it runs the &lt;a href=&#34;/commands/jx_step_verify_preinstall/&#34;&gt;jx step verify preinstall&lt;/a&gt; command to check everything looks OK. If you are using Terraform (so that your &amp;lsquo;jx-requirements.yml&amp;rsquo; file has &lt;code&gt;terraform: true&lt;/code&gt;) it will fail if Terraform has not created the required cloud resources. Otherwise they are lazily created for you if they don&amp;rsquo;t exist.&lt;/p&gt;

&lt;p&gt;Once the installation has completed the &lt;a href=&#34;/commands/jx_step_verify_install/&#34;&gt;jx step verify install&lt;/a&gt; command is run to verify your installation is valid.&lt;/p&gt;

&lt;h2 id=&#34;changing-your-installation&#34;&gt;Changing your installation&lt;/h2&gt;

&lt;p&gt;At any time you can re-run &lt;a href=&#34;/commands/jx_boot&#34;&gt;jx boot&lt;/a&gt; to re-apply any changes in your configuration.&lt;/p&gt;

&lt;p&gt;So just edit anything in the configuration you like and re-run &lt;a href=&#34;/commands/jx_boot&#34;&gt;jx boot&lt;/a&gt; - whether thats to add or remove Apps, to change parameters or configuration or upgrade or downgrade versions of dependencies.&lt;/p&gt;

&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;There is a file called &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml&#34; target=&#34;_blank&#34;&gt;jx-requirements.yml&lt;/a&gt; which is used to specify the logical requirements of your installation; such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what kubernetes provider to use&lt;/li&gt;
&lt;li&gt;whether to store secrets in the local file system or vault&lt;/li&gt;
&lt;li&gt;if you are using Terraform to manage your cloud resources&lt;/li&gt;
&lt;li&gt;if you wish to use kaniko for container image builds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the main configuration file for &lt;code&gt;jx boot&lt;/code&gt; and where you make most of your changes. You may want to review the  &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml&#34; target=&#34;_blank&#34;&gt;jx-requirements.yml&lt;/a&gt; file and make any changes you need.&lt;/p&gt;

&lt;h2 id=&#34;secrets&#34;&gt;Secrets&lt;/h2&gt;

&lt;p&gt;Boot currently supports the following options for managing secrets:&lt;/p&gt;

&lt;h3 id=&#34;local-storage&#34;&gt;Local Storage&lt;/h3&gt;

&lt;p&gt;This is the default or can be explicitly configured via &lt;code&gt;secretStorage: local&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
environments:
- key: dev
- key: staging
- key: production
kaniko: true
secretStorage: local
webhook: prow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If enabled secrets are loaded/saved into the folder &lt;code&gt;~/.jx/localSecrets/$clusterName&lt;/code&gt;. You can use &lt;code&gt;$JX_HOME&lt;/code&gt; to change the location of &lt;code&gt;~/.jx&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;vault&#34;&gt;Vault&lt;/h3&gt;

&lt;p&gt;This is the recommended approach when using GKE or EKS providers. It can be explicitly configured via &lt;code&gt;secretStorage: vault&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
environments:
- key: dev
- key: staging
- key: production
kaniko: true
secretStorage: vault
webhook: prow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This configuration will cause &lt;code&gt;jx boot&lt;/code&gt;&amp;rsquo;s pipeline to install a Vault using KMS and a cloud storage bucket to load/save secrets.&lt;/p&gt;

&lt;p&gt;The big advantage of Vault is it means a team of folks can then easily run &lt;code&gt;jx boot&lt;/code&gt; on the same cluster. Even if you accidentally delete your kubernetes cluster, its easy to restore from the KMS + cloud bucket.&lt;/p&gt;

&lt;h2 id=&#34;webhook&#34;&gt;Webhook&lt;/h2&gt;

&lt;p&gt;Jenkins X supports a number of engines for handling webhooks and optionally supporting &lt;a href=&#34;/docs/using-jx/faq/chatops&#34;&gt;ChatOps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/docs/reference/components/prow/&#34;&gt;Prow&lt;/a&gt; and &lt;a href=&#34;/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt; support webhooks and &lt;a href=&#34;/docs/using-jx/faq/chatops&#34;&gt;ChatOps&lt;/a&gt; whereas Jenkins just supports webhooks.&lt;/p&gt;

&lt;h3 id=&#34;prow&#34;&gt;Prow&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;/docs/reference/components/prow/&#34;&gt;Prow&lt;/a&gt; is currently the default webhook and &lt;a href=&#34;/docs/using-jx/faq/chatops&#34;&gt;ChatOps&lt;/a&gt; engine when using &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Serverless Jenkins X Pipelines&lt;/a&gt; with &lt;a href=&#34;https://tekton.dev/&#34; target=&#34;_blank&#34;&gt;Tekton&lt;/a&gt; and GitHub.&lt;/p&gt;

&lt;p&gt;Its configured via the &lt;code&gt;webhook: prow&lt;/code&gt; in &lt;code&gt;jx-requirements.yml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
environments:
- key: dev
- key: staging
- key: production
kaniko: true
storage:
  logs:
    enabled: false
  reports:
    enabled: false
  repository:
    enabled: false
webhook: prow
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lighthouse&#34;&gt;Lighthouse&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt; is currently the default webhook and &lt;a href=&#34;/docs/using-jx/faq/chatops&#34;&gt;ChatOps&lt;/a&gt; engine when using &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Serverless Jenkins X Pipelines&lt;/a&gt; with &lt;a href=&#34;https://tekton.dev/&#34; target=&#34;_blank&#34;&gt;Tekton&lt;/a&gt; and a git server other than &lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34;&gt;https://github.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once Lighthouse is more stable and well tested we&amp;rsquo;ll make it the default for all installations using &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Serverless Jenkins X Pipelines&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Its configured via the &lt;code&gt;webhook: lighthouse&lt;/code&gt; in &lt;code&gt;jx-requirements.yml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
environments:
- key: dev
- key: staging
- key: production
kaniko: true
storage:
  logs:
    enabled: false
  reports:
    enabled: false
  repository:
    enabled: false
webhook: lighthouse
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;jenkins&#34;&gt;Jenkins&lt;/h3&gt;

&lt;p&gt;To use a Jenkins server in boot for processing webhooks and pipelines configure it via &lt;code&gt;webhook: jenkins&lt;/code&gt; in &lt;code&gt;jx-requirements.yml&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;git&#34;&gt;Git&lt;/h2&gt;

&lt;p&gt;Jenkins X supports a number of different git providers. You can specify the git provider you wish to use and the organisation to use for the git providers for each environment in your &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml&#34; target=&#34;_blank&#34;&gt;jx-requirements.yml&lt;/a&gt; file.&lt;/p&gt;



&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Jenkins X creates repositories per default as private. This can cause issues when evaluating Jenkins X with GitHub, using a free GitHub &lt;em&gt;organisation&lt;/em&gt; to hold the various created (environment) repositories as free organization accounts do not have access to private repos. Using a personal Github account is not an issue though, as free private accounts have unlimited private repos.&lt;/p&gt;

&lt;p&gt;For evaluation purposes you could use a private GitHub account as the owner of the repositories, and switch to a paid organizational account once you&amp;rsquo;re ready to go all in. Alternatively, you can enable public environment repositories by setting &lt;code&gt;environmentGitPublic&lt;/code&gt; to true in your jx boot configuration. In case you&amp;rsquo;re using &lt;code&gt;jx create&lt;/code&gt; or &lt;code&gt;jx install&lt;/code&gt;, you&amp;rsquo;ll need to add the &lt;code&gt;--git-public&lt;/code&gt; option as part of the command to enable public repo&lt;/p&gt;

&lt;/div&gt;


&lt;h3 id=&#34;github&#34;&gt;GitHub&lt;/h3&gt;

&lt;p&gt;This is the default if you don&amp;rsquo;t specify anything.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  environmentGitOwner: myorg
  provider: gke
environments:
- key: dev
- key: staging
- key: production
kaniko: true
storage:
  logs:
    enabled: false
  reports:
    enabled: false
  repository:
    enabled: false
webhook: prow
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;github-enterprise&#34;&gt;GitHub Enterprise&lt;/h3&gt;

&lt;p&gt;The configuration is similar to the above but you need to specify the URL of the &lt;code&gt;gitServer&lt;/code&gt; (if it differs from &lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34;&gt;https://github.com&lt;/a&gt;) and &lt;code&gt;gitKind: github&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
  environmentGitOwner: myorg
  gitKind: github
  gitName: ghe
  gitServer: https://github.myserver.com
environments:
  - key: dev
  - key: staging
  - key: production
kaniko: true
secretStorage: local
storage:
  logs:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
  reports:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
  repository:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
webhook: lighthouse
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bitbucket-server&#34;&gt;Bitbucket Server&lt;/h3&gt;

&lt;p&gt;For this specify the URL of the &lt;code&gt;gitServer&lt;/code&gt; and &lt;code&gt;gitKind: bitbucketserver&lt;/code&gt;. If you want to use &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Serverless Jenkins X Pipelines&lt;/a&gt; with &lt;a href=&#34;https://tekton.dev/&#34; target=&#34;_blank&#34;&gt;Tekton&lt;/a&gt; then make sure you specify the &lt;a href=&#34;#webhook&#34;&gt;lighthouse webhook&lt;/a&gt; via &lt;code&gt;webhook: lighthouse&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
  environmentGitOwner: myorg
  gitKind: bitbucketserver
  gitName: bs
  gitServer: https://bitbucket.myserver.com
environments:
  - key: dev
  - key: staging
  - key: production
kaniko: true
secretStorage: local
storage:
  logs:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
  reports:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
  repository:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
webhook: lighthouse
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bitbucket-cloud&#34;&gt;Bitbucket Cloud&lt;/h3&gt;

&lt;p&gt;For this specify&lt;code&gt;gitKind: bitbucketcloud&lt;/code&gt;. If you want to use &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Serverless Jenkins X Pipelines&lt;/a&gt; with &lt;a href=&#34;https://tekton.dev/&#34; target=&#34;_blank&#34;&gt;Tekton&lt;/a&gt; then make sure you specify the &lt;a href=&#34;#webhook&#34;&gt;lighthouse webhook&lt;/a&gt; via &lt;code&gt;webhook: lighthouse&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
  environmentGitOwner: myorg
  gitKind: bitbucketcloud
  gitName: bc
environments:
  - key: dev
  - key: staging
  - key: production
kaniko: true
secretStorage: local
storage:
  logs:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
  reports:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
  repository:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
webhook: lighthouse
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;gitlab&#34;&gt;Gitlab&lt;/h3&gt;

&lt;p&gt;For this specify the URL of the &lt;code&gt;gitServer&lt;/code&gt; and &lt;code&gt;gitKind: gitlab&lt;/code&gt;. If you want to use &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Serverless Jenkins X Pipelines&lt;/a&gt; with &lt;a href=&#34;https://tekton.dev/&#34; target=&#34;_blank&#34;&gt;Tekton&lt;/a&gt; then make sure you specify the &lt;a href=&#34;#webhook&#34;&gt;lighthouse webhook&lt;/a&gt; via &lt;code&gt;webhook: lighthouse&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
  environmentGitOwner: myorg
  gitKind: gitlab
  gitName: gl
  gitServer: https://gitlab.com
environments:
  - key: dev
  - key: staging
  - key: production
kaniko: true
secretStorage: local
storage:
  logs:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
  reports:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
  repository:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
webhook: lighthouse
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;storage&#34;&gt;Storage&lt;/h2&gt;

&lt;p&gt;the &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml&#34; target=&#34;_blank&#34;&gt;jx-requirements.yml&lt;/a&gt; file can configure whether you want to use long term storage for logs + reports and what cloud storage buckets to use to store the data.&lt;/p&gt;

&lt;p&gt;e.g. the following &lt;code&gt;jx-requirements.yml&lt;/code&gt; file enables long term storage:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
environments:
- key: dev
- key: staging
- key: production
kaniko: true
storage:
  logs:
    enabled: false
  reports:
    enabled: false
  repository:
    enabled: false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also specify the URLs of the storage buckets in the &lt;code&gt;storage&lt;/code&gt; section. The following URL syntax is supported&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gs://anotherBucket/mydir/something.txt&lt;/code&gt; : using a GCS bucket on GCP&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s3://nameOfBucket/mydir/something.txt&lt;/code&gt; : using S3 bucket on AWS&lt;/li&gt;
&lt;li&gt;&lt;code&gt;azblob://thatBucket/mydir/something.txt&lt;/code&gt; : using an Azure bucket&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://foo/bar&lt;/code&gt; : file stored in git not using HTTPS&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://foo/bar&lt;/code&gt; : file stored in a git repo using HTTPS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
environments:
- key: dev
- key: staging
- key: production
kaniko: true
storage:
  logs:
    enabled: false
    url: gs://my-logs
  reports:
    enabled: false
    url: gs://my-logs
  repository:
    enabled: false
    url: gs://my-repo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more details see the &lt;a href=&#34;/architecture/storage&#34;&gt;Storage Guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;ingress&#34;&gt;Ingress&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t specify anything in your &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml&#34; target=&#34;_blank&#34;&gt;jx-requirements.yml&lt;/a&gt; file then boot will default to using HTTP (rathter than HTTPS) and using &lt;a href=&#34;https://nip.io/&#34; target=&#34;_blank&#34;&gt;nip.io&lt;/a&gt; as the DNS mechanism.&lt;/p&gt;

&lt;p&gt;After running boot your &lt;code&gt;jx-requirements.yml&lt;/code&gt; may look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
  clusterName: my-cluster-name
  environmentGitOwner: my-git-org
  project: my-gke-project
  zone: europe-west1-d
environments:
- key: dev
- key: staging
- key: production
ingress:
  domain: 1.2.3.4.nip.io
  externalDNS: false
  tls:
    email: &amp;quot;&amp;quot;
    enabled: false
    production: false
kaniko: true
secretStorage: local
storage:
  logs:
    enabled: false
  reports:
    enabled: false
  repository:
    enabled: false
webhook: prow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you wish to enable external DNS (to automatically register DNS names for all of your exported services) a DNS domain name or TLS then modify the &lt;code&gt;ingress&lt;/code&gt; section of your to add &lt;code&gt;ingress.domain&lt;/code&gt; and &lt;code&gt;ingress.externalDNS = true&lt;/code&gt; in &lt;code&gt;jx-requirements.yml&lt;/code&gt; file and re-run &lt;code&gt;jx boot&lt;/code&gt;. There&amp;rsquo;s a complete example below.&lt;/p&gt;

&lt;p&gt;You can also update your configuration to enable TLS via &lt;code&gt;ingress.lts.enabled = true&lt;/code&gt;. Here&amp;rsquo;s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  clusterName: mycluster
  environmentGitOwner: myorg
  gitKind: github
  gitName: github
  gitServer: https://github.com
  namespace: jx
  provider: gke
  vaultName: jx-vault-myname
environments:
- key: dev
- key: staging
- key: production
gitops: true
ingress:
  domain: my.domain.com
  externalDNS: true
  namespaceSubDomain: -jx.
  tls:
    email: someone@acme.com
    enabled: true
    production: true
kaniko: true
secretStorage: vault
storage:
  logs:
    enabled: true
    url: gs://jx-prod-logs
  reports:
    enabled: false
    url: &amp;quot;&amp;quot;
  repository:
    enabled: false
    url: &amp;quot;&amp;quot;
webhook: prow
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;upgrading&#34;&gt;Upgrading&lt;/h2&gt;

&lt;p&gt;With &lt;code&gt;jx boot&lt;/code&gt; all of the versions and configuration is in git so its easy to manage change via GitOps either automatically or manually.&lt;/p&gt;

&lt;h3 id=&#34;auto-upgrades&#34;&gt;Auto Upgrades&lt;/h3&gt;

&lt;p&gt;You can enable auto upgrades in the &lt;code&gt;jx-requirements.yml&lt;/code&gt; via the following (where &lt;code&gt;schedule&lt;/code&gt; is a cron expression)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;autoUpdate:
  enabled: true
  schedule: &amp;quot;0 0 23 1/1 * ? *&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When auto upgrades are enabled a &lt;code&gt;CronJob&lt;/code&gt; is run which periodically checks for changes in the &lt;a href=&#34;/docs/concepts/version-stream/&#34;&gt;version stream&lt;/a&gt; or &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config&#34; target=&#34;_blank&#34;&gt;boot configuration&lt;/a&gt;. If changes are detected the &lt;a href=&#34;/commands/jx_step_boot_upgrade/&#34;&gt;jx step boot upgrade&lt;/a&gt; will create a Pull Request on your development git repository. Once that merges the boot configuration is upgraded and boot will be re-run inside a tekton pipeline to upgrade your installation.&lt;/p&gt;

&lt;h3 id=&#34;manual-upgrades&#34;&gt;Manual upgrades&lt;/h3&gt;

&lt;p&gt;You can manually run the &lt;a href=&#34;/commands/jx_step_boot_upgrade/&#34;&gt;jx step boot upgrade&lt;/a&gt; command at any time which if there have been changes in &lt;a href=&#34;/docs/concepts/version-stream/&#34;&gt;version stream&lt;/a&gt; or &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config&#34; target=&#34;_blank&#34;&gt;boot configuration&lt;/a&gt; will create a Pull Request on your development git repository.&lt;/p&gt;

&lt;p&gt;Once that merges the boot configuration is upgraded and boot will be re-run inside a tekton pipeline to upgrade your installation.&lt;/p&gt;

&lt;h3 id=&#34;recovering&#34;&gt;Recovering&lt;/h3&gt;

&lt;p&gt;If anything ever goes wrong (e.g. your cluster, namespace or tekton gets deleted) and your installation is incabable of running tekton pipelines you can always re-run &lt;a href=&#34;/docs/getting-started/setup/boot/&#34;&gt;jx boot&lt;/a&gt; on your laptop to restore your cluster.&lt;/p&gt;

&lt;h2 id=&#34;backups&#34;&gt;Backups&lt;/h2&gt;

&lt;p&gt;Jenkins X is integrated with &lt;a href=&#34;https://velero.io&#34; target=&#34;_blank&#34;&gt;velero&lt;/a&gt; to support backing up the state of Jenkins X (the kubernetes and custom resources together with persistent volumes).&lt;/p&gt;

&lt;p&gt;To enable velero add the following to your &lt;code&gt;jx-requirements.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;storage:
  backup:
    enabled: true
    url: gs://my-backup-bucket
velero:
  namespace: velero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using whatever your cloud providers bucket URLs are. For more background checkout the &lt;a href=&#34;/docs/managing-jx/common-tasks/storage/&#34;&gt;storage guide&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
