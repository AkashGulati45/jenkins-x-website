<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X â€“ Setup Jenkins X</title>
    <link>/docs/getting-started/setup/</link>
    <description>Recent content in Setup Jenkins X on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/getting-started/setup/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Create cluster</title>
      <link>/docs/getting-started/setup/create-cluster/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/setup/create-cluster/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X requires a Kubernetes cluster to exist so that it can be installed via &lt;a href=&#34;/docs/getting-started/setup/boot/&#34;&gt;jx boot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a number of approaches for creating Kubernetes clusters.&lt;/p&gt;

&lt;p&gt;Our recommended a approach is to use &lt;a href=&#34;https://www.terraform.io&#34; target=&#34;_blank&#34;&gt;Terraform&lt;/a&gt; to setup all of your Cloud Infrastructure (kubernetes cluster, service accounts, storage buckets, logging etc) and to use a cloud provider to create and manage your kubernetes clusters.&lt;/p&gt;

&lt;p&gt;Or you can use a kubernetes provider specific approach:&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Install jx</title>
      <link>/docs/getting-started/setup/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/setup/install/</guid>
      <description>
        
        
        

&lt;p&gt;Pick the most suitable instructions for your operating system:&lt;/p&gt;

&lt;h2 id=&#34;macos&#34;&gt;macOS&lt;/h2&gt;

&lt;p&gt;On a Mac you can use &lt;a href=&#34;https://brew.sh/&#34; target=&#34;_blank&#34;&gt;brew&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew tap jenkins-x/jx
brew install jx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install Jenkins X on macOS without brew, download the &lt;code&gt;.tar&lt;/code&gt; file, and unarchive it in a directory where you can run the &lt;code&gt;jx&lt;/code&gt; command.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Download the &lt;code&gt;jx&lt;/code&gt; binary archive using &lt;code&gt;curl&lt;/code&gt; and pipe (&lt;code&gt;|&lt;/code&gt;) the compressed archive to
the &lt;code&gt;tar&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -L https://github.com/jenkins-x/jx/releases/download/v2.0.784/jx-darwin-amd64.tar.gz | tar xzv
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install the &lt;code&gt;jx&lt;/code&gt; binary by moving it to a location which should be on your environments PATH, using
the &lt;code&gt;mv&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mv jx /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run &lt;code&gt;jx version&lt;/code&gt; to make sure you&amp;rsquo;re on the latest stable version&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx version
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;

&lt;p&gt;To install Jenkins X on Linux, download the &lt;code&gt;.tar&lt;/code&gt; file, and unarchive it in a directory where you can run the &lt;code&gt;jx&lt;/code&gt; command.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Download the &lt;code&gt;jx&lt;/code&gt; binary archive using &lt;code&gt;curl&lt;/code&gt; and pipe (&lt;code&gt;|&lt;/code&gt;) the compressed archive to
the &lt;code&gt;tar&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -L https://github.com/jenkins-x/jx/releases/download/v2.0.784/jx-linux-amd64.tar.gz | tar xzv
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install the &lt;code&gt;jx&lt;/code&gt; binary by moving it to a location which should be on your environments PATH, using
the &lt;code&gt;mv&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mv jx /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run &lt;code&gt;jx version&lt;/code&gt; to make sure you&amp;rsquo;re on the latest stable version&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx version
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;windows&#34;&gt;Windows&lt;/h2&gt;

&lt;p&gt;You can install Jenkins X on Windows through Chocolatey, a third-party package management system that provides convenient one-step commands for local Jenkins X installations and upgrades.&lt;/p&gt;

&lt;p&gt;Install the Chocolatey package management system using an Administrative
Shell:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Right-click menu:Start[Command Prompt (Admin)].&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At the shell prompt, execute a &lt;code&gt;powershell.exe&lt;/code&gt; command to download
and install the &lt;code&gt;choco&lt;/code&gt; binary and set the installation path so that
the binary can be executed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@&amp;quot;%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe&amp;quot; -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command &amp;quot;iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))&amp;quot; &amp;amp;&amp;amp; SET &amp;quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install Jenkins X using Chocolatey:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;choco install jenkins-x
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can update to the latest version of Jenkins X using Chocolatey:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;choco upgrade jenkins-x
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;If you use &lt;a href=&#34;https://scoop.sh&#34; target=&#34;_blank&#34;&gt;scoop&lt;/a&gt;, then there is a &lt;a href=&#34;https://github.com/lukesampson/scoop/blob/master/bucket/jx.json&#34; target=&#34;_blank&#34;&gt;manifest available&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To install the &lt;code&gt;jx&lt;/code&gt; binary run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;  scoop install jx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To upgrade the &lt;code&gt;jx&lt;/code&gt; binary run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;  scoop update jx
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;google-cloud-platform-gcp&#34;&gt;Google Cloud Platform (GCP)&lt;/h2&gt;

&lt;p&gt;To run &lt;code&gt;jx&lt;/code&gt; commands from the GCP Cloud Shell, install the Jenkins X
binaries from the GitHub repository and install it via GCP shell
commands:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open the &lt;a href=&#34;https://cloud.google.com/shell/docs/starting-cloud-shell&#34; target=&#34;_blank&#34;&gt;GCP Cloud Shell&lt;/a&gt;,
and choose your GCP project for Jenkins X.&lt;/p&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

&lt;pre&gt;&lt;code&gt;It is highly recommended that you use Google Chrome browser with
GCP Cloud Shell, as you may experience issues using other
browsers.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In GCP Cloud Shell, download the &lt;code&gt;jx&lt;/code&gt; binary archive using &lt;code&gt;curl&lt;/code&gt; and pipe (&lt;code&gt;|&lt;/code&gt;) the compressed archive to
the &lt;code&gt;tar&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -L https://github.com/jenkins-x/jx/releases/download/v2.0.784/jx-linux-amd64.tar.gz | tar xzv
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Move the &lt;code&gt;jx&lt;/code&gt; exectutable into the executable directory with this
command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mv jx /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run &lt;code&gt;jx version&lt;/code&gt; to make sure you&amp;rsquo;re on the latest stable version&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx version
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you have the &lt;code&gt;jx&lt;/code&gt; binary installed you can then &lt;a href=&#34;/getting-started/create-cluster/&#34;&gt;configure a Jenkins X cluster on Google Kubernetes Engine&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;other-platforms&#34;&gt;Other platforms&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jenkins-x/jx/releases&#34; target=&#34;_blank&#34;&gt;download the binary&lt;/a&gt; for &lt;code&gt;jx&lt;/code&gt; and add it to your &lt;code&gt;$PATH&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or you can try &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/docs/contributing/hacking.md&#34; target=&#34;_blank&#34;&gt;build it yourself&lt;/a&gt;. Though if build it yourself please be careful to remove any older &lt;code&gt;jx&lt;/code&gt; binary so your local build is found first on the &lt;code&gt;$PATH&lt;/code&gt; :)&lt;/p&gt;

&lt;h2 id=&#34;getting-help&#34;&gt;Getting Help&lt;/h2&gt;

&lt;p&gt;To find out the available commands type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or to get help on a specific command, say, &lt;code&gt;create&lt;/code&gt; then type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx help create
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also browse the &lt;a href=&#34;/commands/jx&#34;&gt;jx command reference documentation&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Jenkins X Boot</title>
      <link>/docs/getting-started/setup/boot/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/setup/boot/</guid>
      <description>
        
        
        

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Jenkins X Boot&lt;/em&gt; uses the following approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;create your kubernetes cluster however you want:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use Terraform to create your kubernetes clusters + the associated cloud resources&lt;/li&gt;
&lt;li&gt;use your cloud providers web console to create a new kubernetes cluster&lt;/li&gt;

&lt;li&gt;&lt;p&gt;use &lt;code&gt;jx create cluster --skip-installation&lt;/code&gt; e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create cluster gke --skip-installation
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;use some custom tool of your choice or maybe its provided to you by your operations team&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;you may want to verify you can communicate correctly with your kubernetes cluster via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl get ns
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;run the &lt;a href=&#34;/commands/jx_boot&#34;&gt;jx boot&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx boot
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will now be prompted for any missing parameters required to install such as your admin user/password, the Pipeline git user and token etc.&lt;/p&gt;

&lt;p&gt;Then Jenkins X should be installed and setup on your kubernetes cluster.&lt;/p&gt;

&lt;h3 id=&#34;about-jx-boot&#34;&gt;About &amp;lsquo;jx boot&amp;rsquo;&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/commands/jx_boot&#34;&gt;jx boot&lt;/a&gt; interprets the boot pipeline using your local &lt;code&gt;jx&lt;/code&gt; binary. The underlying pipeline for booting Jenkins X can later on be ran inside kubernetes via Tekton. If ever something goes wrong with tekton you can always &lt;code&gt;jx boot&lt;/code&gt; again to get things back up and running (e.g. if someone accidentally deletes your cluster).&lt;/p&gt;

&lt;h4 id=&#34;pre-and-post-validation&#34;&gt;Pre and Post Validation&lt;/h4&gt;

&lt;p&gt;Before any installation is attempted it runs the &lt;a href=&#34;/commands/jx_step_verify_preinstall/&#34;&gt;jx step verify preinstall&lt;/a&gt; command to check everything looks OK. If you are using Terraform (so that your &amp;lsquo;jx-requirements.yml&amp;rsquo; file has &lt;code&gt;terraform: true&lt;/code&gt;) it will fail if Terraform has not created the required cloud resources. Otherwise they are lazily created for you if they don&amp;rsquo;t exist.&lt;/p&gt;

&lt;p&gt;Once the installation has completed the &lt;a href=&#34;/commands/jx_step_verify_install/&#34;&gt;jx step verify install&lt;/a&gt; command is run to verify your installation is valid.&lt;/p&gt;

&lt;h2 id=&#34;changing-your-installation&#34;&gt;Changing your installation&lt;/h2&gt;

&lt;p&gt;At any time you can re-run &lt;a href=&#34;/commands/jx_boot&#34;&gt;jx boot&lt;/a&gt; to re-apply any changes in your configuration.&lt;/p&gt;

&lt;p&gt;So just edit anything in the configuration you like and re-run &lt;a href=&#34;/commands/jx_boot&#34;&gt;jx boot&lt;/a&gt; - whether thats to add or remove Apps, to change parameters or configuration or upgrade or downgrade versions of dependencies.&lt;/p&gt;

&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;There is a file called &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml&#34; target=&#34;_blank&#34;&gt;jx-requirements.yml&lt;/a&gt; which is used to specify the logical requirements of your installation; such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what kubernetes provider to use&lt;/li&gt;
&lt;li&gt;whether to store secrets in the local file system or vault&lt;/li&gt;
&lt;li&gt;if you are using Terraform to manage your cloud resources&lt;/li&gt;
&lt;li&gt;if you wish to use kaniko for container image builds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the main configuration file for &lt;code&gt;jx boot&lt;/code&gt; and where you make most of your changes. You may want to review the  &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml&#34; target=&#34;_blank&#34;&gt;jx-requirements.yml&lt;/a&gt; file and make any changes you need.&lt;/p&gt;

&lt;h2 id=&#34;secrets&#34;&gt;Secrets&lt;/h2&gt;

&lt;p&gt;Boot currently supports the following options for managing secrets:&lt;/p&gt;

&lt;h3 id=&#34;local-storage&#34;&gt;Local Storage&lt;/h3&gt;

&lt;p&gt;This is the default or can be explicitly configured via &lt;code&gt;secretStorage: local&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
environments:
- key: dev
- key: staging
- key: production
kaniko: true
secretStorage: local
webhook: prow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If enabled secrets are loaded/saved into the folder &lt;code&gt;~/.jx/localSecrets/$clusterName&lt;/code&gt;. You can use &lt;code&gt;$JX_HOME&lt;/code&gt; to change the location of &lt;code&gt;~/.jx&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;vault&#34;&gt;Vault&lt;/h3&gt;

&lt;p&gt;This is the recommended approach when using GKE or EKS providers. It can be explicitly configured via &lt;code&gt;secretStorage: vault&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
environments:
- key: dev
- key: staging
- key: production
kaniko: true
secretStorage: vault
webhook: prow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This configuration will cause &lt;code&gt;jx boot&lt;/code&gt;&amp;rsquo;s pipeline to install a Vault using KMS and a cloud storage bucket to load/save secrets.&lt;/p&gt;

&lt;p&gt;The big advantage of Vault is it means a team of folks can then easily run &lt;code&gt;jx boot&lt;/code&gt; on the same cluster. Even if you accidentally delete your kubernetes cluster, its easy to restore from the KMS + cloud bucket.&lt;/p&gt;

&lt;h2 id=&#34;webhook&#34;&gt;Webhook&lt;/h2&gt;

&lt;p&gt;Jenkins X supports a number of engines for handling webhooks and optionally supporting ChatOps.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/docs/reference/components/prow/&#34;&gt;Prow&lt;/a&gt; and &lt;a href=&#34;/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt; support webhooks and ChatOps whereas Jenkins just supports webhooks.&lt;/p&gt;

&lt;h3 id=&#34;prow&#34;&gt;Prow&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;/docs/reference/components/prow/&#34;&gt;Prow&lt;/a&gt; is currently the default webhook and ChatOps engine when using &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Serverless Jenkins X Pipelines&lt;/a&gt; with &lt;a href=&#34;https://tekton.dev/&#34; target=&#34;_blank&#34;&gt;Tekton&lt;/a&gt; and GitHub.&lt;/p&gt;

&lt;p&gt;Its configured via the &lt;code&gt;webhook: prow&lt;/code&gt; in &lt;code&gt;jx-requirements.yml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
environments:
- key: dev
- key: staging
- key: production
kaniko: true
storage:
  logs:
    enabled: false
  reports:
    enabled: false
  repository:
    enabled: false
webhook: prow
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lighthouse&#34;&gt;Lighthouse&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt; is currently the default webhook and ChatOps engine when using &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Serverless Jenkins X Pipelines&lt;/a&gt; with &lt;a href=&#34;https://tekton.dev/&#34; target=&#34;_blank&#34;&gt;Tekton&lt;/a&gt; and a git server other than &lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34;&gt;https://github.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once Lighthouse is more stable and well tested we&amp;rsquo;ll make it the default for all installations using &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Serverless Jenkins X Pipelines&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Its configured via the &lt;code&gt;webhook: lighthouse&lt;/code&gt; in &lt;code&gt;jx-requirements.yml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
environments:
- key: dev
- key: staging
- key: production
kaniko: true
storage:
  logs:
    enabled: false
  reports:
    enabled: false
  repository:
    enabled: false
webhook: lighthouse
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;jenkins&#34;&gt;Jenkins&lt;/h3&gt;

&lt;p&gt;To use a Jenkins server in boot for processing webhooks and pipelines configure it via &lt;code&gt;webhook: jenkins&lt;/code&gt; in &lt;code&gt;jx-requirements.yml&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;git&#34;&gt;Git&lt;/h2&gt;

&lt;p&gt;Jenkins X supports a number of different git providers. You can specify the git provider you wish to use and the organisation to use for the git providers for each environment in your &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml&#34; target=&#34;_blank&#34;&gt;jx-requirements.yml&lt;/a&gt; file.&lt;/p&gt;

&lt;h3 id=&#34;github&#34;&gt;GitHub&lt;/h3&gt;

&lt;p&gt;This is the default if you don&amp;rsquo;t specify anything.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  environmentGitOwner: myorg
  provider: gke
environments:
- key: dev
- key: staging
- key: production
kaniko: true
storage:
  logs:
    enabled: false
  reports:
    enabled: false
  repository:
    enabled: false
webhook: prow
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;github-enterprise&#34;&gt;GitHub Enterprise&lt;/h3&gt;

&lt;p&gt;The configuration is similar to the above but you need to specify the URL of the &lt;code&gt;gitServer&lt;/code&gt; (if it differs from &lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34;&gt;https://github.com&lt;/a&gt;) and &lt;code&gt;gitKind: github&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
  environmentGitOwner: myorg
  gitKind: github
  gitName: ghe
  gitServer: https://github.myserver.com
environments:
  - key: dev
  - key: staging
  - key: production
kaniko: true
secretStorage: local
storage:
  logs:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
  reports:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
  repository:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
webhook: lighthouse
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bitbucket-server&#34;&gt;Bitbucket Server&lt;/h3&gt;

&lt;p&gt;For this specify the URL of the &lt;code&gt;gitServer&lt;/code&gt; and &lt;code&gt;gitKind: bitbucketserver&lt;/code&gt;. If you want to use &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Serverless Jenkins X Pipelines&lt;/a&gt; with &lt;a href=&#34;https://tekton.dev/&#34; target=&#34;_blank&#34;&gt;Tekton&lt;/a&gt; then make sure you specify the &lt;a href=&#34;#webhook&#34;&gt;lighthouse webhook&lt;/a&gt; via &lt;code&gt;webhook: lighthouse&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
  environmentGitOwner: myorg
  gitKind: bitbucketserver
  gitName: bs
  gitServer: https://bitbucket.myserver.com
environments:
  - key: dev
  - key: staging
  - key: production
kaniko: true
secretStorage: local
storage:
  logs:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
  reports:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
  repository:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
webhook: lighthouse
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bitbucket-cloud&#34;&gt;Bitbucket Cloud&lt;/h3&gt;

&lt;p&gt;For this specify&lt;code&gt;gitKind: bitbucketcloud&lt;/code&gt;. If you want to use &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Serverless Jenkins X Pipelines&lt;/a&gt; with &lt;a href=&#34;https://tekton.dev/&#34; target=&#34;_blank&#34;&gt;Tekton&lt;/a&gt; then make sure you specify the &lt;a href=&#34;#webhook&#34;&gt;lighthouse webhook&lt;/a&gt; via &lt;code&gt;webhook: lighthouse&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
  environmentGitOwner: myorg
  gitKind: bitbucketcloud
  gitName: bc
environments:
  - key: dev
  - key: staging
  - key: production
kaniko: true
secretStorage: local
storage:
  logs:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
  reports:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
  repository:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
webhook: lighthouse
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;gitlab&#34;&gt;Gitlab&lt;/h3&gt;

&lt;p&gt;For this specify the URL of the &lt;code&gt;gitServer&lt;/code&gt; and &lt;code&gt;gitKind: gitlab&lt;/code&gt;. If you want to use &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Serverless Jenkins X Pipelines&lt;/a&gt; with &lt;a href=&#34;https://tekton.dev/&#34; target=&#34;_blank&#34;&gt;Tekton&lt;/a&gt; then make sure you specify the &lt;a href=&#34;#webhook&#34;&gt;lighthouse webhook&lt;/a&gt; via &lt;code&gt;webhook: lighthouse&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
  environmentGitOwner: myorg
  gitKind: gitlab
  gitName: gl
  gitServer: https://gitlab.com
environments:
  - key: dev
  - key: staging
  - key: production
kaniko: true
secretStorage: local
storage:
  logs:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
  reports:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
  repository:
    enabled: true
    url: &amp;quot;gs://jx-logs&amp;quot;
webhook: lighthouse
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;storage&#34;&gt;Storage&lt;/h2&gt;

&lt;p&gt;the &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml&#34; target=&#34;_blank&#34;&gt;jx-requirements.yml&lt;/a&gt; file can configure whether you want to use long term storage for logs + reports and what cloud storage buckets to use to store the data.&lt;/p&gt;

&lt;p&gt;e.g. the following &lt;code&gt;jx-requirements.yml&lt;/code&gt; file enables long term storage:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
environments:
- key: dev
- key: staging
- key: production
kaniko: true
storage:
  logs:
    enabled: false
  reports:
    enabled: false
  repository:
    enabled: false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also specify the URLs of the storage buckets in the &lt;code&gt;storage&lt;/code&gt; section. The following URL syntax is supported&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gs://anotherBucket/mydir/something.txt&lt;/code&gt; : using a GCS bucket on GCP&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s3://nameOfBucket/mydir/something.txt&lt;/code&gt; : using S3 bucket on AWS&lt;/li&gt;
&lt;li&gt;&lt;code&gt;azblob://thatBucket/mydir/something.txt&lt;/code&gt; : using an Azure bucket&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://foo/bar&lt;/code&gt; : file stored in git not using HTTPS&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://foo/bar&lt;/code&gt; : file stored in a git repo using HTTPS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
environments:
- key: dev
- key: staging
- key: production
kaniko: true
storage:
  logs:
    enabled: false
    url: gs://my-logs
  reports:
    enabled: false
    url: gs://my-logs
  repository:
    enabled: false
    url: gs://my-repo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more details see the &lt;a href=&#34;/architecture/storage&#34;&gt;Storage Guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;ingress&#34;&gt;Ingress&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t specify anything in your &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml&#34; target=&#34;_blank&#34;&gt;jx-requirements.yml&lt;/a&gt; file then boot will default to using HTTP (rathter than HTTPS) and using &lt;a href=&#34;https://nip.io/&#34; target=&#34;_blank&#34;&gt;nip.io&lt;/a&gt; as the DNS mechanism.&lt;/p&gt;

&lt;p&gt;After running boot your &lt;code&gt;jx-requirements.yml&lt;/code&gt; may look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
  clusterName: my-cluster-name
  environmentGitOwner: my-git-org
  project: my-gke-project
  zone: europe-west1-d
environments:
- key: dev
- key: staging
- key: production
ingress:
  domain: 1.2.3.4.nip.io
  externalDNS: false
  tls:
    email: &amp;quot;&amp;quot;
    enabled: false
    production: false
kaniko: true
secretStorage: local
storage:
  logs:
    enabled: false
  reports:
    enabled: false
  repository:
    enabled: false
webhook: prow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you wish to enable external DNS (to automatically register DNS names for all of your exported services) a DNS domain name or TLS then modify the &lt;code&gt;ingress&lt;/code&gt; section of your to add &lt;code&gt;ingress.domain&lt;/code&gt; and &lt;code&gt;ingress.externalDNS = true&lt;/code&gt; in &lt;code&gt;jx-requirements.yml&lt;/code&gt; file and re-run &lt;code&gt;jx boot&lt;/code&gt;. There&amp;rsquo;s a complete example below.&lt;/p&gt;

&lt;p&gt;You can also update your configuration to enable TLS via &lt;code&gt;ingress.lts.enabled = true&lt;/code&gt;. Here&amp;rsquo;s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  clusterName: mycluster
  environmentGitOwner: myorg
  gitKind: github
  gitName: github
  gitServer: https://github.com
  namespace: jx
  provider: gke
  vaultName: jx-vault-myname
environments:
- key: dev
- key: staging
- key: production
gitops: true
ingress:
  domain: my.domain.com
  externalDNS: true
  namespaceSubDomain: -jx.
  tls:
    email: someone@acme.com
    enabled: true
    production: true
kaniko: true
secretStorage: vault
storage:
  logs:
    enabled: true
    url: gs://jx-prod-logs
  reports:
    enabled: false
    url: &amp;quot;&amp;quot;
  repository:
    enabled: false
    url: &amp;quot;&amp;quot;
webhook: prow
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Old create cluster documentation</title>
      <link>/docs/getting-started/setup/old-create-cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/setup/old-create-cluster/</guid>
      <description>
        
        
        

&lt;p&gt;To create a new Kubernetes cluster with Jenkins X installed use the  &lt;a href=&#34;/commands/jx_create_cluster&#34;&gt;jx create cluster&lt;/a&gt; command.&lt;/p&gt;

&lt;p&gt;A number of different public cloud providers are supported as shown below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For the best getting started experience we currently recommend using Google Container Engine (GKE)&lt;/strong&gt;. The Google Cloud Platform offers a $300 free credit if you don&amp;rsquo;t have a Google Cloud account.  See &lt;a href=&#34;https://console.cloud.google.com/freetrial&#34; target=&#34;_blank&#34;&gt;https://console.cloud.google.com/freetrial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a little demo showing GKE, AKS and Minikube in parallel. It can take some time to start on different machines/clouds so please be patient!&lt;/p&gt;

&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/ELA4tytdFeA&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;using-google-cloud-gke&#34;&gt;Using Google Cloud (GKE)&lt;/h2&gt;

&lt;p&gt;First make sure you have created/selected a Project in the &lt;a href=&#34;https://console.cloud.google.com/&#34; target=&#34;_blank&#34;&gt;Google Cloud Console&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/quickstart/gke-select-project.png&#34; class=&#34;img-thumbnail&#34;&gt;&lt;/p&gt;

&lt;p&gt;Currently the best experience for running Jenkins X is on Google Container Engine (GKE).&lt;/p&gt;

&lt;p&gt;Now &lt;a href=&#34;/docs/getting-started/setup/install//&#34;&gt;download&lt;/a&gt; the &lt;code&gt;jx&lt;/code&gt; CLI which is used to create and interact with the Jenkins X cluster.&lt;/p&gt;

&lt;p&gt;Now use the &lt;a href=&#34;/commands/jx_create_cluster_gke&#34;&gt;jx create cluster gke&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create cluster gke
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you wish to name your cluster and provide your own admin password you can run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create cluster gke --default-admin-password=mySecretPassWord123 -n myclustername
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then follow all the prompts on the console (mostly just hitting enter will do).&lt;/p&gt;

&lt;p&gt;Note if you wish to use a different git provider than GitHub for your environments see &lt;a href=&#34;/docs/managing-jx/common-tasks/git/#using-a-different-git-provider-for-environments&#34;&gt;how to use a different git provider&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;using-the-google-cloud-shell&#34;&gt;Using the Google Cloud Shell&lt;/h2&gt;

&lt;p&gt;The simplest way to install Jenkins X on Google Cloud is using the &lt;a href=&#34;https://console.cloud.google.com/&#34; target=&#34;_blank&#34;&gt;Google Cloud Shell&lt;/a&gt; as it already comes with most of the things you may need to install (&lt;code&gt;git, gcloud, kubectl&lt;/code&gt; etc).&lt;/p&gt;

&lt;p&gt;First you need to open the Google Cloud Shell via the button in the toolbar:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/quickstart/gke-start-shell.png&#34; class=&#34;img-thumbnail&#34;&gt;&lt;/p&gt;

&lt;p&gt;Then you need to download the &lt;code&gt;jx&lt;/code&gt; binary:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -L https://github.com/jenkins-x/jx/releases/download/v{{.Site.Params.release}}/jx-linux-amd64.tar.gz | tar xzv
sudo mv jx /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now use the &lt;a href=&#34;/commands/jx_create_cluster_gke&#34;&gt;jx create cluster gke&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create cluster gke --skip-login
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you wish to name your cluster and provide your own admin password you can run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create cluster gke --skip-login  --default-admin-password=mySecretPassWord123 -n myclustername
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-jx-create-cluster-gke-process&#34;&gt;The &lt;code&gt;jx create cluster gke&lt;/code&gt; process&lt;/h2&gt;

&lt;p&gt;The Jenkins X cluster creation process is a multi-step interactive
process performed via command-line interface and your desktop web
browser.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open a terminal or command prompt window (or the GCP Cloud Shell in
your web browser) and commence the Jenkins X installation process.
In this example, the Google Kubernetes Engine is used as the
Kubernetes provider:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create cluster gke
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The installation is interactive, stepping you through the entire
installation and configuration of the Kubernetes cluster creation
process.&lt;/p&gt;

&lt;p&gt;After automatically installing the &lt;code&gt;helm&lt;/code&gt; command for package
management and &lt;code&gt;gcloud&lt;/code&gt; command for cluster configuration on
kubernetes, the installer prompts you for your administrative
password to complete the installation process.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A browser window appears prompting you to choose the email address
associated with your Google Cloud Platform account, then prompts you
to accept rights permission to associate your GCP account&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The installer prompts you to choose a &lt;code&gt;regional&lt;/code&gt; or &lt;code&gt;zonal&lt;/code&gt; cluster:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Regional clusters spread kubernetes resources in a region to
multiple zones with each zone having a cluster master.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Zonal clusters run multiple kubernetes resources to multiple
cluster nodes using one cluster master.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The installer prompts you for your Cloud node machine type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Standard: a machine that scales CPU and Memory evenly, (1 vCPU
with 3.75GB RAM, 2 vCPU with 7.5GB RAM, and so on).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;High-memory: a machine with higher memory allocation for each
CPU (2 vCPU with 13GB RAM, 4 vCPU with 26GB RAM, and so on).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;High-CPU: a machine with higher vCPU allocation relative to
Memory (2 vCPU 1.8GB RAM, 4 vCPU 3.6GB RAM, and so on).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The installer asks to enter the &lt;em&gt;minimum&lt;/em&gt; quantity of nodes for the
cluster. The recommended minimum for a Jenkins X cluster is 3 nodes
for each cluster zone.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The installer asks you to enter the &lt;em&gt;maximum&lt;/em&gt; quantity of nodes per
zone. The recommended maximum for Jenkins X is 5 nodes per cluster&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The installer asks if you want to use &lt;em&gt;preemptible VMs&lt;/em&gt;. Preemptible
VMs are used typically for less than 24 hours for specific tasks
such as short-term compute cluster calculations, media rendering or
transcoding, financial industry asset performance modeling, and
others. It is &lt;em&gt;not&lt;/em&gt; recommended for typical Jenkins X deployments.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The installer asks if you want access to Google Cloud Storage or
Google Container Registry. If you enter &lt;code&gt;Y&lt;/code&gt; for yes, the installer
creates Oauth enabled scopes for accessing Google Cloud Storage and
Google Cloud Registry API authentication and access. Default is
&lt;code&gt;no&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The installer asks if you want to enable Kaniko for building
container images. &lt;code&gt;kaniko&lt;/code&gt; is used to create Docker Images without
access to a &lt;code&gt;docker&lt;/code&gt; daemon. Jenkins X default is &lt;code&gt;no&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The installer continues the installation process to
post-installation configuration. The first post-installation prompt
searches for a configured &lt;em&gt;ingress controller&lt;/em&gt;. An ingress
controller works with an external load balancer (such as Google
Cloud Load Balancing) to control various traffic types such as
HTTP(S), SSL, TCP and others on any externally accessible network
port. Jenkins X requires this in typical deployments, so the default
is &lt;code&gt;yes&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You are then prompted with creating a DNS service to use for your
cluster load balancer. If your network does not provide custom DNS,
the Jenkins X installer will create a simple wildcard DNS services
to translate to your cluster load balancer and allow access to the
nodes from the Internet. By default, the installer uses &lt;code&gt;nip.io&lt;/code&gt; to
create a domain based on your IP address.&lt;/p&gt;

&lt;p&gt;For example, if your external internet IP address is 172.31.0.2, the
installer will assign the domain name &lt;code&gt;172.31.0.2.nip.io&lt;/code&gt; so that
users and Jenkins X administrators can access the cluster.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The installer asks for a local git user for GitHub access:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Enter the GitHub User Name you want to associate to the cluster&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Choose whether or not you want to use GitHub as the CI/CD
pipeline &lt;code&gt;git&lt;/code&gt; server. The default is &lt;code&gt;yes&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When prompted, copy and paste the provided URL into a browser
and create a GitHub API token for use in your cluster.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Choose whether you want to use Serverless Jenkins X Pipelines
with Tekton or traditional Jenkins with Jenkinsfile. Choose
Serverless Jenkins X Pipelines with Tekton, as that method
supports cloud native CI/CD declarative pipelines for kubernetes
clusters using Tekton custom resources.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The installer creates an autogenerated password for
administrative access to the cluster. Copy that password and
paste it for later access.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note if you wish to use a different git provider than GitHub for your environments see &lt;a href=&#34;/docs/managing-jx/common-tasks/git/#using-a-different-git-provider-for-environments&#34;&gt;how to use a different git provider&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now &lt;strong&gt;&lt;a href=&#34;/docs/getting-started/next/&#34;&gt;develop apps faster with Jenkins X&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;connecting-to-the-cluster-from-your-laptop&#34;&gt;Connecting to the cluster from your laptop&lt;/h3&gt;

&lt;p&gt;If you wish to work with the Jenkins X cluster from your laptop then click on the &lt;code&gt;Connect&lt;/code&gt; button on the &lt;a href=&#34;https://console.cloud.google.com/kubernetes/list&#34; target=&#34;_blank&#34;&gt;Kubernetes Engine page&lt;/a&gt; in the &lt;a href=&#34;https://console.cloud.google.com/&#34; target=&#34;_blank&#34;&gt;Google Console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/quickstart/gke-connect.png&#34; class=&#34;img-thumbnail&#34;&gt;&lt;/p&gt;

&lt;p&gt;You should now be able to use the &lt;code&gt;kubectl&lt;/code&gt; and &lt;code&gt;jx&lt;/code&gt; CLI tools on your laptop to talk to the GKE cluster.&lt;/p&gt;

&lt;h3 id=&#34;using-google-cloud-from-your-laptop&#34;&gt;Using Google Cloud from your laptop&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&#34;/commands/jx_create_cluster_gke&#34;&gt;jx create cluster gke&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create cluster gke --verbose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if you are already logged in by previously using &lt;code&gt;gcloud init&lt;/code&gt; or &lt;code&gt;gcloud auth login&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create cluster gke --skip-login --verbose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those commands assume you have a google account and you&amp;rsquo;ve set up a default project that you can use to create the kubernetes cluster within.
Now &lt;strong&gt;&lt;a href=&#34;/docs/getting-started/next/&#34;&gt;develop apps faster with Jenkins X&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;using-amazon-aws&#34;&gt;Using Amazon (AWS)&lt;/h2&gt;

&lt;p&gt;If you are using AWS be sure to check out the detailed blog on &lt;a href=&#34;https://aws.amazon.com/blogs/opensource/continuous-delivery-eks-jenkins-x/&#34; target=&#34;_blank&#34;&gt;Continuous Delivery with Amazon EKS and Jenkins X&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/hekonsek&#34; target=&#34;_blank&#34;&gt;Henryk Konsek&lt;/a&gt; which goes into lots of detail on how to setup AWS + EKS with Jenkins X.&lt;/p&gt;

&lt;p&gt;We support both &lt;code&gt;kops&lt;/code&gt; or &lt;code&gt;eks&lt;/code&gt; to create your Kubernetes cluster with Jenkins X where EKS is the most strategic direction; increasingly AWS will manage more of the kubernetes side for you with EKS.&lt;/p&gt;

&lt;h3 id=&#34;ingress-options&#34;&gt;Ingress options&lt;/h3&gt;

&lt;p&gt;On AWS the ideal setup is to use a Route 53 DNS wildcard CNAME to point &lt;code&gt;*.somedomain&lt;/code&gt; at your ELB or NLB host name; then when prompted by &lt;code&gt;jx&lt;/code&gt; you install &lt;code&gt;somedomain&lt;/code&gt; (where &lt;code&gt;somedomain&lt;/code&gt; is an actual DNS domain/subdomain you own).&lt;/p&gt;

&lt;p&gt;Then all the &lt;code&gt;Ingress&lt;/code&gt; resources for any exposed service in any namespace will appear as &lt;code&gt;mysvc.myns.somedomain&lt;/code&gt; - whether for things like Jenkins or Nexus or for your own microservices or Preview Environments.&lt;/p&gt;

&lt;p&gt;Using wildcard DNS pointing to your ELB/NLB also means you&amp;rsquo;ll be able to use all the availability zones on AWS.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;jx&lt;/code&gt; command will ask you if you want to automate the setup fo the Route 53 wildcard CNAME. If you want to do it yourself you need to point to the ELB host name defined via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl get service -n kube-system jxing-nginx-ingress-controller  -oyaml | grep hostname
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;avoiding-dns&#34;&gt;Avoiding DNS&lt;/h4&gt;

&lt;p&gt;If you want to kick the tires of Jenkins X without going to the trouble of getting a DNS domain name to use and setting up wildcard DNS you can instead use an NLP and use one of the IP addresses of one of the availability zones as your domain via &lt;code&gt;$IP.ip&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is not really intended for real production installations; but can be a quick way to get started trying out Jenkins X.&lt;/p&gt;

&lt;p&gt;When using &lt;code&gt;jx create cluster aws&lt;/code&gt;, &lt;code&gt;jx create cluster eks&lt;/code&gt; or &lt;code&gt;jx install --provider=(aws|eks)&lt;/code&gt; you are prompted if you want to use DNS and optionally setup a wildcard DNS CNAME record on Route 53; if not we are assuming you&amp;rsquo;re gonna avoid DNS to kick the tires on a single availability zone IP address by resolving the NLB host name to one of the availability zone IP addresses.&lt;/p&gt;

&lt;p&gt;Note if you wish to use a different git provider than GitHub for your environments see &lt;a href=&#34;/docs/managing-jx/common-tasks/git/#using-a-different-git-provider-for-environments&#34;&gt;how to use a different git provider&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;eks&#34;&gt;EKS&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&#34;/commands/jx_create_cluster_eks&#34;&gt;jx create cluster eks&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create cluster eks
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Under the covers this will download and use the &lt;a href=&#34;https://eksctl.io/&#34; target=&#34;_blank&#34;&gt;eksctl&lt;/a&gt; tool to create a new EKS cluster, then it&amp;rsquo;ll install Jenkins X on top.&lt;/p&gt;

&lt;h3 id=&#34;kops&#34;&gt;Kops&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&#34;/commands/jx_create_cluster_aws&#34;&gt;jx create cluster aws&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create cluster aws
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will use &lt;a href=&#34;https://github.com/kubernetes/kops&#34; target=&#34;_blank&#34;&gt;kops&lt;/a&gt; on your Amazon account to create a new kubernetes cluster and install Jenkins X.&lt;/p&gt;

&lt;p&gt;To try this out we recommend you follow the &lt;a href=&#34;https://github.com/aws-samples/aws-workshop-for-kubernetes/tree/master/01-path-basics/101-start-here#create-aws-cloud9-environment&#34; target=&#34;_blank&#34;&gt;AWS Workshop for Kubernetes&lt;/a&gt; to set up an AWS Cloud9 IDE session.&lt;/p&gt;

&lt;p&gt;Then create a new terminal in Cloud9 and try these commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -L https://github.com/jenkins-x/jx/releases/download/v{{.Site.Params.release}}/jx-linux-amd64.tar.gz | tar xzv
sudo mv jx /usr/local/bin
jx create cluster aws
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;strong&gt;&lt;a href=&#34;/docs/getting-started/next/&#34;&gt;develop apps faster with Jenkins X&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;using-azure-aks&#34;&gt;Using Azure (AKS)&lt;/h2&gt;

&lt;p&gt;Before you start you may find &lt;a href=&#34;https://cloudblogs.microsoft.com/opensource/2019/03/06/jenkins-x-azure-kubernetes-service-setup/&#34; target=&#34;_blank&#34;&gt;this blog helpful&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Use the &lt;a href=&#34;/commands/jx_create_cluster_aks&#34;&gt;jx create cluster aks&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create cluster aks
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;strong&gt;&lt;a href=&#34;/docs/getting-started/next/&#34;&gt;develop apps faster with Jenkins X&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;using-oracle-oke&#34;&gt;Using Oracle (OKE)&lt;/h2&gt;

&lt;p&gt;Use the &lt;a href=&#34;/commands/jx_create_cluster_oke&#34;&gt;jx create cluster oke&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create cluster oke
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will use &lt;a href=&#34;https://github.com/oracle/oci-cli&#34; target=&#34;_blank&#34;&gt;oci&lt;/a&gt; on your Oracle Cloud Infrastructure account to create a new OKE cluster and install Jenkins X.&lt;/p&gt;

&lt;p&gt;Please add your $HOME/bin to $PATH otherwise jx will have issue invoking OCI CLI command. If you have already installed OCI CLI, please make sure it is in $PATH.&lt;/p&gt;

&lt;p&gt;Now &lt;strong&gt;&lt;a href=&#34;/docs/getting-started/next/&#34;&gt;develop apps faster with Jenkins X&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;using-ibm-cloud-kubernetes-service-iks&#34;&gt;Using IBM Cloud Kubernetes Service (IKS)&lt;/h2&gt;

&lt;p&gt;Use the &lt;a href=&#34;/commands/jx_create_cluster_iks&#34;&gt;jx create cluster iks&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create cluster iks --apikey=&amp;lt;IBM Cloud API Key&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will use &lt;a href=&#34;https://console.bluemix.net/docs/cli/index.html#overview&#34; target=&#34;_blank&#34;&gt;IBM Cloud CLI&lt;/a&gt; on your IBM Cloud Infrastructure account to create a new IKS cluster and install Jenkins X.&lt;/p&gt;

&lt;p&gt;You need to make sure you have the $HOME/.jx/bin folder in your $PATH.&lt;/p&gt;

&lt;p&gt;Now &lt;strong&gt;&lt;a href=&#34;/docs/getting-started/next/&#34;&gt;develop apps faster with Jenkins X&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;using-minikube-local&#34;&gt;Using Minikube (local)&lt;/h2&gt;

&lt;p&gt;Some folks have trouble getting minikube to work for a variety of reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;minikube requires up to date virtualisation software to be installed and your machine&lt;/li&gt;
&lt;li&gt;you may have an old Docker installation or old minikube / kubectl or helm binaries and so forth.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we &lt;strong&gt;highly&lt;/strong&gt; recommend using one of the public clouds above to try out Jenkins X. They all have free tiers so it should not cost you any significant cash and it&amp;rsquo;ll give you a chance to try out the cloud.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;minikube does not produce a public-facing IP so webhooks will not be able to reach the cluster. As a result, only polling for changes works and it might take a long while for pipelines to fire.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you still want to try minikube then we recommend letting jx create the cluster for you (as opposed to installing jx into an existing minikube cluster) by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create cluster minikube
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll be prompted for the amount of memory, cores, and disk size to use, and also the driver.&lt;/p&gt;

&lt;p&gt;A known good configuration on a 2015 model Macbook Pro is to use 8 GB of RAM, 8 cores*, a 150 GB disk size and hyperkit. For installing hyperkit, see the &lt;a href=&#34;https://github.com/kubernetes/minikube/blob/master/docs/drivers.md#hyperkit-driver&#34; target=&#34;_blank&#34;&gt;hyperkit installation documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The disk size is particularly large as a number of images will need to be downloaded. These are used by jx and here are the sizes at the time of this document:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jxpv1                           8Gi        RWO            Recycle          Bound       jx/jenkins-x-nexus                                                               5d
jxpv2                           100Gi      RWO            Recycle          Bound       jx/jenkins-x-docker-registry                                                     6d
jxpv3                           8Gi        RWO            Recycle          Bound       jx/jenkins-x-mongodb                                                             22h
jxpv4                           30Gi       RWO            Recycle          Bound       jx/jenkins                                                                    6d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;ldquo;I get &lt;code&gt;Error creating cluster exit status 1&lt;/code&gt;, or it seems to be hanging - what should I do?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Check to see if &lt;code&gt;minikube status&lt;/code&gt; reports that minikube is actually already running. If it is, do &lt;code&gt;minikube stop&lt;/code&gt; and then repeat the cluster creation process. Removing your &lt;code&gt;~/.minikube&lt;/code&gt; directory is also known to help: you want to make sure you have a clean environment with a working driver installed before attemping to run &lt;code&gt;jx create cluster minikube&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;I get &lt;code&gt;Error: Command failed kubectl create clusterrolebinding add-on-cluster-admin --clusterrole cluster-admin --serviceaccount kube-system:default&lt;/code&gt;, help!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The cluster role binding may exist through your use of Minikube before with RBAC. Delete any existing cluster role binding with the above name (&lt;code&gt;kubectl delete clusterrolebinding add-on-cluster-admin&lt;/code&gt;) and then repeat the &lt;code&gt;jx create cluster minikube&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;If the above proceeds OK, you&amp;rsquo;ll be greeted with &lt;code&gt;Please enter the name you wish to use with git:&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you can specify more cores than you actually have!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now &lt;strong&gt;&lt;a href=&#34;/docs/getting-started/next/&#34;&gt;develop apps faster with Jenkins X&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;using-minishift-local&#34;&gt;Using Minishift (local)&lt;/h2&gt;

&lt;p&gt;If you want to try out Jenkins X on a local OpenShift cluster then you can try using minishift.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;minishift does not produce a public-facing IP so webhooks will not be able to reach the cluster. As a result, only polling for changes works and it might take a long while for pipelines to fire.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To create a minishift VM with Jenkins X installed on it try the &lt;a href=&#34;/commands/jx_create_cluster_minishift&#34;&gt;jx create cluster minishift&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create cluster minishift
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;strong&gt;&lt;a href=&#34;/docs/getting-started/next/&#34;&gt;develop apps faster with Jenkins X&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;If you hit any issues installing Jenkins X then please check out our &lt;a href=&#34;/troubleshooting/faq/&#34;&gt;troubleshooting guide&lt;/a&gt; or &lt;a href=&#34;/community&#34;&gt;let us know&lt;/a&gt; and we&amp;rsquo;ll try our best to help.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
