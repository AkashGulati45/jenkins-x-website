<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X â€“ Amazon</title>
    <link>/docs/getting-started/setup/create-cluster/amazon/</link>
    <description>Recent content in Amazon on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 01 Feb 2017 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/docs/getting-started/setup/create-cluster/amazon/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Create EKS cluster with Terraform</title>
      <link>/docs/getting-started/setup/create-cluster/amazon/terraform/</link>
      <pubDate>Wed, 03 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/setup/create-cluster/amazon/terraform/</guid>
      <description>
        
        
        &lt;p&gt;This is a short guide to setup EKS on AWS and the required resources for Jenkins X&amp;rsquo;s setup of Vault
using Terraform. It assumes access to AWS is configured and familiarity with AWS, kubectl and Terraform.&lt;/p&gt;

&lt;p&gt;This snippet of Terraform code sets EKS and up needed resources on AWS. It outputs the parameters
you then need to add to append to &lt;code&gt;jx install&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tf&#34;&gt;variable &amp;quot;region&amp;quot; {
}

variable &amp;quot;subnets&amp;quot; {
    type = &amp;quot;list&amp;quot;
}

variable &amp;quot;vpc_id&amp;quot; {
}

variable &amp;quot;key_name&amp;quot; {
    description = &amp;quot;SSH key name for worker nodes&amp;quot;
}

variable &amp;quot;bucket_domain&amp;quot; {
    description = &amp;quot;Suffix for S3 bucket used for vault unseal operation&amp;quot;
}

provider &amp;quot;aws&amp;quot; {
    region  = &amp;quot;${var.region}&amp;quot;
}

module &amp;quot;eks&amp;quot; {
    source       = &amp;quot;terraform-aws-modules/eks/aws&amp;quot;
    cluster_name = &amp;quot;${var.region}&amp;quot;
    subnets      = &amp;quot;${var.subnets}&amp;quot;
    vpc_id       = &amp;quot;${var.vpc_id}&amp;quot;
    worker_groups = [
        {
            autoscaling_enabled   = true
            asg_min_size          = 3
            asg_desired_capacity  = 3
            instance_type         = &amp;quot;t3.large&amp;quot;
            asg_max_size          = 20
            key_name              = &amp;quot;${var.key_name}&amp;quot;
        }
    ]
    version = &amp;quot;5.0.0&amp;quot;
}

# Needed for cluster-autoscaler
resource &amp;quot;aws_iam_role_policy_attachment&amp;quot; &amp;quot;workers_AmazonEC2ContainerRegistryPowerUser&amp;quot; {
  policy_arn = &amp;quot;arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser&amp;quot;
  role       = &amp;quot;${module.eks.worker_iam_role_name}&amp;quot;
}

# Create S3 bucket for KMS
resource &amp;quot;aws_s3_bucket&amp;quot; &amp;quot;vault-unseal&amp;quot; {
    bucket = &amp;quot;vault-unseal.${var.region}.${var.bucket_domain}&amp;quot;
    acl    = &amp;quot;private&amp;quot;

    versioning {
        enabled = false
    }
}

# Create KMS key
resource &amp;quot;aws_kms_key&amp;quot; &amp;quot;bank_vault&amp;quot; {
    description = &amp;quot;KMS Key for bank vault unseal&amp;quot;
}

# Create DynamoDB table
resource &amp;quot;aws_dynamodb_table&amp;quot; &amp;quot;vault-data&amp;quot; {
    name           = &amp;quot;vault-data&amp;quot;
    read_capacity  = 2
    write_capacity = 2
    hash_key       = &amp;quot;Path&amp;quot;
    range_key      = &amp;quot;Key&amp;quot;
    attribute {
        name = &amp;quot;Path&amp;quot;
        type = &amp;quot;S&amp;quot;
    }

    attribute {
        name = &amp;quot;Key&amp;quot;
        type = &amp;quot;S&amp;quot;
    }
}

# Create service account for vault. Should the policy
resource &amp;quot;aws_iam_user&amp;quot; &amp;quot;vault&amp;quot; {
  name = &amp;quot;vault_${var.region}&amp;quot;
}

data &amp;quot;aws_iam_policy_document&amp;quot; &amp;quot;vault&amp;quot; {
    statement {
        sid = &amp;quot;DynamoDB&amp;quot;
        effect = &amp;quot;Allow&amp;quot;
        actions = [
            &amp;quot;dynamodb:DescribeLimits&amp;quot;,
            &amp;quot;dynamodb:DescribeTimeToLive&amp;quot;,
            &amp;quot;dynamodb:ListTagsOfResource&amp;quot;,
            &amp;quot;dynamodb:DescribeReservedCapacityOfferings&amp;quot;,
            &amp;quot;dynamodb:DescribeReservedCapacity&amp;quot;,
            &amp;quot;dynamodb:ListTables&amp;quot;,
            &amp;quot;dynamodb:BatchGetItem&amp;quot;,
            &amp;quot;dynamodb:BatchWriteItem&amp;quot;,
            &amp;quot;dynamodb:CreateTable&amp;quot;,
            &amp;quot;dynamodb:DeleteItem&amp;quot;,
            &amp;quot;dynamodb:GetItem&amp;quot;,
            &amp;quot;dynamodb:GetRecords&amp;quot;,
            &amp;quot;dynamodb:PutItem&amp;quot;,
            &amp;quot;dynamodb:Query&amp;quot;,
            &amp;quot;dynamodb:UpdateItem&amp;quot;,
            &amp;quot;dynamodb:Scan&amp;quot;,
            &amp;quot;dynamodb:DescribeTable&amp;quot;
        ]
        resources = [&amp;quot;${aws_dynamodb_table.vault-data.arn}&amp;quot;]
    }
    statement {
        sid = &amp;quot;S3&amp;quot;
        effect = &amp;quot;Allow&amp;quot;
        actions = [
                &amp;quot;s3:PutObject&amp;quot;,
                &amp;quot;s3:GetObject&amp;quot;
        ]
        resources = [&amp;quot;${aws_s3_bucket.vault-unseal.arn}/*&amp;quot;]
    }
    statement {
        sid = &amp;quot;S3List&amp;quot;
        effect = &amp;quot;Allow&amp;quot;
        actions = [
            &amp;quot;s3:ListBucket&amp;quot;
        ]
        resources = [&amp;quot;${aws_s3_bucket.vault-unseal.arn}&amp;quot;]
    }
    statement {
        sid = &amp;quot;KMS&amp;quot;
        effect = &amp;quot;Allow&amp;quot;
        actions = [
            &amp;quot;kms:Encrypt&amp;quot;,
            &amp;quot;kms:Decrypt&amp;quot;,
            &amp;quot;kms:DescribeKey&amp;quot;
        ]
        resources = [&amp;quot;${aws_kms_key.bank_vault.arn}&amp;quot;]
    }
}

resource &amp;quot;aws_iam_user_policy&amp;quot; &amp;quot;vault&amp;quot; {
    name = &amp;quot;vault_${var.region}&amp;quot;
    user = &amp;quot;${aws_iam_user.vault.name}&amp;quot;

    policy = &amp;quot;${data.aws_iam_policy_document.vault.json}&amp;quot;
}

resource &amp;quot;aws_iam_access_key&amp;quot; &amp;quot;vault&amp;quot; {
    user = &amp;quot;${aws_iam_user.vault.name}&amp;quot;
}

# Output KMS key id, S3 bucket name and secret name in the form of jx install options
output &amp;quot;jx_params&amp;quot; {
    value = &amp;quot;--provider=eks --gitops --no-tiller --vault --aws-dynamodb-region=${var.region} --aws-dynamodb-table=${aws_dynamodb_table.vault-data.name} --aws-kms-region=${var.region} --aws-kms-key-id=${aws_kms_key.bank_vault.key_id} --aws-s3-region=${var.region}  --aws-s3-bucket=${aws_s3_bucket.vault-unseal.id} --aws-access-key-id=${aws_iam_access_key.vault.id} --aws-secret-access-key=${aws_iam_access_key.vault.secret}&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save as &lt;code&gt;eks.tf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The module terraform-aws-modules/eks/aws will also store a kubeconfig file as &lt;code&gt;config&lt;/code&gt;. This can be
copied to or merged with your &lt;code&gt;~/.kube/config&lt;/code&gt;. Then &lt;code&gt;jx install&lt;/code&gt; can be run with the parameters
output by the Terraform config above.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
