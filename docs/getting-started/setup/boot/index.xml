<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X â€“ Run Boot</title>
    <link>/docs/getting-started/setup/boot/</link>
    <description>Recent content in Run Boot on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/getting-started/setup/boot/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Cloud Providers</title>
      <link>/docs/getting-started/setup/boot/clouds/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/setup/boot/clouds/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X is designed to work on any kubernetes cluster; whether on premise, hybrid or public clouds.&lt;/p&gt;
&lt;p&gt;However if you try doing any significant work with Kubernetes particularly with things like storage, networking, ingress, TLS, certificates, DNS, secrets - you will find that things can be different on different cloud providers.&lt;/p&gt;
&lt;p&gt;This section of the documentation will try guide you through the best way to use Jenkins X on different cloud providers.&lt;/p&gt;
&lt;h2 id=&#34;cloud-provider-support-maturity&#34;&gt;Cloud Provider Support Maturity&lt;/h2&gt;
&lt;p&gt;The following table lists the maturity of Jenkins X with boot on the different cloud providers.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Cloud Provider&lt;/th&gt;
&lt;th&gt;Maturity&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;google/&#34;&gt;Google Cloud&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;GA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;amazon/&#34;&gt;AWS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;GA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Azure&lt;/td&gt;
&lt;td&gt;Beta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;on-premise/&#34;&gt;On Premise&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Beta (*) note that on premise clusters differ wildly in capabilities and configuration&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;terminology&#34;&gt;Terminology&lt;/h3&gt;
&lt;p&gt;In the above we are using the following terms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GA&lt;/code&gt; means generally available. We know this works and have automated testing to verify it works.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Beta&lt;/code&gt; its available and we have seen it work but we don&amp;rsquo;t have any automated tests. If you would like to help provide automated testing on this platform then please &lt;a href=&#34;/community/&#34;&gt;join our community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alpha&lt;/code&gt; its experimental and please help us improve it&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Background</title>
      <link>/docs/getting-started/setup/boot/background/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/setup/boot/background/</guid>
      <description>
        
        
        &lt;p&gt;We&amp;rsquo;ve learnt over the last 1-2 years that there are many different kinds of Kubernetes cluster and ways of setting up things like Ingress, DNS, domains, certificates which leads to complexity in the current &lt;a href=&#34;/commands/jx_create_cluster/&#34;&gt;jx create cluster&lt;/a&gt; and &lt;a href=&#34;/commands/deprecation/&#34;&gt;jx install&lt;/a&gt; commands.&lt;/p&gt;
&lt;p&gt;Plus its now recommended to use tools like Terraform to manage all of your cloud resources: creating/updating Kubernetes clusters, cloud storage buckets, service accounts, KMS etc.&lt;/p&gt;
&lt;p&gt;We found we had lots of different bits of install logic spread across all kinds of different ways of installing (e.g. &lt;a href=&#34;/commands/jx_create_cluster/&#34;&gt;jx create cluster&lt;/a&gt;, &lt;a href=&#34;/commands/deprecation/&#34;&gt;jx install&lt;/a&gt;, the use of the &lt;a href=&#34;/docs/guides/managing-jx/common-tasks/manage-via-gitops/&#34;&gt;&amp;ndash;gitops flag&lt;/a&gt; together with the different ways of managing production secrets - that were hard to test and keep solid.&lt;/p&gt;
&lt;p&gt;We also hit issues that the &lt;a href=&#34;/commands/jx_create_cluster/&#34;&gt;jx create cluster&lt;/a&gt; and &lt;a href=&#34;/commands/deprecation/&#34;&gt;jx install&lt;/a&gt; commands would install things like ingress controller and not give users the chance to configure/override their installation.&lt;/p&gt;
&lt;p&gt;Users often struggled with understanding how to easily configure and override things; or upgrade values after things have been installed.&lt;/p&gt;
&lt;p&gt;So we wanted to come up with a new cleaner approach which worked for every kind of installation and provided a standard way to extend and customise the configuration via &lt;a href=&#34;/about/concepts/jenkins-x-pipelines/&#34;&gt;Jenkins X Pipelines&lt;/a&gt; and Helm style configuration.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: How it works</title>
      <link>/docs/getting-started/setup/boot/how-it-works/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/setup/boot/how-it-works/</guid>
      <description>
        
        
        &lt;h2 id=&#34;source-repositories&#34;&gt;Source Repositories&lt;/h2&gt;
&lt;p&gt;Boot automatically sets up any source repositories which exist in the &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/tree/master/repositories/templates&#34;&gt;repositories/templates&lt;/a&gt; folder as &lt;a href=&#34;/docs/reference/components/custom-resources/#sourcerepository&#34;&gt;SourceRepository&lt;/a&gt;  custom resources and uses any associated &lt;a href=&#34;/docs/reference/components/custom-resources/#scheduler&#34;&gt;Scheduler&lt;/a&gt; custom resources to regenerate the Prow configuration.&lt;/p&gt;
&lt;p&gt;Boot also automatically creates or updates any required webhooks on the git provider for your &lt;a href=&#34;/docs/reference/components/custom-resources/#sourcerepository&#34;&gt;SourceRepository&lt;/a&gt; resources.&lt;/p&gt;
&lt;p&gt;If you are using GitOps we hope to automate the population of the &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/tree/master/repositories/templates&#34;&gt;repositories/templates&lt;/a&gt; folder as you import/create projects. Until then you can manually create a Pull Request on your boot git repository via &lt;a href=&#34;/commands/jx_step_create_pullrequest_repositories/&#34;&gt;jx step create pullrequest repositories&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;pipeline&#34;&gt;Pipeline&lt;/h2&gt;
&lt;p&gt;The install/upgrade process is defined in a &lt;a href=&#34;/about/concepts/jenkins-x-pipelines/&#34;&gt;Jenkins X Pipeline&lt;/a&gt; in a file called &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jenkins-x.yml&#34;&gt;jenkins-x.yml&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Typically you won&amp;rsquo;t need to edit this file; though if you do see the &lt;a href=&#34;/about/concepts/jenkins-x-pipelines/#customizing-the-pipelines&#34;&gt;editing guide&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The boot process is configured using helm style configuration in &lt;code&gt;values.yaml&lt;/code&gt; files. Though we support a few &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/4328&#34;&gt;extensions to helm&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;parameters-file&#34;&gt;Parameters file&lt;/h3&gt;
&lt;p&gt;We define a &lt;a href=&#34;https://github.com/jenkins-x/environment-tekton-weasel-dev/blob/master/env/parameters.yaml&#34;&gt;env/parameters.yaml&lt;/a&gt; file which defines all the parameters either checked in or loaded from Vault or a local file system secrets location.&lt;/p&gt;
&lt;h4 id=&#34;injecting-secrets-into-the-parameters&#34;&gt;Injecting secrets into the parameters&lt;/h4&gt;
&lt;p&gt;If you look at the current &lt;a href=&#34;https://github.com/jenkins-x/environment-tekton-weasel-dev/blob/master/env/parameters.yaml&#34;&gt;env/parameters.yaml&lt;/a&gt; file you will see some values inlined and others use URIs of the form &lt;code&gt;local:my-cluster-folder/nameofSecret/key&lt;/code&gt;. This currently supports 2 schemes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vault:&lt;/code&gt; to load from a path + key from Vault&lt;/li&gt;
&lt;li&gt;&lt;code&gt;local:&lt;/code&gt; to load from a key in a YAML file at &lt;code&gt;~/.jx/localSecrets/$path.yml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means we can populate all the Parameters we need on startup then refer to them from &lt;code&gt;values.tmpl.yaml&lt;/code&gt; to populate the tree of values to then inject those into Vault.&lt;/p&gt;
&lt;h3 id=&#34;populating-the-parametersyaml-file&#34;&gt;Populating the &lt;code&gt;parameters.yaml&lt;/code&gt; file&lt;/h3&gt;
&lt;p&gt;We can then use the new step to populate the &lt;code&gt;parameters.yaml&lt;/code&gt; file in the Pipeline via this command in the &lt;code&gt;env&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;jx step create values --name parameters
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This uses the &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/env/parameters.tmpl.schema.json&#34;&gt;parameters.tmpl.schema.json&lt;/a&gt; file which powers the UI.&lt;/p&gt;
&lt;h3 id=&#34;improvements-to-valuesyaml&#34;&gt;Improvements to values.yaml&lt;/h3&gt;
&lt;h4 id=&#34;support-a-tree-of-valuesyaml-files&#34;&gt;Support a tree of values.yaml files&lt;/h4&gt;
&lt;p&gt;Rather than a huge huge deeply nested values.yaml file we can have a tree of files for each App only include the App specific configuration in each folder. e.g.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;env/
  values.yaml   &lt;span style=&#34;color:#75715e&#34;&gt;# top level configuration&lt;/span&gt;
  prow/
    values.yaml &lt;span style=&#34;color:#75715e&#34;&gt;#Â prow specific config&lt;/span&gt;
  tekton/
    values.yaml  &lt;span style=&#34;color:#75715e&#34;&gt;# tekton specific config&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;then you can omit the &lt;code&gt;prow:&lt;/code&gt; indentation in the &lt;code&gt;env/prow/values.yaml&lt;/code&gt; file to make the YAML you create/edit smaller and simpler. It also means longer term we can generate JSON schema files for each &lt;code&gt;env/$app/values.yaml&lt;/code&gt; files so that we can support better editor/IDE integration&lt;/p&gt;
&lt;h4 id=&#34;valuestmplyaml-templates&#34;&gt;values.tmpl.yaml templates&lt;/h4&gt;
&lt;p&gt;When using &lt;code&gt;jx step helm apply&lt;/code&gt; we now allow &lt;code&gt;values.tmpl.yaml&lt;/code&gt; files to use go/helm templates just like &lt;code&gt;templates/foo.yaml&lt;/code&gt; files support inside helm charts so that we can generate value/secret strings which can use templating to compose things from smaller secret values. e.g. creating a maven &lt;code&gt;settings.xml&lt;/code&gt; file or docker &lt;code&gt;config.json&lt;/code&gt; which includes many user/passwords for different registries.&lt;/p&gt;
&lt;p&gt;We can then check in the &lt;code&gt;values.tmpl.yaml&lt;/code&gt; file which does all of this composition and reference the actual secret values via URLs (or template functions) to access vault or local vault files&lt;/p&gt;
&lt;p&gt;To do this we use expressions like: &lt;code&gt;{{ .Parameter.pipelineUser.token }}&lt;/code&gt; somewhere in the &lt;code&gt;values.tmpl.yaml&lt;/code&gt; values file. So this is like injecting values into the helm templates; but it happens up front to help generate the &lt;code&gt;values.yaml&lt;/code&gt; files.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
