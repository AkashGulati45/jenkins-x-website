<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X â€“ Getting Started</title>
    <link>/docs/getting-started/</link>
    <description>Recent content in Getting Started on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/getting-started/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Setup Jenkins X</title>
      <link>/docs/getting-started/setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/setup/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: Create your first project</title>
      <link>/docs/getting-started/first-project/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/first-project/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: Build, test and preview an app</title>
      <link>/docs/getting-started/build-test-preview/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/build-test-preview/</guid>
      <description>
        
        
        

&lt;p&gt;Jenkins X developer environments should be familiar to anyone who has
developed in a Git environment, with added features that further
automates development processes, builds, and promotion.&lt;/p&gt;

&lt;h1 id=&#34;the-traditional-development-environment&#34;&gt;The traditional development environment&lt;/h1&gt;

&lt;p&gt;A common workflow in a Git development involves:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Forking - The developer creates a fork of the project repository into their personal repo.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Branching - The developer creates a branch of their fork, for various reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Creating a new feature&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fixing a bug&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Applying a security patch for a vulnerability&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Committing - The developer commits the code and pushes it to their branch, creating a &lt;code&gt;diff&lt;/code&gt; file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Creating a pull request - The developer creates a pull request (PR) from their branch back to the main repository&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Testing - A developer peer or quality assurance (QA) team member looks at the code and/or builds a test version for validating the feature or fix, finding bugs and suggesting changes if necessary.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Merging - The PR code, if accepted, is merged into the master or main project repo.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;jenkins-x-and-the-developer-process&#34;&gt;Jenkins X and the developer process&lt;/h1&gt;

&lt;p&gt;Development with Jenkins X is similar to the traditional Git development
workflow, with the added benefits of continuous development via automation within a Git context, also known as &lt;em&gt;GitOps&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Jenkins X goes one step further by offering a &lt;em&gt;preview environment&lt;/em&gt; that allows developer peers and QA testers to validate new features and fixes using an evaluation build of the functionality within the Git PR.&lt;/p&gt;

&lt;h2 id=&#34;generating-a-preview-environment&#34;&gt;Generating a preview environment&lt;/h2&gt;

&lt;p&gt;In a typical Jenkins X development scenario, users make changes to an
application that has been imported or created via one of the various
supported methods, such as
&lt;a href=&#34;/docs/getting-started/first-project/create-quickstart/&#34;&gt;Quickstarts&lt;/a&gt;, &lt;a href=&#34;/docs/using-jx/creating/import/&#34;&gt;imported projects&lt;/a&gt;, and &lt;a href=&#34;/docs/using-jx/creating/create-spring/&#34;&gt;Spring
Boot&lt;/a&gt; applications.&lt;/p&gt;

&lt;p&gt;When the developer makes the change to their branch, with the ultimate
goal of merging those branch changes into the &lt;code&gt;master&lt;/code&gt; branch for
deployment to production, they save their changes from within their
integrated development environment (IDE) and commit it to the source
repository, such as GitHub. The process to generate a preview
environment is typically like committing code in a traditional
development environment:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A developer makes a branch to their local cloned source repository to create a new feature:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git branch acme-feature1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The developer makes changes to the source code in their branch and adds the affected files to the commit queue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git add index.html server.js
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The developer commits the files adding a comment about what has changed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git commit -m &amp;quot;nifty new image added to the index file&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The developer runs &lt;code&gt;git push&lt;/code&gt; to send the code back to the remote  repository and create a pull request:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git push origin acme-feature1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The program displays a link to a pull request. The developer can highlight the URL, right-click and choose &lt;em&gt;Open URL&lt;/em&gt; to see the GitHub page in their browser.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Jenkins X creates a preview environment in the PR for the application changes and displays a link to evaluate the new feature:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;/images/pr-comment.png&#34; class=&#34;img-thumbnail&#34;&gt;&lt;/p&gt;

&lt;p&gt;The preview environment is created whenever a change is made to the
repository, allowing any relevant user to validate or evaluate features,
bugfixes, or security hotfix.&lt;/p&gt;

&lt;h2 id=&#34;testing-the-preview-environment&#34;&gt;Testing the preview environment&lt;/h2&gt;

&lt;p&gt;The development bot created during the installation process sends a notification email to the developer as well as the designated repository approver that a PR is ready for review. During the approval process, the approver can click on the preview application with the code changes for testing and validation.&lt;/p&gt;

&lt;p&gt;When the approver confirms the code and functionality changes, they can
approve the with a simple comment that merges the code changes back to
the master branch and initiate a production build with the new feature:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    /approve
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code is merged to the &lt;code&gt;master&lt;/code&gt; branch, and the release is pushed to
staging/production or a release created and available from the GitHub
staging environment in the &lt;code&gt;Releases&lt;/code&gt; tab.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Promotion and Environments</title>
      <link>/docs/getting-started/promotion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/promotion/</guid>
      <description>
        
        
        

&lt;p&gt;The CD Pipelines of Jenkins X automate the &lt;a href=&#34;/docs/concepts/features/#promotion&#34;&gt;promotion&lt;/a&gt; of version changes through each &lt;a href=&#34;/docs/concepts/features/#environments&#34;&gt;Environment&lt;/a&gt; which is configured with a &lt;em&gt;promotion strategy&lt;/em&gt; property of &lt;code&gt;Auto&lt;/code&gt;. By default the &lt;code&gt;Staging&lt;/code&gt; environment uses automatic promotion and the &lt;code&gt;Production&lt;/code&gt; environment uses &lt;code&gt;Manual&lt;/code&gt; promotion.&lt;/p&gt;

&lt;p&gt;To manually Promote a version of your application to an environment use the &lt;a href=&#34;/commands/jx_promote/&#34;&gt;jx promote&lt;/a&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx promote --app myapp --version 1.2.3 --env production
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The command waits for the promotion to complete, logging details of its progress. You can specify the timeout to wait for the promotion to complete via the &lt;code&gt;--timeout&lt;/code&gt; argument.&lt;/p&gt;

&lt;p&gt;e.g. to wait for 5 hours&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx promote  --app myapp --version 1.2.3 --env production --timeout 5h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use terms like &lt;code&gt;20m&lt;/code&gt; or &lt;code&gt;10h30m&lt;/code&gt; for the various duration expressions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/overview.png&#34; class=&#34;img-thumbnail&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;feedback&#34;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;If the commit comments reference issues (e.g. via the text &lt;code&gt;fixes #123&lt;/code&gt;) then Jenkins X pipelines will generate release notes like those of &lt;a href=&#34;https://github.com/jenkins-x/jx/releases&#34; target=&#34;_blank&#34;&gt;the jx releases&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also as the version with those new commits is promoted to &lt;code&gt;Staging&lt;/code&gt; or &lt;code&gt;Production&lt;/code&gt; you will get automated comments on each fixed issue that the issue is now available for review in the corresponding environment along with a link to the release notes and a link to the app running in that environment. e.g.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/issue-comment.png&#34; class=&#34;img-thumbnail&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;promoting-external-apps&#34;&gt;Promoting external apps&lt;/h2&gt;

&lt;p&gt;There may be apps that have already been released by other teams or companies who maybe don&amp;rsquo;t yet use Jenkins X and the applications are not already in your helm chart repository.&lt;/p&gt;

&lt;p&gt;If you wish to search your helm repositories for an application to promote you can use the &lt;code&gt;-f&lt;/code&gt; for filter option to find a chart to promote.&lt;/p&gt;

&lt;p&gt;e.g. to find a &lt;code&gt;redis&lt;/code&gt; chart to promote to staging you could do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx promote -f redis --env staging
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For databases you may want to alias (via &lt;code&gt;--alias&lt;/code&gt;) the name of the chart to be a logical name for the kind of database you need. As you may need multiple databases in the same environment for different microservices. e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx promote -f postgres --alias salesdb --env staging
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you cannot find the particular application you are looking for you may need to add a helm chart repository to your helm installation via:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;helm repo add myrepo https://something.acme.com/charts/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for example to add the stable community charts:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;helm repo add stable https://kubernetes-charts.storage.googleapis.com/
&amp;quot;stable&amp;quot; has been added to your repositories
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to add the incubator community charts:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;helm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com/
&amp;quot;incubator&amp;quot; has been added to your repositories
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are huge numbers of &lt;a href=&#34;https://github.com/helm/charts/tree/master/stable&#34; target=&#34;_blank&#34;&gt;charts already created and maintained by the community&lt;/a&gt; these days. If you want to add your own apps developed outside of Jenkins X you just need to package the YAML as a helm chart and install it in a chart repository.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Demos, talks and blog posts</title>
      <link>/docs/getting-started/demos-talks-posts/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/demos-talks-posts/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: What&#39;s next?</title>
      <link>/docs/getting-started/next/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/next/</guid>
      <description>
        
        
        &lt;p&gt;OK so you have &lt;a href=&#34;/getting-started/install/&#34;&gt;got the jx CLI&lt;/a&gt; and you either&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/getting-started/create-cluster/&#34;&gt;created a Kubernetes cluster with Jenkins X&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/getting-started/install-on-cluster/&#34;&gt;installed Jenkins X on an existing kubernetes cluster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So whats next?&lt;/p&gt;

&lt;p&gt;Well the &lt;a href=&#34;/docs/using-jx/&#34;&gt;Using Jenkins X&lt;/a&gt; section contains the next steps you may want to try out, such as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/docs/using-jx/common-tasks/create-spring/&#34;&gt;create a new Spring Boot application and import it into Jenkins X&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/docs/getting-started/first-project/create-quickstart/&#34;&gt;create a new quickstart and import it into Jenkins X&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/docs/using-jx/creating/import/&#34;&gt;import existing source code into Jenkins X&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/docs/using-jx/developing/browsing/&#34;&gt;browsing&lt;/a&gt; for browsing pipelines, builds, apps and activity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may also want to check out the &lt;a href=&#34;/demos/&#34;&gt;various demonstrations of what you can do with Jenkins X&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
