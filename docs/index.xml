<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X – Documentation</title>
    <link>/docs/</link>
    <description>Recent content in Documentation on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: What&#39;s next?</title>
      <link>/docs/getting-started/next/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/next/</guid>
      <description>
        
        
        &lt;p&gt;OK so you have &lt;a href=&#34;/getting-started/install/&#34;&gt;got the jx CLI&lt;/a&gt; and you either&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/getting-started/create-cluster/&#34;&gt;created a Kubernetes cluster with Jenkins X&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/getting-started/install-on-cluster/&#34;&gt;installed Jenkins X on an existing kubernetes cluster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So whats next?&lt;/p&gt;

&lt;p&gt;Well the &lt;a href=&#34;/docs/using-jx/&#34;&gt;Using Jenkins X&lt;/a&gt; section contains the next steps you may want to try out, such as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/docs/using-jx/common-tasks/create-spring/&#34;&gt;create a new Spring Boot application and import it into Jenkins X&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/docs/getting-started/first-project/create-quickstart/&#34;&gt;create a new quickstart and import it into Jenkins X&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/docs/using-jx/common-tasks/import/&#34;&gt;import existing source code into Jenkins X&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/docs/using-jx/common-tasks/browsing/&#34;&gt;browsing&lt;/a&gt; for browsing pipelines, builds, apps and activity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may also want to check out the &lt;a href=&#34;/demos/&#34;&gt;various demonstrations of what you can do with Jenkins X&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Jenkins X Pipeline Syntax Reference</title>
      <link>/docs/reference/pipeline-syntax-reference/</link>
      <pubDate>Thu, 20 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/docs/reference/pipeline-syntax-reference/</guid>
      <description>
        
        
        

&lt;h1 id=&#34;syntax-for-jenkins-x-yml-and-build-packs&#34;&gt;Syntax for &lt;code&gt;jenkins-x.yml&lt;/code&gt; and build packs&lt;/h1&gt;

&lt;h2 id=&#34;where-to-define-your-pipelines&#34;&gt;Where to Define Your Pipelines&lt;/h2&gt;

&lt;p&gt;Pipelines can either be defined in &lt;a href=&#34;build-packs.md&#34; target=&#34;_blank&#34;&gt;build packs&lt;/a&gt;, used for
multiple projects, or in the &lt;code&gt;jenkins-x.yml&lt;/code&gt; file in a project&amp;rsquo;s repository.
When defining pipelines in a build pack, the top-level configuration below is
used directly, while in &lt;code&gt;jenkins-x.yml&lt;/code&gt;, the top-level configuration is under
the &lt;code&gt;pipelineConfig&lt;/code&gt; key.&lt;/p&gt;

&lt;h2 id=&#34;top-level-configuration&#34;&gt;Top-Level Configuration&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;extends&#39;&gt;&lt;code&gt;extends&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - A build pack can extend another build pack,
inheriting its configuration and contributing its own additional behavior.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;file&lt;/code&gt;&lt;/strong&gt; - The name of the build pack to inherit from.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;import&lt;/code&gt;&lt;/strong&gt; - If the build pack to inherit from is not in the same
repository as this build pack, specify where to import it from.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#agent&#34;&gt;&lt;code&gt;agent&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - A default agent configuration for all pipelines in the
build pack or project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#env&#34;&gt;&lt;code&gt;env&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Environment variables to be made available for all
pipelines in the build pack or project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#containerOptions&#34;&gt;&lt;code&gt;containerOptions&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Default configuration for step
containers for all pipelines in the build pack or project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;pipelines&#39;&gt;&lt;code&gt;pipelines&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - The pipeline definitions for this
build pack or project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;specifying-and-overriding-release-pull-request-and-feature-pipelines&#34;&gt;Specifying and Overriding Release, Pull Request, and Feature Pipelines&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;pullRequest-release-feature&#39;&gt;&lt;code&gt;pullRequest&lt;/code&gt;, &lt;code&gt;release&lt;/code&gt;, &lt;code&gt;feature&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; -
The configuration for the three pipeline types for this build pack or project.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#build-pack-stages&#34;&gt;&lt;code&gt;setup&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - The first stage to run.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#build-pack-stages&#34;&gt;&lt;code&gt;setVersion&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - The second stage to run.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#build-pack-stages&#34;&gt;&lt;code&gt;preBuild&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - The third stage to run.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#build-pack-stages&#34;&gt;&lt;code&gt;build&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - The fourth stage to run.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#build-pack-stages&#34;&gt;&lt;code&gt;postBuild&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - The fifth and final stage to run.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#defining-an-individual-pipeline&#34;&gt;&lt;code&gt;pipeline&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - The full definition
of the pipeline. Mutually exclusive with &lt;code&gt;setup&lt;/code&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;overrides&#39;&gt;&lt;code&gt;overrides&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - A list of overriding changes to make
to the inherited or default pipeline.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;pipeline&lt;/code&gt;&lt;/strong&gt; - The name of the pipeline this override should be applied
to (&lt;code&gt;release&lt;/code&gt;, &lt;code&gt;pullRequest&lt;/code&gt;, or &lt;code&gt;feature&lt;/code&gt;). If unspecified, this override
will be applied to all pipelines.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;stage&lt;/code&gt;&lt;/strong&gt; - The name of the stage this override should be applied to.
If unspecified, this override will be applied to all stages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;name&lt;/code&gt;&lt;/strong&gt; - The name of the step this override should be applied to. If
unspecified, this override will be applied to all steps.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;step&lt;/code&gt;&lt;/strong&gt; - A single &lt;a href=&#34;#configuration-for-steps&#34;&gt;step&lt;/a&gt; which will be used
to override the named step or, if no step name is given, all steps in the
specified stage. If neither &lt;code&gt;step&lt;/code&gt; nor &lt;code&gt;steps&lt;/code&gt; is given, all steps in
matching stages in matching pipelines will be removed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;steps&lt;/code&gt;&lt;/strong&gt; - One or more &lt;a href=&#34;#configuration-for-steps&#34;&gt;steps&lt;/a&gt; which will be
used to override the named step or, if no name is given, all steps in the
specified stage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;type&lt;/code&gt;&lt;/strong&gt; - Whether the &lt;code&gt;step&lt;/code&gt; or &lt;code&gt;steps&lt;/code&gt; should replace the named step,
be prepended before the named step, or be appended after the named step.
Possible values are &lt;code&gt;replace&lt;/code&gt;, &lt;code&gt;before&lt;/code&gt;, or &lt;code&gt;after&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#agent&#34;&gt;&lt;code&gt;agent&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - An agent definition that will replace the
existing agent definition for matching pipelines and stages. Step agents
are not changed.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;default&#39;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - A full &lt;a href=&#34;#defining-an-individual-pipeline&#34;&gt;pipeline definition&lt;/a&gt;
that will be used for the &lt;code&gt;pullRequest&lt;/code&gt;, &lt;code&gt;release&lt;/code&gt;, and &lt;code&gt;feature&lt;/code&gt; pipelines if
they are not already specified.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;build-pack-stages&#34;&gt;Build pack stages&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#configuration-for-steps&#34;&gt;&lt;code&gt;preSteps&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - A list of steps to run before
the main body of steps for this stage. &lt;code&gt;preSteps&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; inherited from parent
build packs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#configuration-for-steps&#34;&gt;&lt;code&gt;steps&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - The main body of steps to run for
this stage. If inheriting from a parent build pack, these steps will be appended
to the parent build pack&amp;rsquo;s &lt;code&gt;steps&lt;/code&gt; by default.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;replace&lt;/code&gt;&lt;/strong&gt; - An optional boolean. If true, the inherited stage definition&amp;rsquo;s
&lt;code&gt;steps&lt;/code&gt; will be replaced, rather than appended to.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;defining-an-individual-pipeline&#34;&gt;Defining an Individual Pipeline&lt;/h2&gt;

&lt;h3 id=&#34;configuration-for-the-whole-pipeline&#34;&gt;Configuration for the Whole Pipeline&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#agent&#34;&gt;&lt;code&gt;agent&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - A default agent definition to use for any
&lt;a href=&#34;#configuration-for-stages&#34;&gt;stages&lt;/a&gt; without their own agents specified.
Overrides &lt;a href=&#34;#top-level-configuration&#34;&gt;build pack or project&lt;/a&gt; agent definition.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#env&#34;&gt;&lt;code&gt;env&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Environment variables set for the entire pipeline, which
can be overridden in individual stages and steps.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;options&#39;&gt;&lt;code&gt;options&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Additional configuration for the entire
pipeline.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;timeout&#39;&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - The maximum duration for execution
of the pipeline, after which the build will be terminated.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;time&lt;/code&gt;&lt;/strong&gt; - How long to wait until timing out the build.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;unit&lt;/code&gt;&lt;/strong&gt; - The unit for &lt;code&gt;time&lt;/code&gt;. Can be any of &lt;code&gt;seconds&lt;/code&gt;, &lt;code&gt;minutes&lt;/code&gt;,
or &lt;code&gt;hours&lt;/code&gt;. Defaults to &lt;code&gt;seconds&lt;/code&gt; if unspecified.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#containerOptions&#34;&gt;&lt;code&gt;containerOptions&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Default configuration for
step containers within this pipeline, overriding any common settings with
&lt;a href=&#34;#top-level-configuration&#34;&gt;build pack or project&lt;/a&gt; default configuration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;volumes&lt;/code&gt;&lt;/strong&gt; - One or more &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/volumes/&#34; target=&#34;_blank&#34;&gt;Kubernetes volumes&lt;/a&gt;
which will be added to every stage in the pipeline, and can be mounted via
&lt;code&gt;containerOptions&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;dir&#39;&gt;&lt;code&gt;dir&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Optional default working directory for stages and
steps in this pipeline. Can either be relative, under the &lt;code&gt;/workspace/source&lt;/code&gt;
directory were the project source will be checked out, or absolute.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;stages&#39;&gt;&lt;code&gt;stages&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - A list of one or more &lt;a href=&#34;#configuration-for-stages&#34;&gt;stages&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;configuration-for-stages&#34;&gt;Configuration for Stages&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;name&#39;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - The name of the stage. Required and must be
unique.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#agent&#34;&gt;&lt;code&gt;agent&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - The agent definition to use for this stage,
overriding the agent specified for &lt;a href=&#34;#configuration-for-the-whole-pipeline&#34;&gt;the whole pipeline&lt;/a&gt;
if one is specified.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;options&#39;&gt;&lt;code&gt;options&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Additional configuration for the stage.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#containerOptions&#34;&gt;&lt;code&gt;containerOptions&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Default configuration for
step containers within this stage, overriding any common settings with
&lt;a href=&#34;#configuration-for-the-whole-pipeline&#34;&gt;the whole pipeline&lt;/a&gt; default
configuration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;volumes&lt;/code&gt;&lt;/strong&gt; - One or more &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/volumes/&#34; target=&#34;_blank&#34;&gt;Kubernetes volumes&lt;/a&gt;
which will be added to this stage&amp;rsquo;s pod, and can be mounted via &lt;code&gt;containerOptions&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#env&#34;&gt;&lt;code&gt;env&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Environment variables set for all steps or nested stages,
overriding any variables defined for &lt;a href=&#34;#configuration-for-the-whole-pipeline&#34;&gt;the whole pipeline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;nestedstages&#39;&gt;&lt;code&gt;stages&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - A list of stages to run sequentially
within this stage, inheriting this stage&amp;rsquo;s configuration. Cannot be used with
either &lt;code&gt;steps&lt;/code&gt; or &lt;code&gt;parallel&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;parallel&#39;&gt;&lt;code&gt;parallel&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - A list of stages to run in parallel,
inheriting this stage&amp;rsquo;s configuration. Cannot be used with either &lt;code&gt;steps&lt;/code&gt; or
&lt;code&gt;stages&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;dir&#39;&gt;&lt;code&gt;dir&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Optional default working directory for steps and
nested stages. Can either be relative under the &lt;code&gt;/workspace/source&lt;/code&gt; directory or
absolute.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#steps&#34;&gt;&lt;code&gt;steps&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - A list of steps to run in this stage. Cannot be used
with either &lt;code&gt;stages&lt;/code&gt; or &lt;code&gt;parallel&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;configuration-for-steps&#34;&gt;Configuration for Steps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;name&#39;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - A name for the step, used in logging and for
overrides.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;command&#39;&gt;&lt;code&gt;command&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - The command to execute in this step.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;args&#39;&gt;&lt;code&gt;args&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - An array of arguments to the command.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;dir&#39;&gt;&lt;code&gt;dir&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Optional working directory for this step.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#agent&#34;&gt;&lt;code&gt;agent&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Optional agent configuration for this step.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;loop&#39;&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Repeats the nested &lt;a href=&#34;#configuration-for-steps&#34;&gt;&lt;code&gt;steps&lt;/code&gt;&lt;/a&gt;
for each value in the specified list.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;variable&lt;/code&gt;&lt;/strong&gt; - The name of the environment variable to be set with the
value for this loop iteration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;values&lt;/code&gt;&lt;/strong&gt; - A list of strings to iterate over.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#configuration-for-steps&#34;&gt;&lt;code&gt;steps&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - One or more steps to run for
each iteration of the loop.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#env&#34;&gt;&lt;code&gt;env&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - Environment variables set for this step, adding to
inherited environment variables from the stage and pipeline.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;common-directives&#34;&gt;Common Directives&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;agent&#39;&gt;&lt;code&gt;agent&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - What container image should be used.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;image&lt;/code&gt;&lt;/strong&gt; - A container image, either as a fully qualified image or a
&lt;a href=&#34;pod-templates.md&#34; target=&#34;_blank&#34;&gt;pod template name&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;label&lt;/code&gt;&lt;/strong&gt; - Only used with static Jenkins masters - the Jenkins agent
label to use.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;env&#39;&gt;&lt;code&gt;env&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - One or more environment variables.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;name&lt;/code&gt;&lt;/strong&gt; - The name of the environment variable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;/strong&gt; - The value of the environment variable.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a id=&#39;containerOptions&#39;&gt;&lt;code&gt;containerOptions&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;See &lt;a href=&#34;https://kubernetes.io/docs/concepts/containers&#34; target=&#34;_blank&#34;&gt;Kubernetes container configuration&lt;/a&gt;.
&lt;code&gt;name&lt;/code&gt;, &lt;code&gt;command&lt;/code&gt;, &lt;code&gt;args&lt;/code&gt;, &lt;code&gt;image&lt;/code&gt;, and &lt;code&gt;workingDir&lt;/code&gt; cannot be specified.&lt;/li&gt;
&lt;li&gt;Common use cases for &lt;code&gt;containerOptions&lt;/code&gt; include resource requests and
limits, and volume mounts.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;examples&#34;&gt;Examples&lt;/h1&gt;

&lt;h2 id=&#34;full-pipeline-definition-in-jenkins-x-yml&#34;&gt;Full pipeline definition in &lt;code&gt;jenkins-x.yml&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# If a build pack is specified, the `pipeline` in `release`, `pullRequest`, and `feature` will be ignored.
buildPack: none

pipelineConfig:
  pipelines:
    release:
    # While the legacy build pack built-in stages can be used in jenkins-x.yaml, pipeline is preferred.
      pipeline:
        # Define a default container image we&#39;ll use throughout the pipeline, unless an explicit agent is
        # specified on a stage or step.
        agent:
          image: &amp;quot;some/image@version&amp;quot; # or &amp;quot;maven&amp;quot; - this means &amp;quot;use the maven pod template&amp;quot;
        # Environment variables are either static key/value pairs or Kubernetes valueFrom EnvVarSources.
        # See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.14/#envvarsource-v1-core
        # for more information on valueFrom.
        # Environment variables defined at the top level can be overridden in stages and individual
        # steps.
        environment:
          - name: SOME_VAR
            value: A value for the env var
          - name: SOME_OTHER_VAR
            value: Another var
          - name: SOME_API_KEY
            valueFrom:
              secretKeyRef:
                name: mysecret
                key: apikey
        # Options contains other configuration for the pipeline.
        options:
          # containerOptions allows specifying more advanced default configuration for the containers
          # used for all stages and steps in this scope, using the standard Kubernetes syntax for
          # containers.
          # See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.14/#container-v1-core.
          # Not all fields can be configured - e.g., name, command, arguments, image, and dir are all
          # defined via the syntax - but everything else can be.
          # Like with environment variables, containerOptions at the top level can be overridden and
          # added to by stages.
          containerOptions:
            # Here we&#39;re setting the resource requests and limits for all step containers within this
            # pipeline.
            resources:
              requests:
                cpu: 0.1
                memory: 64Mi
              limits:
                cpu: 0.2
                memory: 128Mi
          # timeout allows you to set the maximum duration for builds of this pipeline.
          timeout:
            time: 15
            unit: minutes
        # A pipeline must contain at least one stage, and each stage must have a unique name.
        stages:
          - name: Stage With Steps And Options Etc
            # agent, options, and environment are valid on stages as well. For the parents of nested
            # sequential or parallel stages, their children inherit the parent&#39;s agent, options,
            # and environment.
            # options on a stage currently only can contain containerOptions.
            options:
              containerOptions:
                resources:
                  limits:
                    cpu: 0.4
                    memory: 256Mi
            # A stage must contain at least one of &amp;quot;steps&amp;quot;, &amp;quot;stages&amp;quot;, or &amp;quot;parallel&amp;quot;
            # Steps must contain at least one command to be executed or a loop.
            steps:
              - command: mvn
                # args are a YAML array, so can be specified either on multiple lines or in a []
                args:
                  - clean
                  - install
                dir: foo  # Optional, allows running this step in a subdirectory of the workspace, or
                          # a different absolute directory.
                # Steps can have their own images specified, overriding the stage and top-level images.
                agent:
                  image: some-other-image
              # A loop allows you to specify a list of potential values for an environment variable and a
              # set of one or more steps. Those steps will be run, sequentially, for each of the
              # potential values. Loops can also be nested for more complex combinations.
              - loop:
                  variable: LANGUAGE
                  values:
                    - maven
                    - gradle
                    - nodejs
                  steps:
                    - command: echo
                      args:
                        - hello
                        - ${LANGUAGE}
          - name: Stage with nested sequential stages
            # Any configuration of agent, options, or environment will apply to all child stages.
            environment:
              - name: SPECIFIC_TO_SEQUENTIAL_PARENT
                value: something
            # A list of nested stages to run sequentially. This is meant to allow for avoiding
            # copy-pasting configuration across a set of stages that need to have the same configuration
            # but where that configuration shouldn&#39;t be in place for *all* stages in the pipeline.
            stages:
              # ...insert stages here. =)
          - name: Stage with nested parallel stages
            # Works very similarly to sequential stages, except that the stages are executed in parallel,
            # rather than sequentially.
            parallel:
              # ...insert stages here. =)
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: API Documentation</title>
      <link>/docs/reference/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/reference/api/</guid>
      <description>
        
        
        &lt;p&gt;Access the api documentation on &lt;a href=&#34;/apidocs&#34;&gt;https://jenkins-x.io/apidocs&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Jenkins X Video Tutorial Series - Specify Your Own Builder Within A Pipeline</title>
      <link>/docs/managing-jx/tutorials/custom-builder/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/tutorials/custom-builder/</guid>
      <description>
        
        
        &lt;p&gt;&lt;/br&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/YCEbOI4ZVQ4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Articles</title>
      <link>/docs/getting-started/demos-talks-posts/articles/</link>
      <pubDate>Sat, 05 May 2018 10:36:00 +0200</pubDate>
      
      <guid>/docs/getting-started/demos-talks-posts/articles/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://technologyconversations.com/2019/07/17/defining-and-running-serverless-deployments-with-knative-and-jenkins-x/&#34; target=&#34;_blank&#34;&gt;Defining And Running Serverless Deployments With Knative And Jenkins X&lt;/a&gt; by &lt;a href=&#34;https://technologyconversations.com&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;, July 17th, 2019&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itnext.io/jenkins-x-managing-nexus-17d31ad493d6?source=friends_link&amp;amp;sk=8bfb32a5e9bf1170c0b3430731144adf&#34; target=&#34;_blank&#34;&gt;Jenkins X — Managing Nexus&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@sboardwell&#34; target=&#34;_blank&#34;&gt;Steve Boardwell&lt;/a&gt;, August 23th, 2019&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itnext.io/jenkins-x-managing-jenkins-926f0e0f8bcf?source=friends_link&amp;amp;sk=3dcd9c4a8c028661f0b09156c14c271e&#34; target=&#34;_blank&#34;&gt;Jenkins X — Managing Jenkins&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@sboardwell&#34; target=&#34;_blank&#34;&gt;Steve Boardwell&lt;/a&gt;, August 8th, 2019&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://technologyconversations.com/2019/06/30/overriding-pipelines-stages-and-steps-and-implementing-loops-in-jenkins-x-pipelines/&#34; target=&#34;_blank&#34;&gt;Overriding Pipelines, Stages, And Steps And Implementing Loops In Jenkins X Pipelines&lt;/a&gt; by &lt;a href=&#34;https://technologyconversations.com&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;, June 30th, 2019&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itnext.io/jenkins-x-tls-enabled-previews-d04fa68c7ce9?source=friends_link&amp;amp;sk=c13828b223f56ed662fd7ec0872c3d1e&#34; target=&#34;_blank&#34;&gt;Jenkins X — TLS enabled Previews&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@sboardwell&#34; target=&#34;_blank&#34;&gt;Steve Boardwell&lt;/a&gt;, June 26th, 2019&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itnext.io/jenkins-x-securing-the-cluster-e1b9fcd8dd05?source=friends_link&amp;amp;sk=e1e46e780908b2e3c8415c3191e82c56&#34; target=&#34;_blank&#34;&gt;Jenkins X — Securing the Cluster&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@sboardwell&#34; target=&#34;_blank&#34;&gt;Steve Boardwell&lt;/a&gt;, June 22nd, 2019&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://technologyconversations.com/2019/06/21/ten-commandments-of-gitops-applied-to-continuous-delivery/&#34; target=&#34;_blank&#34;&gt;Ten Commandments Of GitOps Applied To Continuous Delivery&lt;/a&gt; by &lt;a href=&#34;https://technologyconversations.com&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;, June 21th, 2019&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://technologyconversations.com/2019/05/31/upgrading-ingress-rules-and-adding-tls-certificates-with-jenkins-x/&#34; target=&#34;_blank&#34;&gt;Upgrading Ingress Rules And Adding TLS Certificates With Jenkins X&lt;/a&gt; by &lt;a href=&#34;https://technologyconversations.com&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;, May 31th, 2019&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://technologyconversations.com/2019/05/09/the-evolution-of-jenkins-jobs-and-how-we-got-to-the-yaml-based-jenkins-x-yml-format/&#34; target=&#34;_blank&#34;&gt;The Evolution Of Jenkins Jobs And How We Got To The YAML-Based jenkins-x.yml Format&lt;/a&gt; by &lt;a href=&#34;https://technologyconversations.com&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;, May 9th, 2019&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://technologyconversations.com/2019/04/24/implementing-chatops-with-jenkins-x/&#34; target=&#34;_blank&#34;&gt;Implementing ChatOps With Jenkins X&lt;/a&gt; by &lt;a href=&#34;https://technologyconversations.com&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;, April 24th, 2019&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://technologyconversations.com/2019/04/15/going-serverless-with-jenkins-x-exploring-prow-jenkins-x-pipeline-operator-and-tekton/&#34; target=&#34;_blank&#34;&gt;Going Serverless With Jenkins X: Exploring Prow, Jenkins X Pipeline Operator, And Tekton&lt;/a&gt; by &lt;a href=&#34;https://technologyconversations.com&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;, April 15th, 2019&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://technologyconversations.com/2019/03/25/working-with-pull-requests-and-preview-environments/&#34; target=&#34;_blank&#34;&gt;Working With Pull Requests And Preview Environments&lt;/a&gt; by &lt;a href=&#34;https://technologyconversations.com&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;, March 25th, 2019&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://technologyconversations.com/2019/03/10/improving-and-simplifying-software-development-with-jenkins-x/&#34; target=&#34;_blank&#34;&gt;Improving And Simplifying Software Development With Jenkins X&lt;/a&gt; by &lt;a href=&#34;https://technologyconversations.com&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;, March 10th, 2019&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudbees.com/blog/exploring-jenkins-x-devpod&#34; target=&#34;_blank&#34;&gt;Exploring Jenkins X: DevPods&lt;/a&gt; on March 6th, 2019 by &lt;a href=&#34;https://www.cloudbees.com/blogs/nicolas-deloof&#34; target=&#34;_blank&#34;&gt;Nicolas DeLoof&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudblogs.microsoft.com/opensource/2019/03/06/jenkins-x-azure-kubernetes-service-setup/&#34; target=&#34;_blank&#34;&gt;Setting up Jenkins X on Azure Kubernetes Service (AKS)&lt;/a&gt; on March 6th, 2019 by &lt;a href=&#34;https://cloudblogs.microsoft.com/opensource/author/pui-chee-chan/&#34; target=&#34;_blank&#34;&gt;Pui Chee Chan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csanchez.org/2019/03/05/progressive-delivery-with-jenkins-x-automatic-canary-deployments/&#34; target=&#34;_blank&#34;&gt;Progressive Delivery with Jenkins X: Automatic Canary Deployments&lt;/a&gt; on March 5th, 2019 by  &lt;a href=&#34;https://blog.csanchez.org/author/carlossanchez/&#34; target=&#34;_blank&#34;&gt;Carlos Sanchez&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nicholasduffy.com/posts/jenkins-x-environment-specific-variables/&#34; target=&#34;_blank&#34;&gt;Jenkins X Environment Specific Variables&lt;/a&gt; on March 4th, 2019 by &lt;a href=&#34;https://nicholasduffy.com/&#34; target=&#34;_blank&#34;&gt;Nicholas Duffy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://technologyconversations.com/2019/02/27/creating-custom-jenkins-x-build-packs/&#34; target=&#34;_blank&#34;&gt;Creating Custom Jenkins X Build Packs&lt;/a&gt; by &lt;a href=&#34;https://technologyconversations.com&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;, February 27th, 2019&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://technologyconversations.com/2019/02/05/is-your-cluster-ready-for-jenkins-x/&#34; target=&#34;_blank&#34;&gt;Is Your Cluster Ready For Jenkins X?&lt;/a&gt; by &lt;a href=&#34;https://technologyconversations.com&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;, February 5th, 2019&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@vbehar/zero-cost-preview-environments-on-kubernetes-with-jenkins-x-and-osiris-bd9ce0148d03&#34; target=&#34;_blank&#34;&gt;Zero cost preview environments on Kubernetes with Jenkins X and Osiris&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@vbehar&#34; target=&#34;_blank&#34;&gt;Vincent Behar&lt;/a&gt;, February 5th, 2019&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://technologyconversations.com/2019/01/29/what-is-jenkins-x/&#34; target=&#34;_blank&#34;&gt;What Is Jenkins X?&lt;/a&gt; by &lt;a href=&#34;https://technologyconversations.com&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;, January 29th, 2019&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@MichalFoksa/jenkins-x-preview-environment-3bf2424a05e4&#34; target=&#34;_blank&#34;&gt;Jenkins X: Preview Environment&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@MichalFoksa&#34; target=&#34;_blank&#34;&gt;Michal Foksa&lt;/a&gt;, January 10th, 2019&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/opensource/continuous-delivery-eks-jenkins-x/&#34; target=&#34;_blank&#34;&gt;Continuous Delivery with Amazon EKS and Jenkins X&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/hekonsek&#34; target=&#34;_blank&#34;&gt;Henryk Konsek&lt;/a&gt;, 7th November, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@puichan/trying-out-jenkins-x-on-azure-kubernetes-service-aks-20fe94bd72d2&#34; target=&#34;_blank&#34;&gt;Trying out Jenkins X on Azure Kubernetes Service(AKS)&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@puichan&#34; target=&#34;_blank&#34;&gt;PC Chan&lt;/a&gt; on October 29th, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@mayank.023/setup-jenkinsx-on-minikube-kubernetes-cluster-c519264bb991&#34; target=&#34;_blank&#34;&gt;SetUp Jenkins X on Minikube kubernetes Cluster&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@mayank.023&#34; target=&#34;_blank&#34;&gt;mayank verma&lt;/a&gt; on September 30th, 2018&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/blogs/bluemix/2018/08/installing-jenkins-x-on-ibm-cloud-kubernetes-service/&#34; target=&#34;_blank&#34;&gt;Installing Jenkins X on IBM Cloud Kubernetes Service&lt;/a&gt; on August 28th, 2018 by &lt;a href=&#34;https://www.ibm.com/blogs/bluemix/author/rvennamus-ibm-com/&#34; target=&#34;_blank&#34;&gt;Ram Vennam&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.routetocloud.com/2018/08/1969/&#34; target=&#34;_blank&#34;&gt;Jenkins X and Pivotal PKS&lt;/a&gt; on 1st August, 2018 by &lt;a href=&#34;https://twitter.com/roie9876&#34; target=&#34;_blank&#34;&gt;Roie Ben-haim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins.io/blog/2018/07/19/jenkins-x-accelerate/&#34; target=&#34;_blank&#34;&gt;Accelerate with Jenkins X&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/jdrawlings/&#34; target=&#34;_blank&#34;&gt;James Rawlings&lt;/a&gt; on July 20, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.okta.com/blog/2018/07/11/ci-cd-spring-boot-jenkins-x-kubernetes&#34; target=&#34;_blank&#34;&gt;Add CI/CD to Your Spring Boot App with Jenkins X and Kubernetes&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/mraible/&#34; target=&#34;_blank&#34;&gt;Matt Raible&lt;/a&gt; on July 11, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudbees.com/blog/don%E2%80%99t-install-development-tools&#34; target=&#34;_blank&#34;&gt;Don&amp;rsquo;t Install Developer Tools!&lt;/a&gt; by Michael Neale on 30 May 2018&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins.io/blog/2018/03/19/introducing-jenkins-x/&#34; target=&#34;_blank&#34;&gt;Introducing Jenkins X: a CI/CD solution for modern cloud applications on Kubernetes&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/jstrachan&#34; target=&#34;_blank&#34;&gt;James Strachan&lt;/a&gt; on 19th March, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudbees.com/blog/dont-install-kubernetes&#34; target=&#34;_blank&#34;&gt;Don&amp;rsquo;t Install Kubernetes!&lt;/a&gt; by Michael Neale on 27th February, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins.io/blog/2018/04/16/jenkins-x-explained-part1/&#34; target=&#34;_blank&#34;&gt;Jenkins X Explained Part 1 - an integrated CI/CD solution for Kubernetes&lt;/a&gt; by James Rawlings on 16th April, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudbees.com/blog/serverless-and-kubernetes-serverless-isnt-processless&#34; target=&#34;_blank&#34;&gt;Serverless and Kubernetes: Serverless Isn&amp;rsquo;t Processless&lt;/a&gt; by Michael Neale on 12th April, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudbees.com/blog/opinionated-kubernetes-and-jenkins-x&#34; target=&#34;_blank&#34;&gt;Opinionated Kubernetes and Jenkins X&lt;/a&gt; by Michael Neale on 13th February, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudbees.com/blog/now-devops-radio-james-strachan-introduces-jenkins-x-taking-continuous-delivery-next-level&#34; target=&#34;_blank&#34;&gt;Now on DevOps Radio: James Strachan - Introduces Jenkins X, Taking Continuous Delivery to the NeXt Level&lt;/a&gt; by Heidi Gilmore on 28th February, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudbees.com/blog/why-kubernetes-changes-everything&#34; target=&#34;_blank&#34;&gt;Why Kubernetes Changes Everything!&lt;/a&gt; by Rob Davies on 17th April, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.octo.com/en/jenkinsx-new-kubernetes-dream-part-1/&#34; target=&#34;_blank&#34;&gt;JenkinsX – new Kubernetes dream? Part 1&lt;/a&gt; by Mykyta Shulhin, Ilya Trofimov on 17th April, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.octo.com/en/jenkinsx-new-kubernetes-dream-part-2/&#34; target=&#34;_blank&#34;&gt;JenkinsX – new Kubernetes dream? Part 2 - Technical!&lt;/a&gt; by Mykyta Shulhin, Ilya Trofimov on 19th April, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/jenkins-x-the-good-bad-and-ugly&#34; target=&#34;_blank&#34;&gt;Jenkins: X or 2.0 ?&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@odzhu&#34; target=&#34;_blank&#34;&gt;Oleksii Dzhulai&lt;/a&gt; on 13th April, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudbees.com/blog/want-help-build-cloudbees-kubernetes-jenkins-x&#34; target=&#34;_blank&#34;&gt;Want to Help Build CloudBees for Kubernetes with Jenkins X?&lt;/a&gt; by Rob Davies on 2nd May, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins.io/blog/2018/05/08/jenkins-x-anchore/&#34; target=&#34;_blank&#34;&gt;Jenkins X: Announcing CVE docker image analysis with Anchore&lt;/a&gt; by James Rawlings on 8th May, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://salaboy.com/2018/05/15/activiti-cloud-jenkins-x-blueprint-in-aws-and-gce/&#34; target=&#34;_blank&#34;&gt;Activiti Cloud &amp;amp; Jenkins X: Blueprint in AWS and GCE&lt;/a&gt; by &lt;a href=&#34;https://salaboy.com/&#34; target=&#34;_blank&#34;&gt;Salaboy&lt;/a&gt; on 15th May, 2018&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@maniankara/ci-cd-with-jenkins-x-on-your-existing-gke-cluster-ruby-on-rails-application-785d8390a857&#34; target=&#34;_blank&#34;&gt;CI/CD with Jenkins-x on your existing (GKE) cluster — ruby on rails application&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@maniankara&#34; target=&#34;_blank&#34;&gt;anoop vijayan maniankara&lt;/a&gt; on May 20th, 2018&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also check out the &lt;a href=&#34;/news/&#34;&gt;Jenkins X Blog&lt;/a&gt; and &lt;a href=&#34;/docs/getting-started/demos-talks-posts/talks/&#34;&gt;Talks and Conferences&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Docker Image CVE Scanning</title>
      <link>/docs/managing-jx/tutorials/image-security/</link>
      <pubDate>Sat, 05 May 2018 10:36:00 +0200</pubDate>
      
      <guid>/docs/managing-jx/tutorials/image-security/</guid>
      <description>
        
        
        &lt;p&gt;There is a &lt;a href=&#34;https://jenkins.io/blog/2018/05/08/jenkins-x-anchore/&#34; target=&#34;_blank&#34;&gt;blog on Announcing CVE docker image analysis with Anchore&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can watch the &lt;a href=&#34;https://www.youtube.com/watch?v=rB8Sw0FqCQk&#34; target=&#34;_blank&#34;&gt;video here&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&#34;854&#34; height=&#34;480&#34; src=&#34;https://www.youtube.com/embed/rB8Sw0FqCQk&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Changelog</title>
      <link>/docs/overview/changelog/</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/docs/overview/changelog/</guid>
      <description>
        
        
        

&lt;h1 id=&#34;support-matrix&#34;&gt;Support Matrix&lt;/h1&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Install Kind&lt;/th&gt;
&lt;th&gt;Supported Git Providers&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Serverless Jenkins X pipelines with Tekton&lt;/td&gt;
&lt;td&gt;GitHub only (due to Prow restriction - we are working on it!)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Static Jenkins Server&lt;/td&gt;
&lt;td&gt;GitHub, GitHub Enterprise, BitBucket Cloud, BitBucket Server, GitLab. Gitea in beta&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Clouds with Kaniko Support&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GKE&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;EKS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Clouds supporting bucket log storage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GKE&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;EKS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;status-reports&#34;&gt;Status Reports&lt;/h1&gt;

&lt;p&gt;This section describes any specific manual work arounds you may require above and beyond changes described in the &lt;a href=&#34;/news/&#34;&gt;News section&lt;/a&gt; or using &lt;a href=&#34;/commands/jx_upgrade/&#34;&gt;jx upgrade&lt;/a&gt; to upgrade the &lt;a href=&#34;/commands/jx_upgrade_cli/&#34;&gt;CLI&lt;/a&gt; or &lt;a href=&#34;/commands/jx_upgrade_platform/&#34;&gt;platform&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;25th-june-2019-missing-image-bitnami-monocular-api&#34;&gt;25th June 2019: missing image: bitnami/monocular-api&lt;/h2&gt;

&lt;p&gt;It looks like the monocular docker images got removed today!&lt;/p&gt;

&lt;p&gt;It turns out that monocular is not an absolute requirement for Jenkins X; it works great without it.&lt;/p&gt;

&lt;p&gt;So a quick workaround to the problem is to scale down your monocular deployment&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl scale deploy jenkins-x-monocular-api --replicas=0
kubectl scale deploy jenkins-x-monocular-prerender --replicas=0
kubectl scale deploy jenkins-x-monocular-ui --replicas=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The latest &lt;a href=&#34;/docs/concepts/version-stream/&#34;&gt;version stream release&lt;/a&gt; has removed monocular so if you &lt;a href=&#34;/docs/managing-jx/common-tasks/upgrade-jx/&#34;&gt;upgrade your platform
&lt;/a&gt; this issue should be resolved.&lt;/p&gt;

&lt;p&gt;We can always add monocular back as an optional &lt;a href=&#34;/apps&#34;&gt;App&lt;/a&gt; later on when it works again.&lt;/p&gt;

&lt;h2 id=&#34;12th-june-2019-knative-build-now-deprecated&#34;&gt;12th June 2019: Knative Build now deprecated&lt;/h2&gt;

&lt;p&gt;Knative Build was our first attempt at building a serverless offering in Jenkins X. Since then Knative build got replaced with the more powerful Knative Build Pipelines which then got moved and renamed to &lt;a href=&#34;https://tekton.dev/&#34; target=&#34;_blank&#34;&gt;Tekton&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So we highly recommend anyone who has created a Jenkins X installation using Knative build to move to a &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Serverless Jenkins X Pipelines&lt;/a&gt; cluster using Tekton instead.&lt;/p&gt;

&lt;p&gt;Now the &lt;code&gt;jx&lt;/code&gt; binary will warn that any attempt at using &lt;code&gt;--knative-build&lt;/code&gt; when installing is deprecated.&lt;/p&gt;

&lt;p&gt;We will soon have a build pack for &lt;a href=&#34;https://github.com/jenkinsci/jenkinsfile-runner&#34; target=&#34;_blank&#34;&gt;Jenkinsfile runner&lt;/a&gt; when using Tekton in case you need to reuse a Jenkinsfile within &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Serverless Jenkins X Pipelines&lt;/a&gt; and Tekton along with support for orchestrating &lt;code&gt;Jenkinsfile&lt;/code&gt; within a &lt;a href=&#34;/docs/managing-jx/common-tasks/custom-jenkins/&#34;&gt;custom Jenkins server&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;21st-may-2019-skaffold-upgrade-to-v0-29-0&#34;&gt;21st May 2019: Skaffold upgrade to v0.29.0&lt;/h2&gt;

&lt;p&gt;We have noticed an incompatibility with older Skaffold configuration files and the new v0.29.0 Skaffold release.  Freshly generated applications will not suffer from this problem, but for existing applications changes to the configuration file may be required.&lt;/p&gt;

&lt;p&gt;If you are running a static master or serverless (Jenkins file runner) cluster and are having issues building existing applications with the following error &lt;code&gt;creating runner: invalid skaffold config: required value not set: image&lt;/code&gt; you will need to modify your &lt;code&gt;skaffold.yaml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;dev&lt;/code&gt; profile, remove the following section:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    artifacts:	
    - docker: {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information, refer to this &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/pull/50/files&#34; target=&#34;_blank&#34;&gt;PR&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;16th-april-2019-jenkins-x-2-x&#34;&gt;16th April 2019: Jenkins X 2.x&lt;/h2&gt;

&lt;p&gt;We are pleased to announce 2.0.x of Jenkins X.&lt;/p&gt;

&lt;p&gt;We have changed some of the default CLI arguments when installing Jenkins X.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we are now deprecating the use of Knative build with Prow / Serverless Jenkins in favor of &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Jenkins X Pipelines and Tekton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;we default to using &lt;code&gt;--no-tiller&lt;/code&gt;  to &lt;a href=&#34;/news/helm-without-tiller/&#34;&gt;disable the use of helm&amp;rsquo;s tiller&lt;/a&gt;. We recommend to avoid tiller. If you really still want to use it then use &lt;code&gt;--no-tiller false&lt;/code&gt; on the CLI when installing Jenkins X.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6th-feb-2019-regression-in-jx-install-config-secret&#34;&gt;6th Feb 2019: Regression in &lt;code&gt;jx-install-config&lt;/code&gt; secret.&lt;/h2&gt;

&lt;p&gt;We have spotted a regression in the install process that generates an invalid config file inside the secret &lt;code&gt;jx-install-config&lt;/code&gt; secret.  Whilst the original defect has been fixed, the invalid secret will create an issue with &lt;code&gt;jx upgrade platform&lt;/code&gt; causing the cluster to loose all secrets.&lt;/p&gt;

&lt;p&gt;To work around this, we have added some logic into &lt;code&gt;jx upgrade platform&lt;/code&gt; to detect the invalid secret and attempt to fix.  This feature is included in jx version &lt;code&gt;1.3.842&lt;/code&gt;.  An extract of a running upgrade is shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Creating /Users/garethjevans/.jx/adminSecrets.yaml from jx-install-config
Creating /Users/garethjevans/.jx/extraValues.yaml from jx-install-config
We have detected that the /Users/garethjevans/.jx/adminSecrets.yaml file has an invalid format
? Would you like to repair the file? Yes
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1st-feb-2019-changes-to-the-default-nexus-configuration&#34;&gt;1st Feb 2019: Changes to the default Nexus configuration&lt;/h2&gt;

&lt;p&gt;Anonymous access to Nexus has been disabled by default, this has implications to those running Maven based builds.  To support this, the maven settings.xml injected into each build pod needs to be modified.&lt;/p&gt;

&lt;p&gt;This can be done automatically using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx upgrade platform --update-secrets
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: this will regenerate the settings.xml from a defined template.&lt;/p&gt;

&lt;p&gt;If you would prefer to apply this changes manually, edit the secret &lt;code&gt;jenkins-maven-settings&lt;/code&gt;, duplicating the server block for &lt;code&gt;local-nexus&lt;/code&gt;, changing the server id to &lt;code&gt;nexus&lt;/code&gt; e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;server&amp;gt;
    &amp;lt;id&amp;gt;local-nexus&amp;lt;/id&amp;gt;
    &amp;lt;username&amp;gt;admin&amp;lt;/username&amp;gt;
    &amp;lt;password&amp;gt;%s&amp;lt;/password&amp;gt;
&amp;lt;/server&amp;gt;
&amp;lt;server&amp;gt;
    &amp;lt;id&amp;gt;nexus&amp;lt;/id&amp;gt;
    &amp;lt;username&amp;gt;admin&amp;lt;/username&amp;gt;
    &amp;lt;password&amp;gt;%s&amp;lt;/password&amp;gt;
&amp;lt;/server&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-jan-2019-prow-and-knative-build-upgrade&#34;&gt;8 Jan 2019: Prow and Knative Build upgrade&lt;/h2&gt;

&lt;p&gt;There are three critical bugs with the prow based Jenkins X
&lt;a href=&#34;https://github.com/jenkins-x/jx/issues/2539&#34; target=&#34;_blank&#34;&gt;https://github.com/jenkins-x/jx/issues/2539&lt;/a&gt;
&lt;a href=&#34;https://github.com/jenkins-x/jx/issues/2561&#34; target=&#34;_blank&#34;&gt;https://github.com/jenkins-x/jx/issues/2561&lt;/a&gt;
&lt;a href=&#34;https://github.com/jenkins-x/jx/issues/2544&#34; target=&#34;_blank&#34;&gt;https://github.com/jenkins-x/jx/issues/2544&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The fixes involve upgrading to a newer version of Prow and Knative Build, the latter caused an issue when performing a traditional &lt;code&gt;jx upgrade addon&lt;/code&gt; so we recommend uninstalling Knative Build first (removes Knative Build related Custom Resource Definitions) and install the latest release.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx delete addon knative-build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And to be extra sure it’s gone maybe do an extra:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;helm del --purge knative-build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx upgrade cli
jx upgrade addon prow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this means any existing builds or custom changes to &lt;code&gt;BuildTemplate&lt;/code&gt; resources will be lost.&lt;/p&gt;

&lt;h2 id=&#34;5-jan-2019-environment-git-repository-issue&#34;&gt;5 Jan 2019: environment git repository issue&lt;/h2&gt;

&lt;p&gt;There was a regression added a few weeks ago which led to new installations setting up invalid &lt;code&gt;exposecontroller&lt;/code&gt; configuration in your &lt;code&gt;Staging/Production&lt;/code&gt; git repositories. See the &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/2591#issuecomment-451516674&#34; target=&#34;_blank&#34;&gt;issue and workaround&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure that the &lt;code&gt;env/values.yaml&lt;/code&gt; file for your environment git repository uses &lt;code&gt;expose:&lt;/code&gt; as the key in the YAML and not &lt;code&gt;exposecontroller:&lt;/code&gt; - if it uses &lt;code&gt;exposecontroller:&lt;/code&gt; just edit it back to &lt;code&gt;expose:&lt;/code&gt; and you should be good to go!&lt;/p&gt;

&lt;p&gt;Also we have noticed a possible regression with helm where if you have multiple &lt;code&gt;expose:&lt;/code&gt; sections in your environment &lt;code&gt;env/values.yaml&lt;/code&gt; it can disable the &lt;code&gt;exposecontroller&lt;/code&gt; post install helm hook which can break the creation of &lt;code&gt;Ingress&lt;/code&gt; resources in your environment - if you have more than one &lt;code&gt;expose:&lt;/code&gt; sections please combine them into a single entry&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Access Control</title>
      <link>/docs/managing-jx/common-tasks/access-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/common-tasks/access-control/</guid>
      <description>
        
        
        

&lt;p&gt;Jenkins X uses Role-Based Access Control (RBAC) policies to control access to its various resources.  The enforcement of the policies is provided by &lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/rbac/&#34; target=&#34;_blank&#34;&gt;Kubernetes&amp;rsquo; RBAC support&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/docs/concepts/features/#teams&#34;&gt;Teams&lt;/a&gt; can have a number of &lt;a href=&#34;/docs/concepts/features/#environments&#34;&gt;Environments&lt;/a&gt; (e.g., Dev, Staging, Production) along with dynamic &lt;a href=&#34;/docs/reference/preview/&#34;&gt;Preview Environments&lt;/a&gt;; keeping  the &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Role&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;RoleBinding&lt;/code&gt;&lt;/a&gt; resources from &lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/rbac/&#34; target=&#34;_blank&#34;&gt;Kubernetes RBAC&lt;/a&gt; in sync with all the various namespaces and members of your team can be challenging.&lt;/p&gt;

&lt;p&gt;To make this management easier, Jenkins X creates a new &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34; target=&#34;_blank&#34;&gt;Custom Resource&lt;/a&gt; called &lt;a href=&#34;/docs/reference/components/custom-resources/#environmentrolebinding&#34;&gt;&lt;code&gt;EnvironmentRoleBinding&lt;/code&gt;&lt;/a&gt; which allows you to associate a &lt;code&gt;Role&lt;/code&gt; labeled with &lt;code&gt;jenkins.io/kind=EnvironmentRole&lt;/code&gt; with as many &lt;code&gt;Users&lt;/code&gt; or &lt;code&gt;ServiceAccounts&lt;/code&gt; as you like. As Environments are created or the &lt;code&gt;Role&lt;/code&gt; or &lt;code&gt;EnvironmentRoleBinding&lt;/code&gt; in the Dev environment is modified, the &lt;a href=&#34;/commands/jx_controller_role/#jx-controller-role&#34;&gt;&lt;code&gt;role controller&lt;/code&gt;&lt;/a&gt; ensures that the configuration is replicated to all the environment namespaces by creating or updating all of the &lt;code&gt;Role&lt;/code&gt; and &lt;code&gt;RoleBinding&lt;/code&gt;s per namespace.&lt;/p&gt;

&lt;p&gt;Roles are per Team so it is possible to have special roles per team, or to use common names for roles but have them customized for each team.&lt;/p&gt;

&lt;h2 id=&#34;security-implications-for-the-admin-namespace&#34;&gt;Security Implications for the admin namespace&lt;/h2&gt;

&lt;p&gt;Jenkins X stores various configuration and settings (e.g., &lt;code&gt;Users&lt;/code&gt;, &lt;code&gt;Teams&lt;/code&gt;) in the main admin namespace (&lt;code&gt;jx&lt;/code&gt;). Be careful when granting roles in the default &lt;code&gt;jx&lt;/code&gt; team as allowing users to edit some of these files may allow them to escalate their permissions.
Instead of granting non-admin users access to the &lt;code&gt;jx&lt;/code&gt; namespace, create teams and grant users access to those when using a shared cluster.&lt;/p&gt;

&lt;h2 id=&#34;default-roles&#34;&gt;Default Roles&lt;/h2&gt;

&lt;p&gt;Jenkins X ships with a collection of default &lt;code&gt;Role&lt;/code&gt; objects you can use in the &lt;code&gt;jenkins-x-platform&lt;/code&gt; template.  You can create your own if you wish, but any edits may be lost when Jenkins X is upgraded.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/templates/viewer-role.yaml&#34; target=&#34;_blank&#34;&gt;viewer&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;The &lt;code&gt;viewer&lt;/code&gt; role allows access to read projects, builds, and logs. It does not allow access to sensitive information&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/templates/committer-role.yaml&#34; target=&#34;_blank&#34;&gt;committer&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;The &lt;code&gt;committer&lt;/code&gt; role provides the same permissions as &lt;code&gt;viewer&lt;/code&gt; and allows the user to trigger builds and import new projects.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/templates/owner-role.yaml&#34; target=&#34;_blank&#34;&gt;owner&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;The owner role allows users to modify all team resources.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&#34;adding-users&#34;&gt;Adding Users&lt;/h2&gt;

&lt;p&gt;To add users use the &lt;a href=&#34;/commands/jx_create_user/&#34;&gt;jx create user&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx create user --email &amp;quot;joe@example.com&amp;quot; --login joe --name &amp;quot;Joe Bloggs&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;changing-user-roles&#34;&gt;Changing User Roles&lt;/h2&gt;

&lt;p&gt;To modify the roles for a user, use &lt;a href=&#34;/commands/jx_edit_userroles/&#34;&gt;jx edit userroles&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx edit userrole --login joe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you omit the &lt;code&gt;--login&lt;/code&gt; (&lt;code&gt;-l&lt;/code&gt;) flag, you will be prompted to pick the user to edit.&lt;/p&gt;

&lt;p&gt;For example, to make a user &lt;code&gt;joe&lt;/code&gt; have the &lt;code&gt;committer&lt;/code&gt; Role (and remove any existing roles):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx edit userrole --login joe --role committer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have fine-grained roles and want to grant multiple roles to a user, you can specify the roles as a comma-separated list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx edit userrole --login joe --role committer,viewer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modifying a user&amp;rsquo;s roles changes the &lt;code&gt;EnvironmentRoleBinding&lt;/code&gt;. The &lt;a href=&#34;/commands/jx_controller_role/#jx-controller-role&#34;&gt;role controller&lt;/a&gt; will replicate these changes to all the underlying Environment namespaces.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Contribute to the API Documentation</title>
      <link>/docs/contributing/documentation/apidocs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contributing/documentation/apidocs/</guid>
      <description>
        
        
        

&lt;p&gt;Jenkins X has two types of API documentation: &lt;a href=&#34;/apidocs&#34;&gt;Kubernetes Custom Resource Documentation&lt;/a&gt; and &lt;a href=&#34;https://godoc.org/github.com/jenkins-x/jx&#34; target=&#34;_blank&#34;&gt;Godoc&lt;/a&gt;.
Both types are generated from the &lt;code&gt;codegen&lt;/code&gt; binary which is part of the jx &lt;a href=&#34;https://github.com/jenkins-x/jx&#34; target=&#34;_blank&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;setup-your-development-environment&#34;&gt;Setup your development environment&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s best to make changes to the Jenkins X code on your local machine. Follow the &lt;a href=&#34;../development&#34;&gt;development&lt;/a&gt; guide
to get set up.&lt;/p&gt;

&lt;h2 id=&#34;writing-custom-resource-documentation&#34;&gt;Writing custom resource documentation&lt;/h2&gt;

&lt;p&gt;The custom resource documentation is mostly generated from the comments on the &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/pkg/apis/jenkins.io/v1&#34; target=&#34;_blank&#34;&gt;go structs&lt;/a&gt; that define the custom resources, with the &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/docs/apidocs/static_includes&#34; target=&#34;_blank&#34;&gt;introductory content&lt;/a&gt; and &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/docs/apidocs/config.yaml&#34; target=&#34;_blank&#34;&gt;structure&lt;/a&gt; injected.&lt;/p&gt;

&lt;h3 id=&#34;toolchain&#34;&gt;Toolchain&lt;/h3&gt;

&lt;p&gt;The custom resource documentation is generated using the &lt;a href=&#34;https://kubernetes.io/docs/contribute/generate-ref-docs/kubernetes-api/&#34; target=&#34;_blank&#34;&gt;same toolchain&lt;/a&gt; as Kubernetes, but wrapped up in a series of &lt;code&gt;codegen&lt;/code&gt; commands so that you don&amp;rsquo;t have to download and setup the different tools yourself.&lt;/p&gt;

&lt;p&gt;The HTML docs are generated via an &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/docs/apidocs/openapi-spec&#34; target=&#34;_blank&#34;&gt;OpenAPI specification&lt;/a&gt; which in turn is generated from &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/pkg/client/openapi&#34; target=&#34;_blank&#34;&gt;Go Structs&lt;/a&gt; which are generated from the code comments.
To generate the structs and the OpenAPI specification run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; $ make generate-openapi
&lt;/code&gt;&lt;/pre&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

&lt;code&gt;make generate-openapi&lt;/code&gt; is just a wrapper for &lt;code&gt;codegen openapi&lt;/code&gt;, passing in package to generate from, generate to, and the group (&lt;code&gt;jenkins.io&lt;/code&gt;) and version (&lt;code&gt;v1&lt;/code&gt;) to generate for.
 You can run this command directly if you prefer.
&lt;/div&gt;


&lt;p&gt;and to generate the HTML run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; make generate-docs
&lt;/code&gt;&lt;/pre&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

&lt;code&gt;make generate-docs&lt;/code&gt; is just a wrapper for &lt;code&gt;codegen docs&lt;/code&gt;. You can run this command directly if you prefer.
&lt;/div&gt;


&lt;p&gt;You should run &lt;code&gt;make generate-openapi&lt;/code&gt; whenever you change the custom resources, and check the generated changes into
 source control. This means that there is always a tagged version of the OpenAPI spec available for others to use.&lt;/p&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

You can also run &lt;code&gt;make generate&lt;/code&gt; which will do all the code generation needed by Jenkins X (mocks and client as well
as openapi)
&lt;/div&gt;


&lt;p&gt;&lt;code&gt;make generate-docs&lt;/code&gt; is run by the release build, and the changes are automatically uploaded to the Jenkins X
 website on every release. They&amp;rsquo;ll be available a few minutes after the release build completes.&lt;/p&gt;

&lt;h3 id=&#34;making-changes-to-the-documentation&#34;&gt;Making changes to the documentation&lt;/h3&gt;

&lt;p&gt;Each file for which you want to generate docs must be located in the &lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/pkg/apis/jenkins.io/v1&#34; target=&#34;_blank&#34;&gt;jenkins.io/v1&lt;/a&gt; directory, and must have a the&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// +k8s:openapi-gen=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;comment at the top of the file.&lt;/p&gt;

&lt;p&gt;To exclude a type or member, add&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// +k8s:openapi-gen=false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to it.&lt;/p&gt;

&lt;p&gt;Comments on types are ignored. Comments on struct fields are used as the description for each field.&lt;/p&gt;

&lt;p&gt;The left hand menu is generated from the &lt;code&gt;resource_categories&lt;/code&gt; in &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/docs/apidocs/config.yaml&#34; target=&#34;_blank&#34;&gt;config.yaml&lt;/a&gt;. The introductory text for each category is authored as
&lt;a href=&#34;https://github.com/jenkins-x/jx/tree/master/docs/apidocs/static_includes&#34; target=&#34;_blank&#34;&gt;html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The styles can &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/docs/apidocs/static/stylesheet.css&#34; target=&#34;_blank&#34;&gt;also be customized&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;openapi&#34;&gt;OpenAPI&lt;/h3&gt;

&lt;p&gt;The OpenAPI spec is generated from the code. The structure is generated from the structs and fields. The &lt;code&gt;json&lt;/code&gt;
&lt;a href=&#34;https://golang.org/pkg/encoding/json/#Marshal&#34; target=&#34;_blank&#34;&gt;tags&lt;/a&gt; are used to provide additional information including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; is generated from the &lt;code&gt;key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;omitempty&lt;/code&gt; is not set, the property will be &lt;code&gt;required&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if the &lt;code&gt;key&lt;/code&gt; is &lt;code&gt;-&lt;/code&gt; the field will be skipped&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;inline&lt;/code&gt; is set, the properties will be inlined into the parent object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally the&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// +optional
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;comment can be used to prevent a property being &lt;code&gt;required&lt;/code&gt;. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;  metav1.TypeMeta `json:&amp;quot;,inline&amp;quot;
	// +optional
	metav1.ObjectMeta `json:&amp;quot;metadata,omitempty&amp;quot; protobuf:&amp;quot;bytes,1,opt,name=metadata&amp;quot;`
  Spec BuildPackSpec `json:&amp;quot;spec,omitempty&amp;quot; protobuf:&amp;quot;bytes,2,opt,name=spec&amp;quot;`
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;openapi-extensions&#34;&gt;OpenAPI Extensions&lt;/h4&gt;

&lt;p&gt;OpenAPI spec can have extensions on types. To define one or more extensions on a type or its member
add &lt;code&gt;+k8s:openapi-gen=x-kubernetes-$NAME:$VALUE&lt;/code&gt; to the comment lines before type/member. A type/member can
have multiple extensions. The rest of the line in the comment will be used as $VALUE so there is no need to
escape or quote the value string. Extensions can be used to pass more information to client generators or
documentation generators. For example a type might have a friendly name to be displayed in documentation or
being used in a client&amp;rsquo;s fluent interface.&lt;/p&gt;

&lt;h4 id=&#34;custom-openapi-type-definitions&#34;&gt;Custom OpenAPI type definitions&lt;/h4&gt;

&lt;p&gt;Custom types which otherwise don&amp;rsquo;t map directly to OpenAPI can override their
OpenAPI definition by implementing a function named &amp;ldquo;OpenAPIDefinition&amp;rdquo; with
the following signature:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;	import openapi &amp;quot;k8s.io/kube-openapi/pkg/common&amp;quot;

	// ...

	type Time struct {
		time.Time
	}

	func (_ Time) OpenAPIDefinition() openapi.OpenAPIDefinition {
		return openapi.OpenAPIDefinition{
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Type:   []string{&amp;quot;string&amp;quot;},
					Format: &amp;quot;date-time&amp;quot;,
				},
			},
		}
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, the type can avoid the &amp;ldquo;openapi&amp;rdquo; import by defining the following
methods. The following example produces the same OpenAPI definition as the
example above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    func (_ Time) OpenAPISchemaType() []string { return []string{&amp;quot;string&amp;quot;} }
    func (_ Time) OpenAPISchemaFormat() string { return &amp;quot;date-time&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;write-godoc&#34;&gt;Write Godoc&lt;/h2&gt;

&lt;p&gt;Jenkins X uses the standard approach to Godoc, and it is automatically generated by &lt;a href=&#34;http://godoc.org&#34; target=&#34;_blank&#34;&gt;godoc.org&lt;/a&gt;.
This &lt;a href=&#34;https://blog.golang.org/godoc-documenting-go-code&#34; target=&#34;_blank&#34;&gt;blog&lt;/a&gt; provides a good introduction to writing Godoc.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Binary Plugins for the Jenkins X CLI</title>
      <link>/docs/contributing/addons/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contributing/addons/plugins/</guid>
      <description>
        
        
        

&lt;p&gt;This guide shows you how to write plugins for the &lt;code&gt;jx&lt;/code&gt; CLI. Plugins extend the &lt;code&gt;jx&lt;/code&gt; CLI with new sub-commands allowing for new
features not included in Jenkins X. &lt;code&gt;jx&lt;/code&gt; plugins can be managed by Jenkins X meaning neither the plugin developer nor
the plugin user has to worry about how to install the plugin onto the user&amp;rsquo;s computer.&lt;/p&gt;

&lt;p&gt;You might want to write a plugin for the &lt;code&gt;jx&lt;/code&gt; CLI if you developed some new functionality for Jenkins X and wanted to provide a
way for the user to easily interact with it via the &lt;code&gt;jx&lt;/code&gt; CLI rather than make them install a new CLI. This could be particularly
useful inside a pipeline step.&lt;/p&gt;

&lt;h2 id=&#34;before-you-begin&#34;&gt;Before you begin&lt;/h2&gt;

&lt;p&gt;You need to have a working &lt;code&gt;jx&lt;/code&gt; binary installed, one newer than around &lt;code&gt;v1.3.600&lt;/code&gt;. You need to have Go installed.&lt;/p&gt;

&lt;h2 id=&#34;writing-jenkins-x-cli-plugins&#34;&gt;Writing Jenkins X CLI plugins&lt;/h2&gt;

&lt;p&gt;You can write a plugin in any programming language or script that allows you to write command-line commands.&lt;/p&gt;

&lt;p&gt;There is no plugin installation or pre-loading required. Plugin executables receive the inherited environment from the
 &lt;code&gt;jx&lt;/code&gt; binary.&lt;/p&gt;

&lt;h3 id=&#34;example-plugin&#34;&gt;Example plugin&lt;/h3&gt;

&lt;p&gt;Here is a simple plugin that simply outputs a log statement.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
)

func main() {
	fmt.Println(&amp;quot;Have some tasty brie.&amp;quot;)
	os.Exit(0)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We strongly recommend using Go and the &lt;a href=&#34;https://github.com/spf13/cobra&#34; target=&#34;_blank&#34;&gt;Cobra CLI framework&lt;/a&gt;. This allows you to easily
build a well structured plugin with subcommands and argument handling.&lt;/p&gt;

&lt;p&gt;We &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/2832&#34; target=&#34;_blank&#34;&gt;plan&lt;/a&gt; to build a quickstart and build pack that allows you to
quickly create a new Cobra based plugin.&lt;/p&gt;

&lt;h3 id=&#34;using-the-plugin&#34;&gt;Using the plugin&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Build a binary&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-$&#34;&gt;2. Add it to your path

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$ sudo mv ./jx-brie /usr/local/bin```&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can now use the plugin&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jx brie
Have some tasty brie
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;plugin-management&#34;&gt;Plugin Management&lt;/h2&gt;

&lt;p&gt;Whilst being able to run a plugin is useful you&amp;rsquo;ll normally want to make it available to everyone who uses your Jenkins X cluster.&lt;/p&gt;

&lt;p&gt;Jenkins X provides binary plugin management via the &lt;code&gt;plugin&lt;/code&gt; custom resource.&lt;/p&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h2 id=&#34;distributing-your-plugin-using-apps&#34;&gt;Distributing your plugin using Apps&lt;/h2&gt;

&lt;p&gt;Now that you&amp;rsquo;ve written your plugin you&amp;rsquo;ll want to distribute it.&lt;/p&gt;

&lt;p&gt;TODO&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Browsing</title>
      <link>/docs/using-jx/developing/browsing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-jx/developing/browsing/</guid>
      <description>
        
        
        

&lt;p&gt;If you have used kubernetes before you&amp;rsquo;re probably used the &lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/overview/&#34; target=&#34;_blank&#34;&gt;kubectl&lt;/a&gt; command line to view kubernetes resources:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kubectl get pods
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Jenkins X command line tool, &lt;a href=&#34;/commands/jx&#34;&gt;jx&lt;/a&gt;, has a similar look and feel to &lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/overview/&#34; target=&#34;_blank&#34;&gt;kubectl&lt;/a&gt; and lets you get the status of all the Jenkins X resources.&lt;/p&gt;

&lt;h3 id=&#34;view-jenkins-console&#34;&gt;View Jenkins Console&lt;/h3&gt;

&lt;p&gt;If you are familiar with the Jenkins console then you can use &lt;a href=&#34;/commands/jx_console&#34;&gt;jx console&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to open it in a browser.&lt;/p&gt;

&lt;h3 id=&#34;pipeline-activity&#34;&gt;Pipeline Activity&lt;/h3&gt;

&lt;p&gt;To view the current pipeline activity &lt;a href=&#34;/commands/jx_get_activities&#34;&gt;jx get activities&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get activities
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to watch whats going on with your app &lt;code&gt;myapp&lt;/code&gt;  you can use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get activities -f myapp -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which will watch the pipeline activities and update the screen whenever a significant change happens (e.g. a release completes, a PR is created to start &lt;a href=&#34;/developing/promote&#34;&gt;promotion&lt;/a&gt; etc).&lt;/p&gt;

&lt;h3 id=&#34;pipeline-build-logs&#34;&gt;Pipeline Build logs&lt;/h3&gt;

&lt;p&gt;To view the current pipeline build logs via &lt;a href=&#34;/commands/jx_get_build_logs&#34;&gt;jx get build logs&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get build logs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are then presented with all the possible pipelines to watch.&lt;/p&gt;

&lt;p&gt;You can quickly filter that via&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get build logs -f myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or if you wish to be explicit&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get build logs myorg/myapp/master
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pipelines&#34;&gt;Pipelines&lt;/h3&gt;

&lt;p&gt;To view the current configured pipelines use &lt;a href=&#34;/commands/jx_get_pipelines&#34;&gt;jx get pipelines&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get pipelines
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;applications&#34;&gt;Applications&lt;/h3&gt;

&lt;p&gt;To view all the applications in your team across all your environments with URLs and pod counts use  &lt;a href=&#34;/commands/jx_get_applications&#34;&gt;jx get applications&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get applications
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to hide the URLs or the pod counts you can use &lt;code&gt;u&lt;/code&gt; or &lt;code&gt;-p&lt;/code&gt;. e.g. to hide the URLs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get applications -u
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or hide the pod counts:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get applications -p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also filter the apps by an environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get applications -e staging
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;environments&#34;&gt;Environments&lt;/h3&gt;

&lt;p&gt;To view the &lt;a href=&#34;/docs/concepts/features/#environments&#34;&gt;environments&lt;/a&gt; defined for your team use &lt;a href=&#34;/commands/jx_get_environments&#34;&gt;jx get environments&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get environments
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a new environment via &lt;a href=&#34;/commands/jx_create_environment&#34;&gt;jx create environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;edit an environment via &lt;a href=&#34;/commands/jx_edit_environment&#34;&gt;jx edit environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;delete an environment via &lt;a href=&#34;/commands/jx_delete_environment&#34;&gt;jx delete environment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Components</title>
      <link>/docs/concepts/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/components/</guid>
      <description>
        
        
        

&lt;p&gt;An installation of Jenkins X consists of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a Development Environment per team which is a &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/&#34; target=&#34;_blank&#34;&gt;kubernetes namespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;zero to many other &lt;a href=&#34;/docs/concepts/features/#environments&#34;&gt;Permanent Environments&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;the out of the box is for each team to get their own &lt;code&gt;Staging&lt;/code&gt; and &lt;code&gt;Production&lt;/code&gt; environments&lt;/li&gt;
&lt;li&gt;each team can have as many environments as they wish and can call them whatever they like&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;optional &lt;a href=&#34;/docs/concepts/features/#preview-environments&#34;&gt;Preview Environments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Typically each environment is associated with its own &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/&#34; target=&#34;_blank&#34;&gt;kubernetes namespace&lt;/a&gt; which are usually different to ensure clean isolation between the environments.&lt;/p&gt;

&lt;p&gt;Though technically 2 teams could share the same underlying namespace for, say, &lt;code&gt;Staging&lt;/code&gt; though we advise separation to keep things simple - otherwise changes in one git repo could conflict with changes in another if they both configure the same namespace; due to, say, service resource name or DNS conflicts. If you wish 2 teams to share the same underlying microservices its much simpler to just use &lt;code&gt;service linking&lt;/code&gt; to link services in one namespace to another so that they appear as local services with local DNS.&lt;/p&gt;

&lt;p&gt;See the full list of &lt;a href=&#34;/docs/reference/components/&#34;&gt;components of Jenkns X&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;development-environment&#34;&gt;Development Environment&lt;/h2&gt;

&lt;p&gt;In the dev environment we have installed a number of core applications we believe are required at a minimum to start folks off with CI/CD on Kubernetes.&lt;/p&gt;

&lt;p&gt;We also support &lt;a href=&#34;/docs/concepts/features/#applications&#34;&gt;addons&lt;/a&gt; to extend this core set.&lt;/p&gt;

&lt;p&gt;Jenkins X comes with configuration that wires these services together meaning everything works together straight away. This dramatically reduces the time to get started with Kubernetes as all the passwords, environment variables and config files are all setup up to work with each other.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Jenkins&lt;/strong&gt;  — provides both CI and CD automation. There is an effort to decompose Jenkins over time to become more cloud native and make use of Kubernetes concepts around CRDs, storage and scaling for example.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nexus&lt;/strong&gt; — acts as a dependency cache for NodeJS and Java applications to dramatically improve build times. After an initial build of a SpringBoot application the build time is reduced from 12 minutes to 4. We have not yet but intend to demonstrate swapping this with Artifactory soon.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker registry&lt;/strong&gt;  — an in cluster docker registry where our pipelines push application images, we will soon switch to using native cloud provider registries such as Google Container Registry, Azure Container Registry or Amazon Elastic Container Registry (ECR) for example.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ChartMuseum&lt;/strong&gt; — a Repository for publishing Helm charts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monocular&lt;/strong&gt;  — a UI used for discovering and running Helm charts&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;permanent-environments&#34;&gt;Permanent Environments&lt;/h2&gt;

&lt;p&gt;These &lt;a href=&#34;/docs/concepts/features/#environments&#34;&gt;environments&lt;/a&gt;, like &lt;code&gt;Staging&lt;/code&gt; and &lt;code&gt;Production&lt;/code&gt; use GitOps to manage themselves and so each have a git repository containing the source code to configure all the applications and services which are deployed there.&lt;/p&gt;

&lt;p&gt;Typically we use Helm charts in these git repositories to define which charts are to be installed, which versions of them and any environment specific configuration and additional resources (e.g. Secrets or operational applications like Prometheus etc)&lt;/p&gt;

&lt;h2 id=&#34;preview-environments&#34;&gt;Preview Environments&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/docs/concepts/features/#preview-environments&#34;&gt;Preview Environments&lt;/a&gt; are similar to &lt;a href=&#34;/docs/concepts/features/#environments&#34;&gt;Permanent Environments&lt;/a&gt; in that they are defined in source code using Helm charts.&lt;/p&gt;

&lt;p&gt;The main difference is preview environments are configured inside the application source code in the &lt;code&gt;./chart/preview&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Also they are not permanent but created on a Pull Request to an applications git repository and then deleted some time after (manually or via automatic garbage collection).&lt;/p&gt;

&lt;h2 id=&#34;ingress-custom-annotations&#34;&gt;Ingress Custom Annotations&lt;/h2&gt;

&lt;p&gt;To learn how to add custom annotations to the ingress controller, please see &lt;a href=&#34;/docs/managing-jx/faq/#how-to-add-custom-annotations-to-ingress-controller&#34;&gt;How To Add Custom Annotations to Ingress Controller?&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create Quickstart</title>
      <link>/docs/getting-started/first-project/create-quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/first-project/create-quickstart/</guid>
      <description>
        
        
        

&lt;p&gt;Quickstarts are pre-made applications you can start a project from, instead of starting from scratch.&lt;/p&gt;

&lt;p&gt;You can create new applications from our list of curated Quickstart applications via the &lt;a href=&#34;/commands/jx_create_quickstart&#34;&gt;jx create quickstart&lt;/a&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx create quickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are then prompted for a list of quickstarts to choose from.&lt;/p&gt;

&lt;p&gt;If you know the language you wish to use you can filter the list of quickstarts shown via:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx create quickstart -l go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or use a text filter to filter on the project names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx create quickstart -f http
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;what-happens-when-you-create-a-quickstart&#34;&gt;What happens when you create a quickstart&lt;/h3&gt;

&lt;p&gt;Once you have chosen the project to create and given it a name the following is automated for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;creates a new application from the quickstart in a sub directory&lt;/li&gt;
&lt;li&gt;add your source code into a git repository&lt;/li&gt;
&lt;li&gt;create a remote git repository on a git service, such as &lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;push your code to the remote git service&lt;/li&gt;
&lt;li&gt;adds default files:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; to build your application as a docker image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jenkinsfile&lt;/code&gt; to implement the CI / CD pipeline&lt;/li&gt;
&lt;li&gt;Helm chart to run your application inside Kubernetes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;register a webhook on the remote git repository to your teams Jenkins&lt;/li&gt;
&lt;li&gt;add the git repository to your teams Jenkins&lt;/li&gt;
&lt;li&gt;trigger the first pipeline&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;how-do-quickstarts-work&#34;&gt;How do quickstarts work?&lt;/h3&gt;

&lt;p&gt;The source of these Quickstarts are maintained in &lt;a href=&#34;https://github.com/jenkins-x-quickstarts&#34; target=&#34;_blank&#34;&gt;the jenkins-quickstarts GitHub organisation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When you create a quickstart we use the &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34; target=&#34;_blank&#34;&gt;Jenkins X build packs&lt;/a&gt; to match the right pack for the project using the source code language kinds to pick the most suitable match.&lt;/p&gt;

&lt;p&gt;When you use &lt;a href=&#34;/docs/getting-started/setup/create-cluster/&#34;&gt;jx create&lt;/a&gt;, &lt;a href=&#34;/docs/managing-jx/common-tasks/install-on-cluster/&#34;&gt;jx install&lt;/a&gt; or &lt;a href=&#34;/commands/jx_init/&#34;&gt;jx init&lt;/a&gt; the &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34; target=&#34;_blank&#34;&gt;Jenkins X build packs&lt;/a&gt; are cloned into your &lt;code&gt;~/.jx/draft/packs&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Depending on your JenkinsX installation type (Serverless Jenkins vs. Static Master Jenkin), you can view all the languages supported via build packs on your machine via:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Serverless Jenkins&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ls -al ~/.jx/draft/packs/github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/packs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Static Master Jenkins&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ls -al ~/.jx/draft/packs/github.com/jenkins-x-buildpacks/jenkins-x-classic/packs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then when you create a quickstart, use &lt;a href=&#34;/docs/using-jx/common-tasks/create-spring/&#34;&gt;jx create spring&lt;/a&gt; or &lt;a href=&#34;developing/import/&#34; target=&#34;_blank&#34;&gt;jx import&lt;/a&gt; the &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34; target=&#34;_blank&#34;&gt;Jenkins X build packs&lt;/a&gt; are used to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;find the right language pack. e.g. here are the current &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs&#34; target=&#34;_blank&#34;&gt;list of language packs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;the language pack is then used to default these files if they don&amp;rsquo;t already exist:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; to package the application as a docker image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jenkinsfile&lt;/code&gt; to implement the CI / CD pipelines using declarative pipeline as code&lt;/li&gt;
&lt;li&gt;Helm Charts to deploy the application on Kubernetes and to implement &lt;a href=&#34;/docs/concepts/features/#preview-environments&#34;&gt;Preview Environments&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;adding-your-own-quickstarts&#34;&gt;Adding your own Quickstarts&lt;/h2&gt;

&lt;p&gt;If you would like to submit a new Quickstart to Jenkins X please just &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new?labels=quickstart&amp;amp;title=Add%20quickstart&amp;amp;body=Please%20add%20this%20github%20quickstart:&#34; target=&#34;_blank&#34;&gt;raise an issue&lt;/a&gt; with the URL in GitHub of your quickstart and we can fork it it into the &lt;a href=&#34;https://github.com/jenkins-x-quickstarts&#34; target=&#34;_blank&#34;&gt;quickstart organisation&lt;/a&gt; so it appears in the &lt;code&gt;jx create quickstart&lt;/code&gt; menu.&lt;/p&gt;

&lt;p&gt;Or if you are part of an open source project and wish to curate your own set of quickstarts for your project; you can &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new?labels=quickstart&amp;amp;title=Add%20quickstart&amp;amp;body=Please%20add%20this%20github%20quickstart:&#34; target=&#34;_blank&#34;&gt;raise an issue&lt;/a&gt; giving us details of the github organisation where the quickstarts live and we&amp;rsquo;ll add that in as a default organisation to include in the &lt;a href=&#34;/commands/jx_create_quickstart&#34;&gt;jx create quickstart&lt;/a&gt; command. Its easier for the &lt;a href=&#34;/commands/jx_create_quickstart&#34;&gt;jx create quickstart&lt;/a&gt; if you maintain the quickstarts in a separate quickstart organisation on github.&lt;/p&gt;

&lt;p&gt;Until we do that you can still use your own Quickstarts in the &lt;code&gt;jx create quickstart&lt;/code&gt; command via the &lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--organisations&lt;/code&gt; command line argument. e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx create quickstart  -l go --organisations my-github-org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then all quickstarts found in &lt;code&gt;my-github-org&lt;/code&gt; will be listed in addition to the Jenkins X quickstarts.&lt;/p&gt;

&lt;h2 id=&#34;customising-your-teams-quickstarts&#34;&gt;Customising your teams quickstarts&lt;/h2&gt;

&lt;p&gt;You can configure at a team level the quickstarts which are presented to you in the &lt;code&gt;jx create quickstart&lt;/code&gt; command. These settings are stored in the &lt;a href=&#34;/docs/reference/components/custom-resources/&#34;&gt;Environment Custom Resource&lt;/a&gt; in Kubernetes.&lt;/p&gt;

&lt;p&gt;To add the location of a set of quickstarts you can use the &lt;a href=&#34;/commands/jx_create_quickstartlocation/&#34;&gt;jx create quickstartlocation&lt;/a&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx create quickstartlocation --url https://mygit.server.com --owner my-quickstarts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you omit the &lt;code&gt;--url&lt;/code&gt; argument the command will assume its a &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt; repository. Note that both public and private repositories are supported.&lt;/p&gt;

&lt;p&gt;This means you can have your own shared private quickstarts to reuse within your organisation. Of course we&amp;rsquo;d obviously prefer you to &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new?labels=quickstart&amp;amp;title=Add%20quickstart&amp;amp;body=Please%20add%20this%20github%20quickstart:&#34; target=&#34;_blank&#34;&gt;share your quickstarts with us via open source&lt;/a&gt; then we can include your quickstart with the entire &lt;a href=&#34;/community&#34;&gt;community&lt;/a&gt; - but there may be times you want to curate your own internal quickstarts using proprietary software.&lt;/p&gt;

&lt;p&gt;You can also specify &lt;code&gt;--includes&lt;/code&gt; or &lt;code&gt;--excludes&lt;/code&gt; patterns to filter the names of the repositories where &lt;code&gt;*&lt;/code&gt; matches anything and &lt;code&gt;foo*&lt;/code&gt; matches anything starting with &lt;code&gt;foo&lt;/code&gt;. e.g. you could just include the languages and technologies your organisation supports and exclude the rest etc.&lt;/p&gt;

&lt;p&gt;Also note that you can use the alias of &lt;code&gt;qsloc&lt;/code&gt; instead of &lt;code&gt;quickstartlocation&lt;/code&gt; if you like shorter aliases ;)&lt;/p&gt;

&lt;p&gt;You can then view the current quickstart locations for your team via the &lt;a href=&#34;/commands/jx_get_quickstartlocations/&#34;&gt;jx get quickstartlocations&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx get quickstartlocations
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or using an abbreviation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx get qsloc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is also &lt;a href=&#34;/commands/jx_delete_quickstartlocation/&#34;&gt;jx delete quickstartlocation&lt;/a&gt; if you need to remove a git organisation.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Custom Resources</title>
      <link>/docs/reference/components/custom-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/reference/components/custom-resources/</guid>
      <description>
        
        
        

&lt;p&gt;Kubernetes provides an extension mechanism called &lt;a href=&#34;https://kubernetes.io/docs/concepts/api-extension/custom-resources/&#34; target=&#34;_blank&#34;&gt;Custom Resources&lt;/a&gt; which allows microservices to extend the Kubernetes platform to solve higher order problems.&lt;/p&gt;

&lt;p&gt;So in Jenkins X, we have added a number of Custom Resources to help extend Kubernetes to support CI/CD.&lt;/p&gt;

&lt;p&gt;You can also &lt;a href=&#34;/apidocs/&#34;&gt;browse the Custom Resource API Reference&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;environments&#34;&gt;Environments&lt;/h2&gt;

&lt;p&gt;Jenkins X natively supports &lt;a href=&#34;/docs/concepts/features/#environments&#34;&gt;environments&lt;/a&gt; allowing them to be defined for your team and then queried via &lt;a href=&#34;/commands/jx_get_environments&#34;&gt;jx get environments&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get environments
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Under the covers that command uses the custom Kubernetes resource &lt;code&gt;Environments&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So you can also query the environments via &lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/overview/&#34; target=&#34;_blank&#34;&gt;kubectl&lt;/a&gt; as well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kubectl get environments
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or edit them via &lt;code&gt;YAML&lt;/code&gt; directly if you want:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kubectl edit env staging
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;though you may prefer the easier to use &lt;a href=&#34;/commands/jx_edit_environment&#34;&gt;jx edit environment&lt;/a&gt; command.&lt;/p&gt;

&lt;h2 id=&#34;release&#34;&gt;Release&lt;/h2&gt;

&lt;p&gt;The Jenkins X pipelines generate a custom &lt;code&gt;Release&lt;/code&gt; resource which we can use to keep track of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what version, Git tag and Git URL map to a release in Kubernetes/Helm&lt;/li&gt;
&lt;li&gt;what Jenkins pipeline URL and log was used to perform the release&lt;/li&gt;
&lt;li&gt;which commits, issues and Pull Requests were part of each release so that we can implement &lt;a href=&#34;/docs/concepts/features/#feedback&#34;&gt;feedback as issues are fixed in Staging/Production&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sourcerepository&#34;&gt;SourceRepository&lt;/h2&gt;

&lt;p&gt;This stores information about source code repositories that Jenkins X is set to build.&lt;/p&gt;

&lt;p&gt;It is created by &lt;code&gt;jx import&lt;/code&gt; and &lt;code&gt;jx create quickstart&lt;/code&gt; and removed whenever a &lt;code&gt;jx delete application&lt;/code&gt; is invoked.&lt;/p&gt;

&lt;h2 id=&#34;scheduler&#34;&gt;Scheduler&lt;/h2&gt;

&lt;p&gt;This is used to define a configuration for one or more &lt;code&gt;SourceRepository&lt;/code&gt; and is used by [jx boot]() to generate the Prow configuration.&lt;/p&gt;

&lt;p&gt;This lets you setup a default &lt;code&gt;Scheduler&lt;/code&gt; for a team and then you don&amp;rsquo;t have to touch your prow configuration at all; all imported/created projects will inherit from the default &lt;code&gt;Scheduler&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Or when you perform &lt;code&gt;jx import&lt;/code&gt; or &lt;code&gt;jx create quickstart&lt;/code&gt; you can pass in a &lt;code&gt;--scheduler&lt;/code&gt; command line argument to use a specific scheduler.&lt;/p&gt;

&lt;h2 id=&#34;pipelineactivity&#34;&gt;PipelineActivity&lt;/h2&gt;

&lt;p&gt;This resource stores the pipeline status in terms of Jenkins Pipeline stages plus the &lt;a href=&#34;/docs/concepts/features/#promotion&#34;&gt;promotion activity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This resource is also used by the &lt;a href=&#34;/commands/jx_get_activities&#34;&gt;jx get activities&lt;/a&gt; command.&lt;/p&gt;

&lt;h2 id=&#34;team&#34;&gt;Team&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Team&lt;/code&gt; Custom Resource is created via the &lt;a href=&#34;/commands/jx_create_team/&#34;&gt;jx create team&lt;/a&gt; command and is used by the &lt;code&gt;team controller&lt;/code&gt; to watch for new &lt;code&gt;Team&lt;/code&gt; resources and then create an installation of Jenkins X in the &lt;code&gt;teams&lt;/code&gt; namespace. For more background on teams see the &lt;a href=&#34;/docs/concepts/features/#teams&#34;&gt;team feature&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;user&#34;&gt;User&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;User&lt;/code&gt; Custom Resource is used to support RBAC across the various &lt;a href=&#34;/docs/concepts/features/#environments&#34;&gt;environments&lt;/a&gt; and &lt;a href=&#34;about/features/#preview-environments&#34; target=&#34;_blank&#34;&gt;preview environments&lt;/a&gt; in teams.&lt;/p&gt;

&lt;p&gt;It is also used by the &lt;a href=&#34;/commands/jx_edit_userroles/&#34;&gt;jx edit userroles&lt;/a&gt; to change user roles.&lt;/p&gt;

&lt;h2 id=&#34;environmentrolebinding&#34;&gt;EnvironmentRoleBinding&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;EnvironmentRoleBinding&lt;/code&gt; resource is like the standard Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#rolebinding-v1-rbac-authorization-k8s-io&#34; target=&#34;_blank&#34;&gt;RoleBinding&lt;/a&gt; resource, but it allows mapping of a &lt;code&gt;Role&lt;/code&gt; to multiple &lt;a href=&#34;/docs/concepts/features/#environments&#34;&gt;environments&lt;/a&gt; and &lt;a href=&#34;about/features/#preview-environments&#34; target=&#34;_blank&#34;&gt;preview environments&lt;/a&gt; in a team by using a selector of Environments on which to bind roles.&lt;/p&gt;

&lt;p&gt;This makes it easy to bind a &lt;code&gt;Role&lt;/code&gt; to either all environments, all preview environments or both or a given set of users.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: DNS</title>
      <link>/docs/contributing/code/contribute_dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contributing/code/contribute_dns/</guid>
      <description>
        
        
        

&lt;p&gt;Some features and issues require DNS to be configured. The domain name &lt;code&gt;jenkins-x.rocks&lt;/code&gt; is available for
use. Jenkins X can either manage your DNS for you or you can manage the DNS manually. Read more about how
&lt;a href=&#34;../../managing-jx/common-tasks/dns/&#34;&gt;Jenkins X manages your DNS for you&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In both scenarios you can reuse the domain name if you delete the old cluster that was using it and create a new one. If
you run both clusters at the same time you will need a domain name for each.&lt;/p&gt;

&lt;p&gt;We cover both scenarios here as you may be debugging an issue that requires a particular setup - check the issue to find out what the user did! If you are unsure or it doesn&amp;rsquo;t seem relevant to the issue then the External DNS setup is easier to manage and we recommend you follow that.&lt;/p&gt;

&lt;h2 id=&#34;with-external-dns&#34;&gt;With External DNS&lt;/h2&gt;

&lt;p&gt;To add records, visit &lt;a href=&#34;https://console.cloud.google.com/net-services/dns/zones/jenkins-x-rocks?project=jenkins-x-rocks&amp;amp;organizationId=41792434410&#34; target=&#34;_blank&#34;&gt;the Cloud DNS dashboard&lt;/a&gt;.
If you need access please contact one of the project maintainers.&lt;/p&gt;

&lt;p&gt;Once you have access, you can use the &lt;code&gt;Add record set&lt;/code&gt; button to add entries. External DNS will automatically update the
records if you reuse the domain name, so if you delete the old cluster and create a new one there is no need to go through
this process again.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Choose a unique DNS name; you can use nested domains (e.g. &lt;code&gt;demo.example.pmuir.jenkins-x.rocks&lt;/code&gt;). We recommend using
&lt;code&gt;&amp;lt;unique name&amp;gt;.&amp;lt;your username&amp;gt;.jenkins-x.rocks&lt;/code&gt; so you can easily identify domains created by you. Enter this in the
&lt;code&gt;DNS Name&lt;/code&gt; field using the format &lt;code&gt;&amp;lt;unique name&amp;gt;.&amp;lt;your username&amp;gt;.jenkins-x-rocks.&lt;/code&gt; (note that you can&amp;rsquo;t change the
the &lt;code&gt;jenkins-x.rocks&lt;/code&gt; suffix and it is prefilled for you).&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;jx create domain gke --domain &amp;lt;unique name&amp;gt;.&amp;lt;your username&amp;gt;.jenkins-x.rocks&lt;/code&gt;. Make a note of the nameservers printed out.&lt;/li&gt;
&lt;li&gt;Change the &lt;code&gt;Resource Record Type&lt;/code&gt; to &lt;code&gt;NS&lt;/code&gt;) and use the default values for &lt;code&gt;TTL&lt;/code&gt; (&lt;code&gt;5&lt;/code&gt;) and &lt;code&gt;TTL Unit&lt;/code&gt; (&lt;code&gt;minutes&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Add the first nameserver to the &lt;code&gt;Name server&lt;/code&gt; field&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Add item&lt;/code&gt; and add the second nameserver. Do the same for rest of the nameservers&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Create&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tell Jenkins X about the name.

&lt;ul&gt;
&lt;li&gt;If you are using &lt;code&gt;jx install --external-dns&lt;/code&gt; then paste &lt;code&gt;&amp;lt;unique name&amp;gt;.&amp;lt;your username&amp;gt;.jenkins-x.rocks&lt;/code&gt; into the prompt where you paused earlier&lt;/li&gt;
&lt;li&gt;If you are using &lt;code&gt;jx boot&lt;/code&gt; then edit &lt;code&gt;jx-requirements.yaml&lt;/code&gt;, and update the &lt;code&gt;domain&lt;/code&gt; field (in &lt;code&gt;ingress&lt;/code&gt;)
to &lt;code&gt;&amp;lt;unique name&amp;gt;.&amp;lt;your username&amp;gt;.jenkins-x.rocks&lt;/code&gt; and run &lt;code&gt;jx boot&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;without-external-dns&#34;&gt;Without External DNS&lt;/h2&gt;

&lt;p&gt;To add records, visit &lt;a href=&#34;https://console.cloud.google.com/net-services/dns/zones/jenkins-x-rocks?project=jenkins-x-rocks&amp;amp;organizationId=41792434410&#34; target=&#34;_blank&#34;&gt;the Cloud DNS dashboard&lt;/a&gt;.
If you need access please contact one of the project maintainers.&lt;/p&gt;

&lt;p&gt;Once you have access, you can use the &lt;code&gt;Add record set&lt;/code&gt; button to add entries or the pencil to edit entries.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Choose a unique DNS name; you can use nested domains (e.g. &lt;code&gt;demo.example.pmuir.jenkins-x.rocks&lt;/code&gt;). We recommend using
&lt;code&gt;&amp;lt;unique name&amp;gt;.&amp;lt;your username&amp;gt;.jenkins-x.rocks&lt;/code&gt; so you can easily identify domains created by you. Enter this in the
&lt;code&gt;DNS Name&lt;/code&gt; field using the format &lt;code&gt;*.&amp;lt;unique name&amp;gt;.&amp;lt;your username&amp;gt;.jenkins-x-rocks.&lt;/code&gt; (note that you can&amp;rsquo;t change the
the &lt;code&gt;jenkins-x.rocks&lt;/code&gt; suffix and it is prefilled for you).&lt;/li&gt;
&lt;li&gt;Find the cluster IP. The way to do this varies.

&lt;ul&gt;
&lt;li&gt;If you used &lt;code&gt;jx install&lt;/code&gt; then you &lt;strong&gt;must&lt;/strong&gt; configure this during install. When you are prompted if you want to use
the default &lt;code&gt;.nip.io&lt;/code&gt; domain copy the IP. You &lt;strong&gt;must&lt;/strong&gt; now wait until your domain name is ready.&lt;/li&gt;
&lt;li&gt;If you used jx boot then you can do this at any time. The domain name is present in the domain name and can be found
in &lt;code&gt;jx-requirements.yaml&lt;/code&gt;. Copy the IP.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Use the default values for &lt;code&gt;Resource Record Type&lt;/code&gt; (&lt;code&gt;A&lt;/code&gt;), &lt;code&gt;TTL&lt;/code&gt; (&lt;code&gt;5&lt;/code&gt;) and &lt;code&gt;TTL Unit&lt;/code&gt; (&lt;code&gt;minutes&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Paste the IP address you found above into the &lt;code&gt;IPv4 Address&lt;/code&gt; field&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Create&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check if the DNS has propagated to wherever you are running the &lt;code&gt;jx&lt;/code&gt; command. Run
&lt;code&gt;watch dig +short A test-dns.&amp;lt;unique name&amp;gt;.&amp;lt;your username&amp;gt;.jenkins-x.rocks&lt;/code&gt;. Once the output changes to the IP address
you found above the DNS has propagated. If you are using a Mac &lt;code&gt;watch&lt;/code&gt; can be installed using &lt;code&gt;brew install watch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tell Jenkins X about the name.

&lt;ul&gt;
&lt;li&gt;If you are using &lt;code&gt;jx install&lt;/code&gt; then paste &lt;code&gt;&amp;lt;unique name&amp;gt;.&amp;lt;your username&amp;gt;.jenkins-x.rocks&lt;/code&gt; into the prompt where you paused earlier&lt;/li&gt;
&lt;li&gt;If you are using &lt;code&gt;jx boot&lt;/code&gt; then edit &lt;code&gt;jx-requirements.yaml&lt;/code&gt;, and update the &lt;code&gt;domain&lt;/code&gt; field (in &lt;code&gt;ingress&lt;/code&gt;)
to &lt;code&gt;&amp;lt;unique name&amp;gt;.&amp;lt;your username&amp;gt;.jenkins-x.rocks&lt;/code&gt; and run &lt;code&gt;jx boot&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;If you prefer to use the gcloud CLI you can find instructions for usage on the &amp;ldquo;Create record set&amp;rdquo; screen.&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Google Cloud Hosted Tutorials</title>
      <link>/docs/managing-jx/tutorials/google-hosted/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/tutorials/google-hosted/</guid>
      <description>
        
        
        

&lt;p&gt;These tutorials can be used against &lt;a href=&#34;https://cloud.google.com/kubernetes-engine/&#34; target=&#34;_blank&#34;&gt;Google Kubernetes Engine&lt;/a&gt; utilising its &lt;a href=&#34;https://cloud.google.com/shell/docs/&#34; target=&#34;_blank&#34;&gt;Google Cloud Shell&lt;/a&gt; feature to help you get up and running quickly.&lt;/p&gt;

&lt;h3 id=&#34;installing-jx-on-gke&#34;&gt;Installing JX on GKE&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Time to complete.&lt;/strong&gt; About 25 minutes&lt;/p&gt;

&lt;p&gt;At the end of this guide you will have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a working JX installation on Google Kubernetes Engine&lt;/li&gt;
&lt;li&gt;created an application using a quickstart&lt;/li&gt;
&lt;li&gt;promoted that application to production&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/cloudshell/open?git_repo=https%3A%2F%2Fgithub.com%2Fjenkins-x%2Fjx-tutorial&amp;amp;page=editor&amp;amp;print=install-guide.txt&amp;amp;tutorial=tutorials%2Finstall-jx-on-gke%2Flesson.md&#34; target=&#34;_blank&#34;&gt;&lt;svg height=&#34;54&#34; width=&#34;274&#34;
   xmlns=&#34;http://www.w3.org/2000/svg&#34;
   version=&#34;1.2&#34;&gt;
  &lt;g
     transform=&#34;translate(0,-6)&#34;
     id=&#34;layer1&#34;&gt;
    &lt;rect
       width=&#34;266.465&#34;
       height=&#34;50.53175&#34;
       ry=&#34;4.6644692&#34;
       x=&#34;1.7675018&#34;
       y=&#34;7.7341251&#34;
       id=&#34;rect3101&#34;
       style=&#34;fill:#3367d6;fill-opacity:1&#34; /&gt;
  &lt;/g&gt;
  &lt;g
     id=&#34;layer2&#34;&gt;
    &lt;text
       x=&#34;52.473&#34;
       y=&#34;31.976562&#34;
       id=&#34;text4303&#34;
       xml:space=&#34;preserve&#34;
       style=&#34;font-size:13px;font-style:normal;font-weight:normal;line-height:100%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Roboto, Sans;user-select: none&#34;&gt;OPEN IN GOOGLE CLOUD SHELL&lt;/text&gt;
    &lt;g
       transform=&#34;matrix(1.1349981,0,0,1.1349981,16.464659,15.380023)&#34;
       id=&#34;g3949&#34;
       style=&#34;fill:#ffffff&#34;&gt;
      &lt;path
         d=&#34;M 21,2 H 3 C 1.9,2 1,2.9 1,4 v 11.9 c 0,1.1 0.9,2 2,2 h 7 V 20 H 8 v 2 h 8 v -2 h -2 v -2.2 h 7 c 1.1,0 2,-0.9 2,-2 V 4 C 23,2.9 22.1,2 21,2 z m -4,13 h -4 v -2 h 4 v 2 z m 0.1,-4.8 -9.9,4.1 v -2.1 l 7.2,-3.1 -7.2,-3 v -2 l 9.9,4.1 v 2 z&#34;
         id=&#34;path3937&#34;
         style=&#34;fill:#ffffff&#34; /&gt;
      &lt;path
         d=&#34;m 10,17.8 h 4 V 20 h -4 z&#34;
         id=&#34;path3939&#34;
         style=&#34;fill:#ffffff&#34; /&gt;
      &lt;path
         d=&#34;m 8,20 h 8 v 2 H 8 z&#34;
         id=&#34;path3941&#34;
         style=&#34;fill:#ffffff&#34; /&gt;
    &lt;/g&gt;
  &lt;/g&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;installing-jx-on-gke-with-terraform&#34;&gt;Installing JX on GKE with Terraform&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Time to complete.&lt;/strong&gt; About 30 minutes&lt;/p&gt;

&lt;p&gt;At the end of this guide you will have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a working JX installation on Google Kubernetes Engine using Terraform&lt;/li&gt;
&lt;li&gt;created an application using a quickstart&lt;/li&gt;
&lt;li&gt;promoted that application to production using prow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/cloudshell/open?git_repo=https%3A%2F%2Fgithub.com%2Fjenkins-x%2Fjx-tutorial&amp;amp;page=editor&amp;amp;print=install-guide.txt&amp;amp;tutorial=tutorials%2Finstall-jx-on-gke-with-terraform%2Flesson.md&#34; target=&#34;_blank&#34;&gt;&lt;svg height=&#34;54&#34; width=&#34;274&#34;
   xmlns=&#34;http://www.w3.org/2000/svg&#34;
   version=&#34;1.2&#34;&gt;
  &lt;g
     transform=&#34;translate(0,-6)&#34;
     id=&#34;layer1&#34;&gt;
    &lt;rect
       width=&#34;266.465&#34;
       height=&#34;50.53175&#34;
       ry=&#34;4.6644692&#34;
       x=&#34;1.7675018&#34;
       y=&#34;7.7341251&#34;
       id=&#34;rect3101&#34;
       style=&#34;fill:#3367d6;fill-opacity:1&#34; /&gt;
  &lt;/g&gt;
  &lt;g
     id=&#34;layer2&#34;&gt;
    &lt;text
       x=&#34;52.473&#34;
       y=&#34;31.976562&#34;
       id=&#34;text4303&#34;
       xml:space=&#34;preserve&#34;
       style=&#34;font-size:13px;font-style:normal;font-weight:normal;line-height:100%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Roboto, Sans;user-select: none&#34;&gt;OPEN IN GOOGLE CLOUD SHELL&lt;/text&gt;
    &lt;g
       transform=&#34;matrix(1.1349981,0,0,1.1349981,16.464659,15.380023)&#34;
       id=&#34;g3949&#34;
       style=&#34;fill:#ffffff&#34;&gt;
      &lt;path
         d=&#34;M 21,2 H 3 C 1.9,2 1,2.9 1,4 v 11.9 c 0,1.1 0.9,2 2,2 h 7 V 20 H 8 v 2 h 8 v -2 h -2 v -2.2 h 7 c 1.1,0 2,-0.9 2,-2 V 4 C 23,2.9 22.1,2 21,2 z m -4,13 h -4 v -2 h 4 v 2 z m 0.1,-4.8 -9.9,4.1 v -2.1 l 7.2,-3.1 -7.2,-3 v -2 l 9.9,4.1 v 2 z&#34;
         id=&#34;path3937&#34;
         style=&#34;fill:#ffffff&#34; /&gt;
      &lt;path
         d=&#34;m 10,17.8 h 4 V 20 h -4 z&#34;
         id=&#34;path3939&#34;
         style=&#34;fill:#ffffff&#34; /&gt;
      &lt;path
         d=&#34;m 8,20 h 8 v 2 H 8 z&#34;
         id=&#34;path3941&#34;
         style=&#34;fill:#ffffff&#34; /&gt;
    &lt;/g&gt;
  &lt;/g&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Pipelines Questions</title>
      <link>/docs/using-jx/faq/pipelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-jx/faq/pipelines/</guid>
      <description>
        
        
        

&lt;p&gt;For more background see the guide on &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Serverless Jenkins X Pipelines&lt;/a&gt; using &lt;a href=&#34;https://tekton.dev/&#34; target=&#34;_blank&#34;&gt;Tekton&lt;/a&gt;. There is also the &lt;a href=&#34;/docs/reference/pipeline-syntax-reference/&#34;&gt;Jenkins X Pipelines Syntax Reference&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-do-i-add-a-custom-step&#34;&gt;How do I add a custom step?&lt;/h2&gt;

&lt;p&gt;To add a new custom step to your &lt;code&gt;jenkins-x.yml&lt;/code&gt; file see &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/#customizing-the-pipelines&#34;&gt;how to use the jx create step&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-do-jenkins-x-pipelines-compare-to-jenkins-pipelines&#34;&gt;How do Jenkins X Pipelines compare to Jenkins pipelines?&lt;/h2&gt;

&lt;p&gt;See &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/#differences-to-jenkins-pipelines&#34;&gt;the differences between Jenkins X and Jenkins Pipelines&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-do-i-get-ide-completion-editing-jenkins-x-yml&#34;&gt;How do I get IDE completion editing &lt;code&gt;jenkins-x.yml&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;See the IDE guide for &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/#editing-in-vs-code&#34;&gt;IDEA&lt;/a&gt; and &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/#editing-in-vs-code&#34;&gt;VS Code&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-environment-variables-are-available-by-default-inside-a-pipeline&#34;&gt;What environment variables are available by default inside a pipeline?&lt;/h2&gt;

&lt;p&gt;See the &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/#default-environment-variables&#34;&gt;default environment variables created for pipeline steps&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;is-there-a-reference-for-the-syntax&#34;&gt;Is there a reference for the syntax?&lt;/h2&gt;

&lt;p&gt;See the &lt;a href=&#34;/docs/reference/pipeline-syntax-reference/&#34;&gt;Jenkins X Pipelines Syntax Reference&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-do-i-mount-a-secret-or-configmap&#34;&gt;How do I mount a Secret or ConfigMap?&lt;/h2&gt;

&lt;p&gt;Each step in a Jenkins X Pipeline in the &lt;code&gt;jenkins-x.yml&lt;/code&gt; file is basically a &lt;a href=&#34;https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.15/#container-v1-core&#34; target=&#34;_blank&#34;&gt;Container&lt;/a&gt; from kubernetes so you can specify the image, resource limitts, environment variables and mount them from a &lt;code&gt;ConfigMap&lt;/code&gt; or &lt;code&gt;Secret&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can see &lt;a href=&#34;/docs/reference/pipeline-syntax-reference/#full-pipeline-definition-in-jenkins-x-yml&#34;&gt;an example of mounting a Secrett to an environment variable here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are inside a shell script you can also use the &lt;a href=&#34;/commands/jx_step_credential/&#34;&gt;jx step credential&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;can-i-mount-a-persistent-volume-in-my-pipeline&#34;&gt;Can I mount a Persistent Volume in my pipeline?&lt;/h2&gt;

&lt;p&gt;Tekton already mounts a separate Persistent Volume for each build pod at &lt;code&gt;/workspace&lt;/code&gt; so the build results are kept around for a while until they are garbage collected.&lt;/p&gt;

&lt;p&gt;On most kubernetes clusters you cannot easily share a single Persistent Volume across multiple pods; so having a shared PV across builds isn&amp;rsquo;t generally easy or compatible. You can however add a step to populate your PV on startup from a cloud bucket and at the end of a pipeline copy data into a bucket to speed up caching.&lt;/p&gt;

&lt;p&gt;You can also do things like use Nexus as a network cache for fetching maven dependencies (which happens OOTB with Maven builds in Jenkins X) or add the Athens proxy for Go.&lt;/p&gt;

&lt;p&gt;Hopefully the Tekton community will figure out some even better caching solutions to speed up builds.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Install Jenkins X on GKE Properly</title>
      <link>/docs/managing-jx/tutorials/jenkins-x-gke-install-with-bot/</link>
      <pubDate>Thu, 25 Apr 2019 07:36:00 +0200</pubDate>
      
      <guid>/docs/managing-jx/tutorials/jenkins-x-gke-install-with-bot/</guid>
      <description>
        
        
        

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This tutorial is based on the following jx version&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;    NAME               VERSION
    jx                 2.0.33
    jenkins x platform 2.0.108
    Kubernetes cluster v1.11.8-gke.6
    kubectl            v1.14.0
    helm client        Client: v2.13.1+g618447c
    git                git version 2.21.0
    Operating System   Mac OS X 10.14.3 build 18D42
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;In this tutorial, we walk you through a full setup of Jenkinx X in GKE, including setup of the Bot.  We will install Jenkins X Serverless topology which also brings Tekton pipelines for us to use in this scenario.  We walk through putting an app via CI/CD and ensuring the Jenkins X Bot is working as expected.&lt;/p&gt;

&lt;h1 id=&#34;what-you-will-learn&#34;&gt;What You Will Learn&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Install Jenkins X on GKE including the Jenkins Bot configuration for the full and proper experience&lt;/li&gt;
&lt;li&gt;Run an application through CI/CD and seeing the bot in action, executing approval commands (as the approver)&lt;/li&gt;
&lt;li&gt;You wil have a &lt;strong&gt;Serverless Jenkins X&lt;/strong&gt; cluster with &lt;strong&gt;Tekton&lt;/strong&gt; Pipelines enabled.&lt;/li&gt;
&lt;li&gt;You will have a cluster that uses &lt;strong&gt;GitOps&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

&lt;strong&gt;NOTE:&lt;/strong&gt;  If you&amp;rsquo;ve provisioned the cluster using Terraform, this should still work.  However you cannot run the command we outline below, instead you will have to run the &lt;code&gt;jx install --ng=true&lt;/code&gt; command.
&lt;/div&gt;


&lt;h1 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;A GCP account along with a &lt;strong&gt;Project&lt;/strong&gt; already created.&lt;/li&gt;
&lt;li&gt;You should be able to create resources via the &lt;code&gt;gcloud&lt;/code&gt; CLI&lt;/li&gt;
&lt;li&gt;You should have &lt;code&gt;kubectl&lt;/code&gt; installed.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;jx&lt;/code&gt; CLI version &lt;code&gt;2.0.33&lt;/code&gt; or greater, perferably this specific version.&lt;/li&gt;
&lt;li&gt;Github Organization&lt;/li&gt;
&lt;li&gt;Github account - used as the &lt;em&gt;Jenkins&lt;/em&gt; X Bot [  Github account: &lt;code&gt;jenkinsx-bot-sposcar&lt;/code&gt; does not have to have high privileges]&lt;/li&gt;
&lt;li&gt;Github account - used as the &lt;em&gt;Developer&lt;/em&gt; working on code [  Github account: &lt;code&gt;sharepointoscar&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;Both Github accounts should belong to the Github Organization. [ Github Org: &lt;code&gt;jenkins-oscar&lt;/code&gt;]&lt;/li&gt;
&lt;/ol&gt;



&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

Lastly, clean up after yourself!  If you&amp;rsquo;ve tried multiple installs, best approach is to remove the &lt;code&gt;~/.jx&lt;/code&gt; folder as there are sometimes things that are saved and reused for new installs obviously.
&lt;/div&gt;


&lt;p&gt;Your Github Organization and user accounts should be setup similar to how it is shown on &lt;strong&gt;Figure 1&lt;/strong&gt; below.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&#34;/images/getting-started/github_org_settings.png&#34;/&gt;
&lt;figcaption&gt;
&lt;h5&gt;Figure 1 - Github Organization and members&lt;/h5&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;creating-gke-cluster-and-installing-jenkins-x&#34;&gt;Creating GKE Cluster and Installing Jenkins X&lt;/h2&gt;

&lt;p&gt;The first step we need to take, is execute the command which simultaneously will provision a cluster and install Jenkins X.  The following command should be issued on the terminal.  Change placeholders accordingly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; $ jx create cluster gke --default-admin-password=&amp;lt;YOURPASSWORD&amp;gt; -n &amp;lt;CLUSTERNAME&amp;gt; --ng=true
&lt;/code&gt;&lt;/pre&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

&lt;strong&gt;NOTE:&lt;/strong&gt; The execution of this command with ONLY the &lt;code&gt;--ng=true&lt;/code&gt; flag, ensures several things happen.  It ensures the following features are configured &lt;strong&gt;Prow&lt;/strong&gt;, &lt;strong&gt;Tekton&lt;/strong&gt;, &lt;strong&gt;No Tiller&lt;/strong&gt;, &lt;strong&gt;HashiCorp Vault&lt;/strong&gt;, Dev &lt;strong&gt;GitOps&lt;/strong&gt; on a &lt;strong&gt;Serverless&lt;/strong&gt; topology.
&lt;/div&gt;


&lt;h2 id=&#34;output-of-the-command-lengthy-but-let-s-break-it-down&#34;&gt;Output of the Command - lengthy but let&amp;rsquo;s break it down!&lt;/h2&gt;

&lt;p&gt;The output below is quite insightful, we include it here for you to see all of what happens as the install is happening.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
Using the only Google Cloud Project jenkinsx-dev to create the cluster
Updated property [core/project].
Let&#39;s ensure we have container and compute enabled on your project
No apis to enable
? What type of cluster would you like to create Zonal
? Google Cloud Zone: us-west1-a
? Google Cloud Machine Type: n1-standard-2
? Minimum number of Nodes (per zone) 3
? Maximum number of Nodes 5
? Would you like use preemptible VMs? No
? Would you like to access Google Cloud Storage / Google Container Registry? No
? Would you like to enable Kaniko for building container images Yes
Creating cluster...
Initialising cluster ...
Setting the dev namespace to: jx
Namespace jx created 
 
Using helmBinary helm with feature flag: none
Context &amp;quot;gke_jenkinsx-dev_us-west1-a_sposcar&amp;quot; modified.
Storing the kubernetes provider gke in the TeamSettings
Enabling helm template mode in the TeamSettings
Git configured for user: sharepointoscar and email me@sharepointoscar.com
Trying to create ClusterRoleBinding omedina-cloudbees-com-cluster-admin-binding for role: cluster-admin for user omedina@cloudbees.com
 clusterrolebindings.rbac.authorization.k8s.io &amp;quot;omedina-cloudbees-com-cluster-admin-binding&amp;quot; not found
Created ClusterRoleBinding omedina-cloudbees-com-cluster-admin-binding
Using helm2
Skipping tiller
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;key-things-happened-above&#34;&gt;Key Things happened above&amp;hellip;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Basic cluster configuration such as max and min nodes are configured.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Kubectl context is set to new cluster so you can access cluster via both &lt;code&gt;kubectl&lt;/code&gt; and &lt;code&gt;jx&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sets cluster admin via ClusterRoleBinding created&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
Using helmBinary helm with feature flag: template-mode
Initialising Helm &#39;init --client-only&#39;
helm installed and configured
? No existing ingress controller found in the kube-system namespace, shall we install one? Yes

Current configuration dir: /Users/omedina/.jx
versionRepository: https://github.com/jenkins-x/jenkins-x-versions.git git ref: 
Deleting and cloning the Jenkins X versions repo
Cloning the Jenkins X versions repo https://github.com/jenkins-x/jenkins-x-versions.git with ref refs/heads/master to /Users/omedina/.jx/jenkins-x-versions
Enumerating objects: 206, done.
Counting objects: 100% (206/206), done.
Compressing objects: 100% (89/89), done.
Total 1096 (delta 109), reused 185 (delta 101), pack-reused 890
using stable version 1.3.1 from charts of stable/nginx-ingress from /Users/omedina/.jx/jenkins-x-versions
Installing using helm binary: helm
Current configuration dir: /Users/omedina/.jx
versionRepository: https://github.com/jenkins-x/jenkins-x-versions.git git ref: 
Deleting and cloning the Jenkins X versions repo
Cloning the Jenkins X versions repo https://github.com/jenkins-x/jenkins-x-versions.git with ref refs/heads/master to /Users/omedina/.jx/jenkins-x-versions
Enumerating objects: 206, done.
Counting objects: 100% (206/206), done.
Compressing objects: 100% (89/89), done.
Total 1096 (delta 109), reused 185 (delta 101), pack-reused 890
Fetched chart stable/nginx-ingress to dir /var/folders/hb/w23l1cld7pl2h_rjqk_1yyrr0000gn/T/helm-template-workdir-231692500/jxing/chartFiles/nginx-ingress
Generating Chart Template &#39;template --name jxing --namespace kube-system /var/folders/hb/w23l1cld7pl2h_rjqk_1yyrr0000gn/T/helm-template-workdir-231692500/jxing/chartFiles/nginx-ingress --output-dir /var/folders/hb/w23l1cld7pl2h_rjqk_1yyrr0000gn/T/helm-template-workdir-231692500/jxing/output --debug --set rbac.create=true --set controller.extraArgs.publish-service=kube-system/jxing-nginx-ingress-controller&#39;
Applying generated chart stable/nginx-ingress YAML via kubectl in dir: /var/folders/hb/w23l1cld7pl2h_rjqk_1yyrr0000gn/T/helm-template-workdir-231692500/jxing/output
clusterrole.rbac.authorization.k8s.io/jxing-nginx-ingress created
clusterrolebinding.rbac.authorization.k8s.io/jxing-nginx-ingress created
configmap/jxing-nginx-ingress-controller created
deployment.extensions/jxing-nginx-ingress-controller created
service/jxing-nginx-ingress-controller created
deployment.extensions/jxing-nginx-ingress-default-backend created
service/jxing-nginx-ingress-default-backend created
role.rbac.authorization.k8s.io/jxing-nginx-ingress created
rolebinding.rbac.authorization.k8s.io/jxing-nginx-ingress created
serviceaccount/jxing-nginx-ingress created

Removing Kubernetes resources from older releases using selector: jenkins.io/chart-release=jxing,jenkins.io/version!=1.3.1 from all pvc configmap release sa role rolebinding secret
Removing Kubernetes resources from older releases using selector: jenkins.io/chart-release=jxing,jenkins.io/version!=1.3.1,jenkins.io/namespace=kube-system from clusterrole clusterrolebinding
Waiting for external loadbalancer to be created and update the nginx-ingress-controller service in kube-system namespace
Note: this loadbalancer will fail to be provisioned if you have insufficient quotas, this can happen easily on a GKE free account. To view quotas run: gcloud compute project-info describe
External loadbalancer created
Waiting to find the external host name of the ingress controller Service in namespace kube-system with name jxing-nginx-ingress-controller
You can now configure a wildcard DNS pointing to the new Load Balancer address 34.83.54.46

If you do not have a custom domain setup yet, Ingress rules will be set for magic DNS nip.io.

Once you have a custom domain ready, you can update with the command jx upgrade ingress --cluster
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

At this point, we have already set our DNS settings to point to the IP listed above for the ingress controller and gave it a bit of time to propagate before hitting &lt;strong&gt;enter&lt;/strong&gt; &lt;code&gt;sharepointoscar.com&lt;/code&gt; for the Domain, and letting it configure ingress and other endpoints.
&lt;/div&gt;


&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;If you don&#39;t have a wildcard DNS setup then setup a DNS (A) record and point it at: 34.83.54.46 then use the DNS domain in the next input...
? Domain sharepointoscar.com
nginx ingress controller installed and configured
Lets set up a Git user name and API token to be able to perform CI/CD

? local Git user for GitHub server: jenkinsx-bot-sposcar
Select the CI/CD pipelines Git server and user
? Do you wish to use GitHub as the pipelines Git server: Yes
Setting the pipelines Git server https://github.com and user name jenkinsx-bot-sposcar.
Saving the Git authentication configuration
Current configuration dir: /Users/omedina/.jx
versionRepository: https://github.com/jenkins-x/jenkins-x-versions.git git ref: 
Deleting and cloning the Jenkins X versions repo
Cloning the Jenkins X versions repo https://github.com/jenkins-x/jenkins-x-versions.git with ref refs/heads/master to /Users/omedina/.jx/jenkins-x-versions
Enumerating objects: 206, done.
Counting objects: 100% (206/206), done.
Compressing objects: 100% (89/89), done.
Total 1096 (delta 109), reused 185 (delta 101), pack-reused 890
Current configuration dir: /Users/omedina/.jx
options.Flags.CloudEnvRepository: https://github.com/jenkins-x/cloud-environments
options.Flags.LocalCloudEnvironment: false
Cloning the Jenkins X cloud environments repo to /Users/omedina/.jx/cloud-environments
? A local Jenkins X cloud environments repository already exists, recreate with latest? Yes
Current configuration dir: /Users/omedina/.jx
options.Flags.CloudEnvRepository: https://github.com/jenkins-x/cloud-environments
options.Flags.LocalCloudEnvironment: false
Cloning the Jenkins X cloud environments repo to /Users/omedina/.jx/cloud-environments
Enumerating objects: 1382, done.
Total 1382 (delta 0), reused 0 (delta 0), pack-reused 1382
? Select Jenkins installation type: Serverless Jenkins X Pipelines with Tekton

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;key-things-happened-above-1&#34;&gt;Key Things happened above&amp;hellip;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We specified &lt;code&gt;sharepointoscar.com&lt;/code&gt; as the domain for the ingress controller and endpoints.&lt;/li&gt;
&lt;li&gt;GitHub server account is set to &lt;code&gt;jenkinsx-bot-sposcar&lt;/code&gt; and which is part of the Organization &lt;code&gt;jenkins-oscar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We were prompted to enter an &lt;strong&gt;API token&lt;/strong&gt; for the bot account &lt;strong&gt;(we are signed into Github with the bot account)&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Jenkins Installation Type is set to &lt;strong&gt;Serverless Jenkins X Pipelines with Tekton&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Configuring Kaniko service account jxkaniko-sposcar for project jenkinsx-dev
Unable to find service account jxkaniko-sposcar, checking if we have enough permission to create
Creating service account jxkaniko-sposcar
Assigning role roles/storage.admin
Assigning role roles/storage.objectAdmin
Assigning role roles/storage.objectCreator
Downloading service account key
Setting the dev namespace to: jx
Generated helm values /Users/omedina/.jx/extraValues.yaml
Creating Secret jx-install-config in namespace jx
Installing Jenkins X platform helm chart from: /Users/omedina/.jx/cloud-environments/env-gke
Configuring the TeamSettings for Prow with engine Tekton
Setting the current namespace to: jx

Installing knative into namespace jx
Current configuration dir: /Users/omedina/.jx
versionRepository: https://github.com/jenkins-x/jenkins-x-versions.git git ref: 
Deleting and cloning the Jenkins X versions repo
Cloning the Jenkins X versions repo https://github.com/jenkins-x/jenkins-x-versions.git with ref refs/heads/master to /Users/omedina/.jx/jenkins-x-versions
Enumerating objects: 206, done.
Counting objects: 100% (206/206), done.
Compressing objects: 100% (89/89), done.
Total 1096 (delta 109), reused 185 (delta 101), pack-reused 890
using stable version 0.0.35 from charts of jenkins-x/tekton from /Users/omedina/.jx/jenkins-x-versions
Updating Helm repository...
Helm repository update done.
Fetched chart jenkins-x/tekton to dir /var/folders/hb/w23l1cld7pl2h_rjqk_1yyrr0000gn/T/helm-template-workdir-231692500/tekton/chartFiles/tekton
Generating Chart Template &#39;template --name tekton --namespace jx /var/folders/hb/w23l1cld7pl2h_rjqk_1yyrr0000gn/T/helm-template-workdir-231692500/tekton/chartFiles/tekton --output-dir /var/folders/hb/w23l1cld7pl2h_rjqk_1yyrr0000gn/T/helm-template-workdir-231692500/tekton/output --debug --set  --set tillerNamespace= --set auth.git.username=jenkinsx-bot-sposcar --set auth.git.password=04028f1eba8c0091cecd8f2d277e2569046482d9&#39;
Applying generated chart jenkins-x/tekton YAML via kubectl in dir: /var/folders/hb/w23l1cld7pl2h_rjqk_1yyrr0000gn/T/helm-template-workdir-231692500/tekton/output
clusterrole.rbac.authorization.k8s.io/tekton-pipelines created
clusterrolebinding.rbac.authorization.k8s.io/tekton-pipelines-jx created
secret/knative-git-user-pass created
serviceaccount/tekton-pipelines created
serviceaccount/tekton-bot created
customresourcedefinition.apiextensions.k8s.io/clustertasks.tekton.dev created
customresourcedefinition.apiextensions.k8s.io/pipelines.tekton.dev created
customresourcedefinition.apiextensions.k8s.io/pipelineruns.tekton.dev created
customresourcedefinition.apiextensions.k8s.io/pipelineresources.tekton.dev created
customresourcedefinition.apiextensions.k8s.io/tasks.tekton.dev created
customresourcedefinition.apiextensions.k8s.io/taskruns.tekton.dev created
service/tekton-pipelines-controller created
service/tekton-pipelines-webhook created
clusterrole.rbac.authorization.k8s.io/tekton-bot created
clusterrolebinding.rbac.authorization.k8s.io/tekton-bot-jx created
role.rbac.authorization.k8s.io/tekton-bot created
rolebinding.rbac.authorization.k8s.io/tekton-bot created
configmap/config-artifact-bucket created
configmap/config-entrypoint created
configmap/config-logging created
deployment.apps/tekton-pipelines-controller created
deployment.apps/tekton-pipelines-webhook created

Removing Kubernetes resources from older releases using selector: jenkins.io/chart-release=tekton,jenkins.io/version!=0.0.35 from all pvc configmap release sa role rolebinding secret
Removing Kubernetes resources from older releases using selector: jenkins.io/chart-release=tekton,jenkins.io/version!=0.0.35,jenkins.io/namespace=jx from clusterrole clusterrolebinding

Installing Prow into namespace jx
Current configuration dir: /Users/omedina/.jx
versionRepository: https://github.com/jenkins-x/jenkins-x-versions.git git ref: 
Deleting and cloning the Jenkins X versions repo
Cloning the Jenkins X versions repo https://github.com/jenkins-x/jenkins-x-versions.git with ref refs/heads/master to /Users/omedina/.jx/jenkins-x-versions
Enumerating objects: 206, done.
Counting objects: 100% (206/206), done.
Compressing objects: 100% (89/89), done.
Total 1096 (delta 109), reused 185 (delta 101), pack-reused 890
using stable version 0.0.540 from charts of jenkins-x/prow from /Users/omedina/.jx/jenkins-x-versions
Updating Helm repository...
Helm repository update done.
Fetched chart jenkins-x/prow to dir /var/folders/hb/w23l1cld7pl2h_rjqk_1yyrr0000gn/T/helm-template-workdir-231692500/jx-prow/chartFiles/prow
Generating Chart Template &#39;template --name jx-prow --namespace jx /var/folders/hb/w23l1cld7pl2h_rjqk_1yyrr0000gn/T/helm-template-workdir-231692500/jx-prow/chartFiles/prow --output-dir /var/folders/hb/w23l1cld7pl2h_rjqk_1yyrr0000gn/T/helm-template-workdir-231692500/jx-prow/output --debug --set  --set tillerNamespace= --set auth.git.username=jenkinsx-bot-sposcar --set buildnum.enabled=false --set build.enabled=false --set pipelinerunner.enabled=true --set user=jenkinsx-bot-sposcar --set oauthToken=04028f1eba8c0091cecd8f2d277e2569046482d9 --set hmacToken=cfb951f73b3e36557df3f024c1d112351f36a1a2c&#39;
Applying generated chart jenkins-x/prow YAML via kubectl in dir: /var/folders/hb/w23l1cld7pl2h_rjqk_1yyrr0000gn/T/helm-template-workdir-231692500/jx-prow/output
clusterrolebinding.rbac.authorization.k8s.io/cluster-admin-binding-jx created
clusterrole.rbac.authorization.k8s.io/crier created
clusterrolebinding.rbac.authorization.k8s.io/crier-jx created
deployment.extensions/crier created
rolebinding.rbac.authorization.k8s.io/crier created
role.rbac.authorization.k8s.io/crier created
serviceaccount/crier created
deployment.extensions/deck created
rolebinding.rbac.authorization.k8s.io/deck created
role.rbac.authorization.k8s.io/deck created
serviceaccount/deck created
service/deck created
secret/hmac-token created
deployment.extensions/hook created
rolebinding.rbac.authorization.k8s.io/hook created
role.rbac.authorization.k8s.io/hook created
serviceaccount/hook created
service/hook created
deployment.extensions/horologium created
rolebinding.rbac.authorization.k8s.io/horologium created
role.rbac.authorization.k8s.io/horologium created
serviceaccount/horologium created
secret/oauth-token created
clusterrole.rbac.authorization.k8s.io/pipeline created
clusterrolebinding.rbac.authorization.k8s.io/pipeline-jx created
deployment.extensions/pipeline created
serviceaccount/pipeline created
deployment.extensions/pipelinerunner created
rolebinding.rbac.authorization.k8s.io/pipelinerunner created
role.rbac.authorization.k8s.io/pipelinerunner created
serviceaccount/pipelinerunner created
service/pipelinerunner created
deployment.extensions/plank created
rolebinding.rbac.authorization.k8s.io/plank created
role.rbac.authorization.k8s.io/plank created
serviceaccount/plank created
customresourcedefinition.apiextensions.k8s.io/prowjobs.prow.k8s.io created
deployment.extensions/sinker created
rolebinding.rbac.authorization.k8s.io/sinker created
role.rbac.authorization.k8s.io/sinker created
serviceaccount/sinker created
deployment.extensions/tide created
rolebinding.rbac.authorization.k8s.io/tide created
role.rbac.authorization.k8s.io/tide created
serviceaccount/tide created
service/tide created

Removing Kubernetes resources from older releases using selector: jenkins.io/chart-release=jx-prow,jenkins.io/version!=0.0.540 from all pvc configmap release sa role rolebinding secret
Removing Kubernetes resources from older releases using selector: jenkins.io/chart-release=jx-prow,jenkins.io/version!=0.0.540,jenkins.io/namespace=jx from clusterrole clusterrolebinding
? Pick default workload build pack:  Kubernetes Workloads: Automated CI+CD with GitOps Promotion
Setting the team build pack to kubernetes-workloads repo: https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes.git ref: master
Installing jx into namespace jx
using stable version 2.0.108 from charts of jenkins-x/jenkins-x-platform from /Users/omedina/.jx/jenkins-x-versions
Installing jenkins-x-platform version: 2.0.108
Adding values file /Users/omedina/.jx/cloud-environments/env-gke/myvalues.yaml
Adding values file /Users/omedina/.jx/adminSecrets.yaml
Adding values file /Users/omedina/.jx/extraValues.yaml
Adding values file /Users/omedina/.jx/cloud-environments/env-gke/secrets.yaml
Current configuration dir: /Users/omedina/.jx
versionRepository: https://github.com/jenkins-x/jenkins-x-versions.git git ref: 
Deleting and cloning the Jenkins X versions repo
Cloning the Jenkins X versions repo https://github.com/jenkins-x/jenkins-x-versions.git with ref refs/heads/master to /Users/omedina/.jx/jenkins-x-versions
Enumerating objects: 206, done.
Counting objects: 100% (206/206), done.
Compressing objects: 100% (89/89), done.
Total 1096 (delta 109), reused 185 (delta 101), pack-reused 890
Fetched chart jenkins-x/jenkins-x-platform to dir /var/folders/hb/w23l1cld7pl2h_rjqk_1yyrr0000gn/T/helm-template-workdir-231692500/jenkins-x/chartFiles/jenkins-x-platform
Generating Chart Template &#39;template --name jenkins-x --namespace jx /var/folders/hb/w23l1cld7pl2h_rjqk_1yyrr0000gn/T/helm-template-workdir-231692500/jenkins-x/chartFiles/jenkins-x-platform --output-dir /var/folders/hb/w23l1cld7pl2h_rjqk_1yyrr0000gn/T/helm-template-workdir-231692500/jenkins-x/output --debug --values /Users/omedina/.jx/cloud-environments/env-gke/myvalues.yaml --values /Users/omedina/.jx/adminSecrets.yaml --values /Users/omedina/.jx/extraValues.yaml --values /Users/omedina/.jx/cloud-environments/env-gke/secrets.yaml&#39;
Applying generated chart jenkins-x/jenkins-x-platform YAML via kubectl in dir: /var/folders/hb/w23l1cld7pl2h_rjqk_1yyrr0000gn/T/helm-template-workdir-231692500/jenkins-x/output
deployment.extensions/jenkins-x-chartmuseum created
persistentvolumeclaim/jenkins-x-chartmuseum created
secret/jenkins-x-chartmuseum created
service/jenkins-x-chartmuseum created
role.rbac.authorization.k8s.io/cleanup created
rolebinding.rbac.authorization.k8s.io/cleanup created
serviceaccount/cleanup created
clusterrole.rbac.authorization.k8s.io/controllerbuild-jx created
clusterrolebinding.rbac.authorization.k8s.io/controllerbuild-jx created
deployment.apps/jenkins-x-controllerbuild created
role.rbac.authorization.k8s.io/controllerbuild created
rolebinding.rbac.authorization.k8s.io/controllerbuild created
serviceaccount/jenkins-x-controllerbuild created
clusterrole.rbac.authorization.k8s.io/controllercommitstatus-jx created
clusterrolebinding.rbac.authorization.k8s.io/controllercommitstatus-jx created
deployment.apps/jenkins-x-controllercommitstatus created
role.rbac.authorization.k8s.io/controllercommitstatus created
rolebinding.rbac.authorization.k8s.io/controllercommitstatus created
serviceaccount/jenkins-x-controllercommitstatus created
clusterrole.rbac.authorization.k8s.io/controllerrole-jx created
clusterrolebinding.rbac.authorization.k8s.io/controllerrole-jx created
deployment.apps/jenkins-x-controllerrole created
role.rbac.authorization.k8s.io/controllerrole created
rolebinding.rbac.authorization.k8s.io/controllerrole created
serviceaccount/jenkins-x-controllerrole created
clusterrole.rbac.authorization.k8s.io/controllerteam-jx created
clusterrolebinding.rbac.authorization.k8s.io/controllerteam-jx created
deployment.apps/jenkins-x-controllerteam created
role.rbac.authorization.k8s.io/controllerteam created
rolebinding.rbac.authorization.k8s.io/controllerteam created
serviceaccount/jenkins-x-controllerteam created
clusterrole.rbac.authorization.k8s.io/controllerworkflow-jx created
clusterrolebinding.rbac.authorization.k8s.io/controllerworkflow-jx created
deployment.apps/jenkins-x-controllerworkflow created
role.rbac.authorization.k8s.io/controllerworkflow created
rolebinding.rbac.authorization.k8s.io/controllerworkflow created
serviceaccount/jenkins-x-controllerworkflow created
configmap/jenkins-x-docker-registry-config created
deployment.extensions/jenkins-x-docker-registry created
persistentvolumeclaim/jenkins-x-docker-registry created
secret/jenkins-x-docker-registry-secret created
service/jenkins-x-docker-registry created
configmap/exposecontroller created
role.rbac.authorization.k8s.io/expose created
rolebinding.rbac.authorization.k8s.io/expose created
serviceaccount/expose created
clusterrole.rbac.authorization.k8s.io/gcactivities-jx created
clusterrolebinding.rbac.authorization.k8s.io/gcactivities-jx created
cronjob.batch/jenkins-x-gcactivities created
role.rbac.authorization.k8s.io/gcactivities created
rolebinding.rbac.authorization.k8s.io/gcactivities created
serviceaccount/jenkins-x-gcactivities created
cronjob.batch/jenkins-x-gcpods created
role.rbac.authorization.k8s.io/gcpods created
rolebinding.rbac.authorization.k8s.io/gcpods created
serviceaccount/jenkins-x-gcpods created
clusterrole.rbac.authorization.k8s.io/gcpreviews-jx created
clusterrolebinding.rbac.authorization.k8s.io/gcpreviews-jx created
cronjob.batch/jenkins-x-gcpreviews created
role.rbac.authorization.k8s.io/gcpreviews created
rolebinding.rbac.authorization.k8s.io/gcpreviews created
serviceaccount/jenkins-x-gcpreviews created
deployment.extensions/jenkins-x-heapster created
clusterrolebinding.rbac.authorization.k8s.io/jenkins-x-heapster created
role.rbac.authorization.k8s.io/jenkins-x-heapster-pod-nanny created
rolebinding.rbac.authorization.k8s.io/jenkins-x-heapster-pod-nanny created
service/heapster created
serviceaccount/jenkins-x-heapster created
deployment.extensions/jenkins-x-mongodb created
persistentvolumeclaim/jenkins-x-mongodb created
secret/jenkins-x-mongodb created
service/jenkins-x-mongodb created
configmap/jenkins-x-monocular-api-config created
deployment.extensions/jenkins-x-monocular-api created
service/jenkins-x-monocular-api created
deployment.extensions/jenkins-x-monocular-prerender created
service/jenkins-x-monocular-prerender created
configmap/jenkins-x-monocular-ui-config created
deployment.extensions/jenkins-x-monocular-ui created
service/jenkins-x-monocular-ui created
configmap/jenkins-x-monocular-ui-vhost created
configmap/nexus created
deployment.extensions/jenkins-x-nexus created
persistentvolumeclaim/jenkins-x-nexus created
secret/nexus created
service/nexus created
role.rbac.authorization.k8s.io/committer created
clusterrolebinding.rbac.authorization.k8s.io/jenkins-x-team-controller created
configmap/jenkins-x-team-controller created
secret/jenkins-docker-cfg created
configmap/jenkins-x-devpod-config created
configmap/jenkins-x-docker-registry created
configmap/jenkins-x-extensions created
secret/jx-basic-auth created
role.rbac.authorization.k8s.io/jx-view created
secret/kaniko-secret created
secret/jenkins-maven-settings created
secret/jenkins-npm-token created
role.rbac.authorization.k8s.io/owner created
configmap/jenkins-x-pod-template-dlang created
configmap/jenkins-x-pod-template-go created
configmap/jenkins-x-pod-template-python created
configmap/jenkins-x-pod-template-newman created
configmap/jenkins-x-pod-template-terraform created
configmap/jenkins-x-pod-template-maven created
configmap/jenkins-x-pod-template-rust created
configmap/jenkins-x-pod-template-python2 created
configmap/jenkins-x-pod-template-nodejs created
configmap/jenkins-x-pod-template-aws-cdk created
configmap/jenkins-x-pod-template-gradle created
configmap/jenkins-x-pod-template-maven-java11 created
configmap/jenkins-x-pod-template-scala created
configmap/jenkins-x-pod-template-python37 created
configmap/jenkins-x-pod-template-promote created
configmap/jenkins-x-pod-template-maven-nodejs created
configmap/jenkins-x-pod-template-swift created
configmap/jenkins-x-pod-template-jx-base created
configmap/jenkins-x-pod-template-ruby created
secret/jenkins-release-gpg created
secret/jenkins-ssh-config created
role.rbac.authorization.k8s.io/viewer created

Applying Helm hook post-upgrade YAML via kubectl in file: /var/folders/hb/w23l1cld7pl2h_rjqk_1yyrr0000gn/T/helm-template-workdir-231692500/jenkins-x/helmHooks/jenkins-x-platform/charts/expose/templates/job.yaml
job.batch/expose created

Waiting for helm post-upgrade hook Job expose to complete before removing it
Deleting helm hook sources from file: /var/folders/hb/w23l1cld7pl2h_rjqk_1yyrr0000gn/T/helm-template-workdir-231692500/jenkins-x/helmHooks/jenkins-x-platform/charts/expose/templates/job.yaml
job.batch &amp;quot;expose&amp;quot; deleted
Removing Kubernetes resources from older releases using selector: jenkins.io/chart-release=jenkins-x,jenkins.io/version!=2.0.108 from all pvc configmap release sa role rolebinding secret
Removing Kubernetes resources from older releases using selector: jenkins.io/chart-release=jenkins-x,jenkins.io/version!=2.0.108,jenkins.io/namespace=jx from clusterrole clusterrolebinding
WARNING: waiting for install to be ready, if this is the first time then it will take a while to download images
Jenkins X deployments ready in namespace jx
Configuring the TeamSettings for ImportMode YAML


	********************************************************

	     NOTE: Your admin password is: Password1

	********************************************************

	
Creating default staging and production environments
? Select the organization where you want to create the environment repository: jenkins-oscar
Using Git provider GitHub at https://github.com


About to create repository environment-sposcar-staging on server https://github.com with user jenkinsx-bot-sposcar


Creating repository jenkins-oscar/environment-sposcar-staging
Creating Git repository jenkins-oscar/environment-sposcar-staging
Pushed Git repository to https://github.com/jenkins-oscar/environment-sposcar-staging

Creating staging Environment in namespace jx
Created environment staging
Namespace jx-staging created 
 
Creating GitHub webhook for jenkins-oscar/environment-sposcar-staging for url http://hook.jx.sharepointoscar.com/hook
Using Git provider GitHub at https://github.com


About to create repository environment-sposcar-production on server https://github.com with user jenkinsx-bot-sposcar


Creating repository jenkins-oscar/environment-sposcar-production
Creating Git repository jenkins-oscar/environment-sposcar-production
Pushed Git repository to https://github.com/jenkins-oscar/environment-sposcar-production

Creating production Environment in namespace jx
Created environment production
Namespace jx-production created 
 
Creating GitHub webhook for jenkins-oscar/environment-sposcar-production for url http://hook.jx.sharepointoscar.com/hook

Jenkins X installation completed successfully


	********************************************************

	     NOTE: Your admin password is: Password1

	********************************************************

	

Your Kubernetes context is now set to the namespace: jx 
To switch back to your original namespace use: jx namespace default
Or to use this context/namespace in just one terminal use: jx shell
For help on switching contexts see: https://jenkins-x.io/docs/using/tasks/kube-context/

To import existing projects into Jenkins:       jx import
To create a new Spring Boot microservice:       jx create spring -d web -d actuator
To create a new microservice from a quickstart: jx create quickstart
Fetching cluster endpoint and auth data.
kubeconfig entry generated for sposcar.
Context &amp;quot;gke_jenkinsx-dev_us-west1-a_sposcar&amp;quot; modified.
NAME              HOSTS                                    ADDRESS       PORTS   AGE
chartmuseum       chartmuseum.jx.sharepointoscar.com       34.83.54.46   80      4m
deck              deck.jx.sharepointoscar.com              34.83.54.46   80      4m
docker-registry   docker-registry.jx.sharepointoscar.com   34.83.54.46   80      4m
hook              hook.jx.sharepointoscar.com              34.83.54.46   80      4m
monocular         monocular.jx.sharepointoscar.com         34.83.54.46   80      4m
nexus             nexus.jx.sharepointoscar.com             34.83.54.46   80      4m
tide              tide.jx.sharepointoscar.com              34.83.54.46   80      4m

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

&lt;strong&gt;NOTE:&lt;/strong&gt; The final and successful output should always show us the endpoint URLs.  If you see something else, most likely your installation did not finish properly.  Typically, it helps to delete the &lt;code&gt;~/.jx&lt;/code&gt; folder before trying another install.  Especially if you&amp;rsquo;ve run this command multiple times, there are multiple environments created and you should &lt;strong&gt;only&lt;/strong&gt; have the ones Jenkins X is actually using to keep things working properly in my opinion.
&lt;/div&gt;


&lt;p&gt;So we now have a clean environment, one thing we can do to simply test our endpoints, is do an &lt;strong&gt;nslookup&lt;/strong&gt; against any of the urls in the final output.  This helps ensure that at least DNS is setup properly.&lt;/p&gt;

&lt;h1 id=&#34;creating-a-quickstart-let-s-pop-the-hood&#34;&gt;Creating A QuickStart - Let&amp;rsquo;s Pop The Hood!&lt;/h1&gt;

&lt;p&gt;We are ready to try out the entire CI/CD process, which includes seeing the Bot work properly.  To get started, we will create a &lt;code&gt;quickstart&lt;/code&gt; based on the &lt;code&gt;NodeJS&lt;/code&gt; language.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; $ omedina$ jx create quickstart
Using Git provider GitHub at https://github.com
? Git user name?  [Use arrows to move, space to select, type to filter]
&amp;gt; sharepointoscar
  jenkinsx-bot-sposcar

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will select the personal Github account in this step.&lt;/p&gt;



&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;However, if you get a &lt;em&gt;warning&lt;/em&gt; message stating that the Github server username is not set, then the setup somehow was not set correctly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/getting-started/warning_no_username_git_server.png&#34;/&gt;
&lt;figcaption&gt;
&lt;h5&gt;Figure 2 - Github Server username not set&lt;/h5&gt;
&lt;/figcaption&gt;
You can verify that the bot account is setup by checking the values of the secret called &lt;code&gt;jx-pipeline-git-github-github&lt;/code&gt;.  In this scenario, it is &lt;code&gt;jenkinsx-bot-sposcar&lt;/code&gt; as expected.&lt;/p&gt;

&lt;/div&gt;


&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;About to create repository  on server https://github.com with user sharepointoscar
? Which organisation do you want to use?  [Use arrows to move, space to select, type to filter]
  SPRWD
  SharePointAce
&amp;gt; jenkins-oscar
  sharepointoscar

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Select the Github Organization.  In this scenario, it is &lt;code&gt;jenkins-oscar&lt;/code&gt; where the bot account and the personal github accounts are members.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Creating repository jenkins-oscar/node-widget-app
? select the quickstart you wish to create  [Use arrows to move, space to select, type to filter]
  golang-http
  jenkins-cwp-quickstart
  jenkins-quickstart
&amp;gt; node-http
  node-http-watch-pipeline-activity
  open-liberty
  python-http

The directory /Users/omedina/git-repos/node-widget-app is not yet using git
? Would you like to initialise git now? Yes
? Commit message:  Initial import


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Select &lt;code&gt;node-http&lt;/code&gt; for the quickstart builder type. Hit enter for both of the following questions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;replacing placeholders in directory /Users/omedina/git-repos/node-widget-app
app name: node-widget-app, git server: github.com, org: jenkins-oscar, Docker registry org: jenkins-oscar
skipping directory &amp;quot;/Users/omedina/git-repos/node-widget-app/.git&amp;quot;
Pushed Git repository to https://github.com/jenkins-oscar/node-widget-app

Automatically adding the pipeline user: jenkinsx-bot-sposcar as a collaborator.
Creating GitHub webhook for jenkins-oscar/node-widget-app for url http://hook.jx.sharepointoscar.com/hook

Watch pipeline activity via:    jx get activity -f node-widget-app -w
Browse the pipeline log via:    jx get build logs jenkins-oscar/node-widget-app/master
Open the Jenkins console via    jx console
You can list the pipelines via: jx get pipelines
When the pipeline is complete:  jx get applications

For more help on available commands see: https://jenkins-x.io/docs/using/tasks/browsing/

Note that your first pipeline may take a few minutes to start while the necessary images get downloaded!

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Final output from creating the Quickstart should look like above.&lt;/p&gt;

&lt;h2 id=&#34;first-pipeline-run&#34;&gt;First Pipeline Run&lt;/h2&gt;

&lt;p&gt;Since we just created the new app, if we check on the app activtiies, we will see that there is a pull request. &lt;code&gt;jx get activity -f node-widget-app -w&lt;/code&gt; and the app is now version &lt;code&gt;0.0.1&lt;/code&gt; and it has been deployed to our &lt;strong&gt;Staging&lt;/strong&gt; environment.&lt;/p&gt;

&lt;h3 id=&#34;deployed-to-staging&#34;&gt;Deployed to Staging&lt;/h3&gt;

&lt;p&gt;We can also check what applications are deployed, we should have version &lt;code&gt;0.0.1&lt;/code&gt; in our staging environment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;APPLICATION        STAGING PODS URL
jx-node-widget-app 0.0.1   1/1  http://node-widget-app.jx-staging.sharepointoscar.com
jx-testapp2        0.0.2   1/1  http://testapp2.jx-staging.sharepointoscar.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our app is indeed in our Staging environment and accessible at (in this scenario) &lt;code&gt;http://node-widget-app.jx-staging.sharepointoscar.com&lt;/code&gt;&lt;/p&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

&lt;strong&gt;NOTE:&lt;/strong&gt; There is a command &lt;code&gt;jx get apps&lt;/code&gt;.  Do not confuse the command we executed with this one.  This command actually obtains &lt;code&gt;apps&lt;/code&gt; that have been installed.  For example, on our serverless topology, we may opt to install a static jenkins as well by executing &lt;code&gt;jx add app jx-app-jenkins-x&lt;/code&gt; and this will deploy a static jenkins which can now be used to put some apps thourgh either Tekton or this static jenkins master.
&lt;/div&gt;


&lt;h2 id=&#34;modifying-the-app&#34;&gt;Modifying The App&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s modify the app to trigger a PR and see how the Bot reacts.  To make a change, we create a feature branch as per the usual developer workflow and execute &lt;code&gt;git checkout -b feature1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next we change the home page verbiabe a bit, then execute &lt;code&gt;git add . &amp;amp;&amp;amp; git commit -m &amp;quot;changed homepage&amp;quot;&lt;/code&gt;.  Next, we push our changes with &lt;code&gt;git push --set-upstream origin feature1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We should now see on Github UI the Pull Request dialog.  Click that familiar Pull Request button and create it!  This triggers a &lt;strong&gt;Tekton&lt;/strong&gt; pipeline which you can see status by tailing the &lt;code&gt;activties&lt;/code&gt; for that app with this command &lt;code&gt;jx get activity -f node-widget-app -w&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;preview-environment&#34;&gt;Preview Environment&lt;/h2&gt;

&lt;p&gt;Because we made a change to the app via a &lt;strong&gt;Pull Request&lt;/strong&gt;, we are now shown the Bot in action, and it is telling us that the &lt;strong&gt;PR needs approval&lt;/strong&gt; in addition, it has given us a way to see the changes, how dope is that?&lt;/p&gt;

&lt;p&gt;Our PR should look as shown on the video below.&lt;/p&gt;

&lt;video id=&#34;PR_Before_Approval&#34; width=&#34;800&#34; src=&#34;/images/getting-started/PR_BeforeApproval.mov&#34; controls&gt;&lt;/video&gt;

&lt;h2 id=&#34;approving-the-pr-as-the-approver&#34;&gt;Approving the PR (as the approver)&lt;/h2&gt;

&lt;p&gt;We now are ready to approve the PR, because after all, that nice change to the home page pleases our stakeholders after they were able to see the changes.  To approve, we simply comment exactly the following command on the Github comment box: &lt;code&gt;/approve&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Approver&lt;/strong&gt; in this scenario is the &lt;code&gt;sharepointoscar&lt;/code&gt; Github account, ideally it would be someone other than the developer itself.&lt;/p&gt;

&lt;video id=&#34;PR_After_Approval&#34; width=&#34;800&#34; src=&#34;/images/getting-started/PR_AfterApproval.mov&#34; controls&gt;&lt;/video&gt;

&lt;h3 id=&#34;bot-activity-on-github&#34;&gt;Bot Activity on Github&lt;/h3&gt;

&lt;p&gt;We can take a quick look at what the bot has been up to.  Here is all the activity thus far.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/getting-started/bot_in_action.png&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In this tutorial, we walked through a full setup of Jenkins X on GKE.  We ensured that the bot account was specified at setup time.  We then created an app, and put it through CI/CD which allowed us to see the Bot in action, execute an approval command and deploy the app changes to our Staging environment.&lt;/p&gt;

&lt;p&gt;It is always best to properly setup Jenkins with the correct Github accounts and Organization as this will give you the exact experience as a developer when interacting with Jenkins X via Github PRs.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/SharePointOscar&#34; target=&#34;_blank&#34;&gt;@SharePointOscar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Developer Advocate | Jenkins X&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Jenkins X Video Tutorial Series - Deploy a Java Gradle app and add custom Tekton Steps To Your Pipeline</title>
      <link>/docs/managing-jx/tutorials/java-gradle-app/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/tutorials/java-gradle-app/</guid>
      <description>
        
        
        &lt;p&gt;&lt;/br&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/scFfqwgSA5M&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Talks and Conferences</title>
      <link>/docs/getting-started/demos-talks-posts/talks/</link>
      <pubDate>Sat, 05 May 2018 10:36:00 +0200</pubDate>
      
      <guid>/docs/getting-started/demos-talks-posts/talks/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://devopsworldjenkinsworld2019lisbo.sched.com/event/VDQ0/progressive-delivery-with-jenkins-x&#34; target=&#34;_blank&#34;&gt;2019-12-05 Progressive Delivery with Jenkins X&lt;/a&gt; at &lt;a href=&#34;https://www.cloudbees.com/devops-world&#34; target=&#34;_blank&#34;&gt;Devops World, Lisboa&lt;/a&gt; by &lt;a href=&#34;https://csanchez.org&#34; target=&#34;_blank&#34;&gt;Carlos Sanchez&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://devopsconference.de/kubernetes-ecosystem/gitops-by-courtesy-of-jenkins-x/&#34; target=&#34;_blank&#34;&gt;2019-12-02/3/4/5 GitOps by courtesy of Jenkins-X&lt;/a&gt; at &lt;a href=&#34;https://devopsconference.de/&#34; target=&#34;_blank&#34;&gt;DevOpsCon 2019, München (Germany)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/GerdAschemann&#34; target=&#34;_blank&#34;&gt;Gerd Aschemann&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://cfp.devoxx.ma/2019/speaker/carlos_sanchez&#34; target=&#34;_blank&#34;&gt;2019-11-13 Progressive Delivery: Continuous Delivery the Right Way&lt;/a&gt; at &lt;a href=&#34;https://www.devoxx.ma/&#34; target=&#34;_blank&#34;&gt;Devoxx Morocco, Agadir&lt;/a&gt; by &lt;a href=&#34;https://csanchez.org&#34; target=&#34;_blank&#34;&gt;Carlos Sanchez&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://oredev.org/line-up/carlos-sanchez&#34; target=&#34;_blank&#34;&gt;2019-11-06 Jenkins X: Progressive Delivery for Kubernetes&lt;/a&gt; at &lt;a href=&#34;https://oredev.org&#34; target=&#34;_blank&#34;&gt;Oredev, Malmo&lt;/a&gt; by &lt;a href=&#34;https://csanchez.org&#34; target=&#34;_blank&#34;&gt;Carlos Sanchez&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://helmsummit2019.sched.com/event/S8sk/dev-and-run-small-projects-on-k8s-with-gitops-and-jenkins-x-gerd-aschemann-independent&#34; target=&#34;_blank&#34;&gt;2019-09-12 Dev and Run Small Projects on K8S with GitOps and Jenkins-X&lt;/a&gt; at &lt;a href=&#34;https://events.linuxfoundation.org/events/helm-summit-2019/&#34; target=&#34;_blank&#34;&gt;Helm Summit, Amsterdam (The Netherlands))&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/GerdAschemann&#34; target=&#34;_blank&#34;&gt;Gerd Aschemann&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://2019.javazone.no/program/d8f893f0-3e08-41ef-9ec6-fe2fa93cd4ce&#34; target=&#34;_blank&#34;&gt;2019-09-11 Jenkins X: Progressive Delivery for Kubernetes&lt;/a&gt; at &lt;a href=&#34;https://2019.javazone.no&#34; target=&#34;_blank&#34;&gt;JavaZone&lt;/a&gt; &lt;a href=&#34;https://vimeo.com/362768726&#34; target=&#34;_blank&#34;&gt;Vimeo 🎥&lt;/a&gt; by &lt;a href=&#34;https://csanchez.org&#34; target=&#34;_blank&#34;&gt;Carlos Sanchez&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://programm.doag.org/godevops/2019/#/scheduledEvent/587266&#34; target=&#34;_blank&#34;&gt;2019-09-02 Jenkins X - Continuously Driving the Kloud&lt;/a&gt; at &lt;a href=&#34;https://godevops.doag.org/de/home/&#34; target=&#34;_blank&#34;&gt;GoDevOps 2019, Berlin (Germany)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/GerdAschemann&#34; target=&#34;_blank&#34;&gt;Gerd Aschemann&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://java.de/roller/blog/page/stammtisch_goettingen&#34; target=&#34;_blank&#34;&gt;2019-08-21 Jenkins X - Continuously Delivery for the Kloud&lt;/a&gt; at &lt;a href=&#34;http://java.de/&#34; target=&#34;_blank&#34;&gt;Java User Group Deutschland/Göttingen (Germany)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/GerdAschemann&#34; target=&#34;_blank&#34;&gt;Gerd Aschemann&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://devopsworldjenkinsworld2019.sched.com/event/TQb8/gitops&#34; target=&#34;_blank&#34;&gt;2019-08-14 GitOps&lt;/a&gt; at &lt;a href=&#34;https://www.cloudbees.com/devops-world/san-francisco&#34; target=&#34;_blank&#34;&gt;DevOps World San Francisco&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://devopsworldjenkinsworld2019.sched.com/event/SeVd/ten-commandments-of-gitops-applied-to-continuous-delivery&#34; target=&#34;_blank&#34;&gt;2019-08-14 Ten Commandments Of GitOps Applied To Continuous Delivery&lt;/a&gt; at &lt;a href=&#34;https://www.cloudbees.com/devops-world/san-francisco&#34; target=&#34;_blank&#34;&gt;DevOps World San Francisco&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://devopsworldjenkinsworld2019.sched.com/event/S6hP/400-continuous-delivery-with-jenkins-x&#34; target=&#34;_blank&#34;&gt;2019-08-13 Continuous Delivery with Jenkins X&lt;/a&gt; at &lt;a href=&#34;https://www.cloudbees.com/devops-world/san-francisco&#34; target=&#34;_blank&#34;&gt;DevOps World San Francisco&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://devopsworldjenkinsworld2019.sched.com/event/S6hG/400-continuous-delivery-with-jenkins-x&#34; target=&#34;_blank&#34;&gt;2019-08-12 Continuous Delivery with Jenkins X&lt;/a&gt; at &lt;a href=&#34;https://www.cloudbees.com/devops-world/san-francisco&#34; target=&#34;_blank&#34;&gt;DevOps World San Francisco&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.meetup.com/Java-User-Group-Saarland-jugsaar/events/262962734/&#34; target=&#34;_blank&#34;&gt;2019-08-08 Jenkins-X - CD for the Kloud&lt;/a&gt; at &lt;a href=&#34;https://www.meetup.com/Java-User-Group-Saarland-jugsaar/&#34; target=&#34;_blank&#34;&gt;Java User Group Saarland (Germany)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/GerdAschemann&#34; target=&#34;_blank&#34;&gt;Gerd Aschemann&lt;/a&gt; (&lt;a href=&#34;http://aschemann.net/gerd/publications/jx-talk-jugsb-2019&#34; target=&#34;_blank&#34;&gt;Slides&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2019-07-18 Progressive Delivery en Kubernetes (Spanish) &lt;a href=&#34;https://www.youtube.com/watch?v=u7Z1V_NcmPY&amp;amp;list=PLHsuXkXI4xdjGlGkCBdxIAmkzfWXqsUrO&amp;amp;index=3&#34; target=&#34;_blank&#34;&gt;YouTube 🎥&lt;/a&gt; by &lt;a href=&#34;https://csanchez.org&#34; target=&#34;_blank&#34;&gt;Carlos Sanchez&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2019-07-06 Jenkins X: Why, What, And How at DOIS Beijing by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2019-07-04 Jenkins X Workshop at DOIS Beijing by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2019-06-19 The recipe for continuous delivery at &lt;a href=&#34;https://nadevops.com/eurodog&#34; target=&#34;_blank&#34;&gt;EuroDog Brussels&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://cdsummitchina19.sched.com/event/QaSO/progressive-delivery-continuous-delivery-the-right-way&#34; target=&#34;_blank&#34;&gt;2019-06-24 Progressive Delivery: Continuous Delivery the Right Way&lt;/a&gt; at &lt;a href=&#34;https://cdsummitchina19.sched.com&#34; target=&#34;_blank&#34;&gt;CDSummit China&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=-3VHVsgBTyo&amp;amp;list=PLHsuXkXI4xdjGlGkCBdxIAmkzfWXqsUrO&amp;amp;index=2&#34; target=&#34;_blank&#34;&gt;YouTube 🎥&lt;/a&gt; by &lt;a href=&#34;https://csanchez.org&#34; target=&#34;_blank&#34;&gt;Carlos Sanchez&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.meetup.com/Cloud-Native-Computing-Bern/events/260536132/&#34; target=&#34;_blank&#34;&gt;2019-06-13 The recipe for continuous delivery&lt;/a&gt; at &lt;a href=&#34;https://www.meetup.com/Cloud-Native-Computing-Bern/&#34; target=&#34;_blank&#34;&gt;Cloud Native Bern&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.meetup.com/Lausanne-CI-CD-and-DevOps/events/261586221/&#34; target=&#34;_blank&#34;&gt;2019-06-12 The recipe for continuous delivery&lt;/a&gt; at &lt;a href=&#34;https://www.meetup.com/Lausanne-CI-CD-and-DevOps/&#34; target=&#34;_blank&#34;&gt;Lausanne CI/CD and DevOps&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4EyTGYB7GvA&#34; target=&#34;_blank&#34;&gt;2019-07-04 Modern CI/CD with Tekton and Prow Automated via Jenkins X&lt;/a&gt; at &lt;a href=&#34;https://events.linuxfoundation.org/events/kubecon-cloudnativecon-europe-2019/&#34; target=&#34;_blank&#34;&gt;KubeCon (Barcelona)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/bobcatwilson&#34; target=&#34;_blank&#34;&gt;Christie Wilson &lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jdrawlings&#34; target=&#34;_blank&#34;&gt;James Rawlings&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.java-forum-stuttgart.de/de/Vortr%E4ge+von+16.40+-+17.25+Uhr.html#D7&#34; target=&#34;_blank&#34;&gt;2019-07-04 Jenkins-X - CI/CD für die Kloud (German)&lt;/a&gt; at &lt;a href=&#34;https://www.java-forum-stuttgart.de/de/Konferenz.html&#34; target=&#34;_blank&#34;&gt;Java Forum Stuttgart (Germany)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/GerdAschemann&#34; target=&#34;_blank&#34;&gt;Gerd Aschemann&lt;/a&gt; (&lt;a href=&#34;http://aschemann.net/gerd/publications/jx-talk-javaforum-stuttgart-2019/&#34; target=&#34;_blank&#34;&gt;Slides&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://containerdays.sched.com/event/Q4Oc/gitops-by-courtesy-of-jenkins-x&#34; target=&#34;_blank&#34;&gt;2019-06-25 GitOps by courtesy of Jenkins-X&lt;/a&gt; at &lt;a href=&#34;https://www.containerdays.io/¡&#34; target=&#34;_blank&#34;&gt;Container Days, Hamburg (Germany)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/GerdAschemann&#34; target=&#34;_blank&#34;&gt;Gerd Aschemann&lt;/a&gt; (&lt;a href=&#34;http://aschemann.net/gerd/publications/jx-talk-condays-2019/&#34; target=&#34;_blank&#34;&gt;Slides&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://sched.co/Nrmd&#34; target=&#34;_blank&#34;&gt;2019-06-24 Serverless Jenkins on Kubernetes - Jenkins X&lt;/a&gt; at &lt;a href=&#34;https://www.lfasiallc.com/events/kubecon-cloudnativecon-china-2019/&#34; target=&#34;_blank&#34;&gt;KubeCon CloudNativeCon 2019 (China)&lt;/a&gt; by &lt;a href=&#34;https://github.com/runzexia&#34; target=&#34;_blank&#34;&gt;RunZe Xia&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.eventbrite.com/e/zurich-devops-and-hops-tickets-61928848854#&#34; target=&#34;_blank&#34;&gt;2019-06-11 The Recipe for Continuous Delivery&lt;/a&gt; at &lt;a href=&#34;https://nadevops.com/eurodog&#34; target=&#34;_blank&#34;&gt;EuroDog Zurich&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2019-06-06 Talk: Jenkins X: Toward a Cloud-Native Jenkins at &lt;a href=&#34;https://events.wearedevelopers.com/&#34; target=&#34;_blank&#34;&gt;WeAreDevelopers&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2019-06-05 Workshop: Cloud-Native Kubernetes-First Continuous Delivery With Jenkins X, Kubernetes, And Friends at &lt;a href=&#34;https://events.wearedevelopers.com/&#34; target=&#34;_blank&#34;&gt;WeAreDevelopers&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.devops-essentials.de/lecture.php?id=7929-continuous-delivery-mit-jenkins-x-und&#34; target=&#34;_blank&#34;&gt;2019-06-06 Continuous Delivery mit Jenkins X und Kubernetes&lt;/a&gt; at &lt;a href=&#34;https://www.devops-essentials.de/&#34; target=&#34;_blank&#34;&gt;DevOps Essentials 2019&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/NicolasByl&#34; target=&#34;_blank&#34;&gt;Nicolas Byl&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2019-05-30: Cloud-Native Kubernetes-First Continuous Delivery With Jenkins X, Kubernetes, And Friends at &lt;a href=&#34;https://dev.shiftconf.co/&#34; target=&#34;_blank&#34;&gt;ShiftDev&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.jbcnconf.com/2019/infoTalk.html?id=5cd1f98438da161cb0381424&#34; target=&#34;_blank&#34;&gt;2019-05-27: Running Serverless Continuous Delivery&lt;/a&gt; at &lt;a href=&#34;http://www.jbcnconf.com/2019/&#34; target=&#34;_blank&#34;&gt;JBCNCconf&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://jnation.pt/speakers/carlos-sanchez/&#34; target=&#34;_blank&#34;&gt;2019-06-04 Jenkins X: Progressive Delivery for Kubernetes&lt;/a&gt; at &lt;a href=&#34;https://jnation.pt&#34; target=&#34;_blank&#34;&gt;JNation (Coimbra, Portugal)&lt;/a&gt; by &lt;a href=&#34;https://csanchez.org&#34; target=&#34;_blank&#34;&gt;Carlos Sanchez&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://gr8conf.eu/talks/760&#34; target=&#34;_blank&#34;&gt;2019-05-28 GitOps by courtesy of Jenkins-X&lt;/a&gt; at &lt;a href=&#34;https://gr8conf.eu/&#34; target=&#34;_blank&#34;&gt;gr8conf (Copenhagen/Denmark)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/GerdAschemann&#34; target=&#34;_blank&#34;&gt;Gerd Aschemann&lt;/a&gt; (&lt;a href=&#34;http://aschemann.net/gerd/publications/jx-talk-gr8conf-2019/&#34; target=&#34;_blank&#34;&gt;Slides&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://voxxeddays.com/minsk/&#34; target=&#34;_blank&#34;&gt;2019-04-24 Jenkins X: Continous Delivery for Kubernetes&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=wb2PK5uf5uI&amp;amp;list=PLHsuXkXI4xdjGlGkCBdxIAmkzfWXqsUrO&amp;amp;index=4&#34; target=&#34;_blank&#34;&gt;YouTube 🎥&lt;/a&gt; at &lt;a href=&#34;https://voxxeddays.com/minsk/&#34; target=&#34;_blank&#34;&gt;Voxxed Days Minsk&lt;/a&gt; by &lt;a href=&#34;https://csanchez.org&#34; target=&#34;_blank&#34;&gt;Carlos Sanchez&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1mA0FDySf2t2sSjKKG2VOta8vDDiGsQytgxJ2iHBeDIs/edit#gid=0&amp;amp;range=D52:E52&#34; target=&#34;_blank&#34;&gt;2019-05-23 CI/CD on Kubernetes with Jenkins X&lt;/a&gt; at &lt;a href=&#34;http://gluecon.com/&#34; target=&#34;_blank&#34;&gt;GlueCon&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/duffn&#34; target=&#34;_blank&#34;&gt;Nicholas Duffy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://craft-conf.com/workshops&#34; target=&#34;_blank&#34;&gt;2019-05-07 Workshop: Continuous Deployment To Kubernetes&lt;/a&gt; at &lt;a href=&#34;https://craft-conf.com/&#34; target=&#34;_blank&#34;&gt;Craft (Budapest)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.meetup.com/Lisbon-Jenkins-Area-Meetup/events/259936138/?_xtd=gatlbWFpbF9jbGlja9oAJDM3ODY0M2Q4LWY3ZmItNGQ5ZS05YWNhLTQ2ZTM3ODdkZGY0Yg&#34; target=&#34;_blank&#34;&gt;2019-03-28 Cloud-Native Kubernetes-First Continuous Delivery With Jenkins X&lt;/a&gt; at &lt;a href=&#34;https://www.meetup.com/Lisbon-Jenkins-Area-Meetup/&#34; target=&#34;_blank&#34;&gt;Lisbon Jenkins Area Meetup&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.meetup.com/Barcelona-Jenkins-Area-Meetup/events/259869827/&#34; target=&#34;_blank&#34;&gt;2019-03-26 Ten Commandments Of GitOps Applied To Continuous Delivery&lt;/a&gt; at &lt;a href=&#34;https://www.meetup.com/Barcelona-Jenkins-Area-Meetup/&#34; target=&#34;_blank&#34;&gt;Barcelona Jenkins Area Meetup&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.meetup.com/DevOps-Freiburg/events/259091235/&#34; target=&#34;_blank&#34;&gt;2019-03-20 Cloud-Native Kubernetes-First Continuous Delivery With Jenkins X&lt;/a&gt; at &lt;a href=&#34;https://www.meetup.com/DevOps-Freiburg/&#34; target=&#34;_blank&#34;&gt;DevOps Meetup Freiburg&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://programm.javaland.eu/2019/#/scheduledEvent/569771&#34; target=&#34;_blank&#34;&gt;2019-03-19 Jenkins X - Continuously Driving the Kloud (German)&lt;/a&gt; at &lt;a href=&#34;https://www.javaland.eu&#34; target=&#34;_blank&#34;&gt;Javaland 2019 (Germany)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/GerdAschemann&#34; target=&#34;_blank&#34;&gt;Gerd Aschemann&lt;/a&gt; (&lt;a href=&#34;http://aschemann.net/gerd/publications/jx-talk-javaland-2019/&#34; target=&#34;_blank&#34;&gt;Slides&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.meetup.com/Dubai-Jenkins-Area-Meetup/events/258523035/&#34; target=&#34;_blank&#34;&gt;2019-03-06 Cloud Native CI/CD for Kubernetes with JenkinsX&lt;/a&gt; at &lt;a href=&#34;https://www.meetup.com/Dubai-Jenkins-Area-Meetup/&#34; target=&#34;_blank&#34;&gt;Jenkins Area Meetup(JAM) Dubai&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qconlondon.com/london2019/presentation/cloud-native-cicd-jenkins-x-and-knative-pipelines&#34; target=&#34;_blank&#34;&gt;2019-03-05 Cloud Native CI/CD with Jenkins X and Tekton Pipelines&lt;/a&gt; at &lt;a href=&#34;https://qconlondon.com/&#34; target=&#34;_blank&#34;&gt;QConLondon&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/jdrawlings&#34; target=&#34;_blank&#34;&gt;James Rawlings&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/bobcatwilson&#34; target=&#34;_blank&#34;&gt;Christie Wilson&lt;/a&gt; &lt;a href=&#34;https://qconlondon.com/system/files/presentation-slides/cloud_native_ci_cd_with_jenkins_x_and_knative_pipelines.pdf&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hrridH35y64&amp;amp;list=PLHsuXkXI4xdjGlGkCBdxIAmkzfWXqsUrO&amp;amp;t=0s&amp;amp;index=2&#34; target=&#34;_blank&#34;&gt;2019-02-28 Jenkins X: Continuous Delivery for Kubernetes&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=hrridH35y64&amp;amp;list=PLHsuXkXI4xdjGlGkCBdxIAmkzfWXqsUrO&amp;amp;t=0s&amp;amp;index=2&#34; target=&#34;_blank&#34;&gt;YouTube 🎥&lt;/a&gt; by &lt;a href=&#34;https://csanchez.org&#34; target=&#34;_blank&#34;&gt;Carlos Sanchez&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.meetup.com/Agile-Testing-Munich/events/258881963/&#34; target=&#34;_blank&#34;&gt;2019-02-26 GitOps by courtesy of Jenkins-X (German)&lt;/a&gt; at &lt;a href=&#34;https://www.meetup.com/Agile-Testing-Munich/&#34; target=&#34;_blank&#34;&gt;Agile Testing @Munich (Germany)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/GerdAschemann&#34; target=&#34;_blank&#34;&gt;Gerd Aschemann&lt;/a&gt; (&lt;a href=&#34;http://aschemann.net/gerd/publications/jx-talk-munich-agile-testing-2019/&#34; target=&#34;_blank&#34;&gt;Slides&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.meetup.com/Cloud-Native-Computing-Paris/events/258880938/&#34; target=&#34;_blank&#34;&gt;2019-02-19 Cloud Native Computing Paris: CI/CD with Jenkins X&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.xing.com/events/jenkins-continuously-driving-the-kloud-1995467?sc_o=si1942_com&#34; target=&#34;_blank&#34;&gt;2019-01-24 Jenkins X - Continuously Driving the Kloud (German)&lt;/a&gt; at &lt;a href=&#34;http://www.jug-n.de&#34; target=&#34;_blank&#34;&gt;JUG Metroplregion Nürnberg (Germany)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/GerdAschemann&#34; target=&#34;_blank&#34;&gt;Gerd Aschemann&lt;/a&gt; (&lt;a href=&#34;http://aschemann.net/gerd/publications/jx-talk-jug-met-n-2019/&#34; target=&#34;_blank&#34;&gt;Slides&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.slideshare.net/michaelneale/jenkins-x-intro-from-google-app-dev-conference&#34; target=&#34;_blank&#34;&gt;2019-01-23 Introduction to Jenkins X and opinionated CI/CD&lt;/a&gt; at Google Digital AppDev conference (Singapore) by &lt;a href=&#34;https://twitter.com/michaelneale&#34; target=&#34;_blank&#34;&gt;Michael Neale&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.meetup.com/de-DE/DevOps-Wuerzburg-Mainfranken/events/255614733/&#34; target=&#34;_blank&#34;&gt;2019-01-14 Jenkins X - Continuously Driving the Kloud (German)&lt;/a&gt; at &lt;a href=&#34;https://www.meetup.com/DevOps-Wuerzburg-Mainfranken/&#34; target=&#34;_blank&#34;&gt;DevOps Meetup Würzburg (Germany)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/GerdAschemann&#34; target=&#34;_blank&#34;&gt;Gerd Aschemann&lt;/a&gt; - (&lt;a href=&#34;https://www.youtube.com/watch?v=NDIut5uYVS0&#34; target=&#34;_blank&#34;&gt;Youtube Stream&lt;/a&gt;, &lt;a href=&#34;http://aschemann.net/gerd/publications/jx-talk-devops-wue-2019/&#34; target=&#34;_blank&#34;&gt;Slides&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.eventbrite.com/e/workshop-continuous-deployment-with-jenkins-x-kubernetes-and-friends-tickets-54562126790&#34; target=&#34;_blank&#34;&gt;2019-02-01 Continuous Deployment with Jenkins X, Kubernetes, and Friends&lt;/a&gt; at Fosdem, Brussels by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://sites.google.com/site/jugffm/home/19-12-2018-jenkins-x---continuously-driving-the-kloud&#34; target=&#34;_blank&#34;&gt;2018-12-19 Jenkins X - Continuously Driving the Kloud (German)&lt;/a&gt; at &lt;a href=&#34;https://sites.google.com/site/jugffm/home&#34; target=&#34;_blank&#34;&gt;JUG Frankfurt (Germany)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/GerdAschemann&#34; target=&#34;_blank&#34;&gt;Gerd Aschemann&lt;/a&gt; (&lt;a href=&#34;http://aschemann.net/gerd/publications/jx-talk-jugffm-2018/&#34; target=&#34;_blank&#34;&gt;Slides&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://sched.co/GrT2&#34; target=&#34;_blank&#34;&gt;2018-12-12 KubeCon NA Seattle: Jenkins X: Continuous Delivery for Kubernetes&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=IDEa8seAzVc&amp;amp;index=1&amp;amp;list=PLHsuXkXI4xdjGlGkCBdxIAmkzfWXqsUrO&#34; target=&#34;_blank&#34;&gt;YouTube 🎥&lt;/a&gt; by &lt;a href=&#34;https://csanchez.org&#34; target=&#34;_blank&#34;&gt;Carlos Sanchez&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.slideshare.net/YamamotoMasaki/jenkins-x-kubernetes&#34; target=&#34;_blank&#34;&gt;2018-12-05 Jenkins x Kubernetesが簡単だと思ったら大変だった話 (Japanese)&lt;/a&gt; at &lt;a href=&#34;https://containerdays.jp/&#34; target=&#34;_blank&#34;&gt;JapanContainerDays v18.12&lt;/a&gt;  &lt;a href=&#34;https://www.youtube.com/watch?v=3-1MKJE6_mI&#34; target=&#34;_blank&#34;&gt;YouTube 🎥&lt;/a&gt; by &lt;a href=&#34;https://blog.nnasaki.com/&#34; target=&#34;_blank&#34;&gt;Masaki Yamamoto&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.koliseo.com/events/commit-2018/r4p/5630471824211968/agenda#/5116072650866688/5742659054338048&#34; target=&#34;_blank&#34;&gt;2018-11-23 CommitConf Madrid: Jenkins X: Continuous Delivery for Kubernetes&lt;/a&gt; by &lt;a href=&#34;https://csanchez.org&#34; target=&#34;_blank&#34;&gt;Carlos Sanchez&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.hanbit.co.kr/store/education/edu_view.html?p_code=S8548956082&#34; target=&#34;_blank&#34;&gt;2018-11-17 Korea Developer Conference at Seoul: Jenkins X - automated CI/CD solution for cloud native applications on Kubernetes&lt;/a&gt; on &lt;a href=&#34;https://www.facebook.com/groups/jbossusergroup/&#34; target=&#34;_blank&#34;&gt;JBUG Korea&lt;/a&gt; with &lt;a href=&#34;https://www.slideshare.net/tedwon/jenkins-x-automated-cicd-solution-for-cloud-native-applications-on-kubernetes-123332546&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/tedwon&#34; target=&#34;_blank&#34;&gt;Ted Won&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.devopspro.ru/carlos-sanchez/&#34; target=&#34;_blank&#34;&gt;2018-11-15 DevOpsPro Moscow: Using Kubernetes for Continuous Integration and Continuous Delivery&lt;/a&gt; by &lt;a href=&#34;https://csanchez.org&#34; target=&#34;_blank&#34;&gt;Carlos Sanchez&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://linuxsuren.github.io/opensource/2018-KubeCon-Shanghai-jenkinsx.pdf&#34; target=&#34;_blank&#34;&gt;2018-11-14: Jenkins X at KubeCon CloudNativeCon China 2018&lt;/a&gt; by &lt;a href=&#34;https://github.com/linuxsuren&#34; target=&#34;_blank&#34;&gt;Zhao Xiaojie&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.meetup.com/munchen-jenkins-area-meetup/events/255633850/&#34; target=&#34;_blank&#34;&gt;2018-11-14 Meetup Munich: Continuous Applications Delivery for Kubernetes&lt;/a&gt; by &lt;a href=&#34;https://github.com/ccojocar&#34; target=&#34;_blank&#34;&gt;Cosmin Cojocar&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.continuouslifecycle.de/veranstaltung-7488-jenkins-x-%E2%80%93-continuously-driving-the-kloud.html?id=7488&#34; target=&#34;_blank&#34;&gt;2018-11-14 Jenkins X - Continuously Driving the Kloud (German)&lt;/a&gt; at &lt;a href=&#34;https://www.continuouslifecycle.de/&#34; target=&#34;_blank&#34;&gt;Continuous Lifecycle (Mannheim, Germany)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/GerdAschemann&#34; target=&#34;_blank&#34;&gt;Gerd Aschemann&lt;/a&gt; (&lt;a href=&#34;http://aschemann.net/gerd/publications/jx-talk-conli-2018/&#34; target=&#34;_blank&#34;&gt;Slides&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.baselone.ch/speech/B6A3BA74-8E28-46CD-B4B7-F96C6FFE0B39/Jenkins-X---Continuously-Driving-the-Kloud&#34; target=&#34;_blank&#34;&gt;2018-10-18 Jenkins X - Continuously Driving the Kloud (German)&lt;/a&gt; at &lt;a href=&#34;https://www.baselone.ch/&#34; target=&#34;_blank&#34;&gt;BaselOne (Basel, Switzerland)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/GerdAschemann&#34; target=&#34;_blank&#34;&gt;Gerd Aschemann&lt;/a&gt; (&lt;a href=&#34;http://aschemann.net/gerd/publications/jx-talk-baselone-2018/&#34; target=&#34;_blank&#34;&gt;Slides&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.meetup.com/Frankfurt-am-Main-Kubernetes-Meetup/events/254372021/&#34; target=&#34;_blank&#34;&gt;2018-10-15 Jenkins X - Continuously Driving the Kloud (German)&lt;/a&gt; at &lt;a href=&#34;https://www.meetup.com/Frankfurt-am-Main-Kubernetes-Meetup/&#34; target=&#34;_blank&#34;&gt;Kubernetes Meetup Frankfurt a.M. (Germany)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/GerdAschemann&#34; target=&#34;_blank&#34;&gt;Gerd Aschemann&lt;/a&gt; (&lt;a href=&#34;http://aschemann.net/gerd/publications/jx-talk-k8s-ffm-2018/&#34; target=&#34;_blank&#34;&gt;Slides&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://openspacer.org/60-devops-community/222-devops-camp-compact-2018/session/926-jenkins-x/&#34; target=&#34;_blank&#34;&gt;2018-10-13 Jenkins X - Continuously Driving the Kloud (German)&lt;/a&gt; at &lt;a href=&#34;https://devops-camp.de/&#34; target=&#34;_blank&#34;&gt;Devops Camp Compact 2018 Nürnberg (Germany)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/GerdAschemann&#34; target=&#34;_blank&#34;&gt;Gerd Aschemann&lt;/a&gt; - &lt;a href=&#34;https://youtu.be/hqg7mbjBDTo?t=13352&amp;amp;end=16578&#34; target=&#34;_blank&#34;&gt;Youtube Stream of Part 1&lt;/a&gt; (&lt;a href=&#34;http://aschemann.net/gerd/publications/jx-talk-docc-2018/&#34; target=&#34;_blank&#34;&gt;Slides&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.meetup.com/Swiss-Jenkins-Area-Meetup/events/254221707/&#34; target=&#34;_blank&#34;&gt;2018-11-14 Meetup Zurich: Continuous Applications Delivery for Kubernetes&lt;/a&gt; by &lt;a href=&#34;https://github.com/ccojocar&#34; target=&#34;_blank&#34;&gt;Cosmin Cojocar&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://scbcn.github.io&#34; target=&#34;_blank&#34;&gt;2018-09-29 Software Crafters, Barcelona, Spain: Continuous Deployment With Jenkins X And Kubernetes&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt; &lt;a href=&#34;https://youtu.be/zoT8FyqITLI&#34; target=&#34;_blank&#34;&gt;Video&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://bit.ly/jdd-conference-jx&#34; target=&#34;_blank&#34;&gt;2018-10-08 JDD Poland: End to End automation and Continuous Delivery of Microservices for Kubernetes&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/cl4mer&#34; target=&#34;_blank&#34;&gt;Paolo Carta&lt;/a&gt; with &lt;a href=&#34;http://bit.ly/video-jdd-jx&#34; target=&#34;_blank&#34;&gt;Video&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.eventbrite.es/e/entradas-xantarj-2018-49884037499&#34; target=&#34;_blank&#34;&gt;2018-09-28 XantarJ Santiago de Compostela: Acelera el desarrollo de tus aplicaciones con Docker y Jenkins&lt;/a&gt; by &lt;a href=&#34;https://csanchez.org&#34; target=&#34;_blank&#34;&gt;Carlos Sanchez&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://workshoptage.ch/workshops/2018/jenkins-x-continuous-delivery-for-java-services-in-kubernetes/&#34; target=&#34;_blank&#34;&gt;2018-09-13 Workshop Days Switzerland: Jenkins X: Continuous Delivery for Java services in Kubernetes&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/CojocarCosmin&#34; target=&#34;_blank&#34;&gt;Cosmin Cojocar&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://bit.ly/workshop-ci-cd-jx&#34; target=&#34;_blank&#34;&gt;2018-09-12 Workshop Days Switzerland: End-to-End Continuous Delivery on Kubernetes&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/cl4mer&#34; target=&#34;_blank&#34;&gt;Paolo Carta&lt;/a&gt; and Matteo Baiguini&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://2018.javazone.no/program/7f3694e6-1936-4d14-9ac1-2b1f7585da41&#34; target=&#34;_blank&#34;&gt;2018-09-12 JavaZone: Using Kubernetes for Continuous Integration and Continuous Delivery&lt;/a&gt; 🎥 by &lt;a href=&#34;https://csanchez.org&#34; target=&#34;_blank&#34;&gt;Carlos Sanchez&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.jug-kl.de/jenkins/&#34; target=&#34;_blank&#34;&gt;2018-09-12 Jenkins X - Continuously Driving the Kloud (German)&lt;/a&gt; at &lt;a href=&#34;http://www.jug-kl.de/&#34; target=&#34;_blank&#34;&gt;JUG Kaiserslautern (Germany)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/GerdAschemann&#34; target=&#34;_blank&#34;&gt;Gerd Aschemann&lt;/a&gt; (&lt;a href=&#34;http://aschemann.net/gerd/publications/jx-talk-jugkl-2018/&#34; target=&#34;_blank&#34;&gt;Slides&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.javaday.ec/&#34; target=&#34;_blank&#34;&gt;2018-09-08 JavaDay Ecuador: CI/CD for Spring Boot Applications with Jenkins X&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/eddumelendez&#34; target=&#34;_blank&#34;&gt;Eddú Meléndez&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://bed-con.org/2018/programm&#34; target=&#34;_blank&#34;&gt;2018-09-06 Jenkins X - Continuously Driving the Kloud (German)&lt;/a&gt; at &lt;a href=&#34;http://bed-con.org/2018&#34; target=&#34;_blank&#34;&gt;Bed-Con: Berlin Expert Days 2018 (Germany)&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/GerdAschemann&#34; target=&#34;_blank&#34;&gt;Gerd Aschemann&lt;/a&gt; (&lt;a href=&#34;http://aschemann.net/gerd/publications/jx-talk-bedcon-2018/&#34; target=&#34;_blank&#34;&gt;Slides&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://perujug.org/perujavaday2018/&#34; target=&#34;_blank&#34;&gt;JavaDay Perú 30 June 2018:CI/CD for Spring Boot Applications with Jenkins X&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/eddumelendez&#34; target=&#34;_blank&#34;&gt;Eddú Meléndez&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.jbcnconf.com/2018/infoSpeaker.html?ref=SmFtZXNTdHJhY2hhbmpzdHJhY2hhbkBjbG91ZGJlZXMuY29t&#34; target=&#34;_blank&#34;&gt;JBCN Conference 11-13 June 2018:Workshop - building Continuous Delivery for Microservices with Jenkins X&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/jstrachan&#34; target=&#34;_blank&#34;&gt;James Strachan&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=bIdMveCe75c&amp;amp;feature=youtu.be&#34; target=&#34;_blank&#34;&gt;CNCF webinar: Continuous Integration and Delivery with Kubernetes&lt;/a&gt; with &lt;a href=&#34;https://docs.google.com/presentation/d/1hwt2lFh3cCeFdP4xoT_stMPs0nh2xVZUtze6o79WfXc/edit?usp=sharing&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/jstrachan&#34; target=&#34;_blank&#34;&gt;James Strachan&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?time_continue=1&amp;amp;v=53AtxQGXnMk&#34; target=&#34;_blank&#34;&gt;VirtualJUG: Jenkins X: Continuous Delivery for Kubernetes&lt;/a&gt; on &lt;a href=&#34;https://twitter.com/virtualJUG&#34; target=&#34;_blank&#34;&gt;@virtualJUG&lt;/a&gt; with &lt;a href=&#34;https://docs.google.com/presentation/d/1hwt2lFh3cCeFdP4xoT_stMPs0nh2xVZUtze6o79WfXc/edit?usp=sharing&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/jstrachan&#34; target=&#34;_blank&#34;&gt;James Strachan&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.jbcnconf.com/2018/infoSpeaker.html?ref=Um9iZXJ0RGF2aWVzcmRhdmllc0BjbG91ZGJlZXMuY29t&#34; target=&#34;_blank&#34;&gt;JBCN Conference 11-13 June 2018:Jenkins X: Continuous Delivery for Kubernetes&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/rajdavies&#34; target=&#34;_blank&#34;&gt;Rob Davies&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jdrawlings&#34; target=&#34;_blank&#34;&gt;JamesRawlings&lt;/a&gt; with &lt;a href=&#34;https://docs.google.com/presentation/d/1i0JTVaMGCD4pPuOOE0wIfYgbUU40qSmissu0UnizpVQ/edit?usp=sharing&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://cfp.devoxx.co.uk/2018/talk/XWT-9637/Jenkins_X:_Continuous_Delivery_for_Kubernetes&#34; target=&#34;_blank&#34;&gt;Devoxx UK: Jenkins X: Continuous Delivery for Kubernetes&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/jstrachan&#34; target=&#34;_blank&#34;&gt;James Strachan&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://rigadevdays.lv/&#34; target=&#34;_blank&#34;&gt;2018-05-31 Dev Days, Riga: Continuous Deployment With Jenkins X And Kubernetes&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/vfarcic&#34; target=&#34;_blank&#34;&gt;Viktor Farcic&lt;/a&gt; &lt;a href=&#34;https://youtu.be/iughcmtWz8s&#34; target=&#34;_blank&#34;&gt;Video&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.meetup.com/Cloud-Native-Wales/events/lxwbppyxhbnb/&#34; target=&#34;_blank&#34;&gt;Cloud Native Meetup, Wales 10 May 2018: Jenkins X: Easy CI/CD for Kubernetes&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/jdrawlings&#34; target=&#34;_blank&#34;&gt;James Rawlings&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=uHe7R_iZSLU&#34; target=&#34;_blank&#34;&gt;KubeCon EU 2-4 May 2018: Jenkins X:Easy CI/CD for Kubernetes&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/jstrachan&#34; target=&#34;_blank&#34;&gt;James Strachan&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.meetup.com/London-Jenkins-Area-Meetup/&#34; target=&#34;_blank&#34;&gt;London Jenkins Meetup 24 April 2018: Jenkins X: Automated CI/CD for Kubernetes&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/jstrachan&#34; target=&#34;_blank&#34;&gt;James Strachan&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=jls74bflA3s&amp;amp;t=0s&amp;amp;list=PLHsuXkXI4xdjGlGkCBdxIAmkzfWXqsUrO&amp;amp;index=2&#34; target=&#34;_blank&#34;&gt;2018-04-19 Devoxx France: Using Kubernetes for Continuous Integration and Continuous Delivery&lt;/a&gt; 🎥 by &lt;a href=&#34;https://csanchez.org&#34; target=&#34;_blank&#34;&gt;Carlos Sanchez&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://skillsmatter.com/skillscasts/11833-kubernetes-april&#34; target=&#34;_blank&#34;&gt;Kubernetes Meetup, London  12 Apriul 2018: CI/CD with Jenkins X on Kubernetes&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/rajdavies&#34; target=&#34;_blank&#34;&gt;Rob Davies&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jdrawlings&#34; target=&#34;_blank&#34;&gt;JamesRawlings&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also check out the &lt;a href=&#34;/news/&#34;&gt;Jenkins X Blog&lt;/a&gt; and &lt;a href=&#34;/docs/getting-started/demos-talks-posts/articles/&#34;&gt;Articles&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Accelerate</title>
      <link>/docs/overview/accelerate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/overview/accelerate/</guid>
      <description>
        
        
        

&lt;p&gt;&lt;img src=&#34;/images/accelerate.jpg&#34; class=&#34;img-thumbnail&#34;&gt;&lt;/p&gt;

&lt;p&gt;Jenkins X is a reimagined CI/CD implementation for the Cloud which is heavily influence by the State of DevOps reports and more recently the &lt;a href=&#34;https://www.amazon.co.uk/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339&#34; target=&#34;_blank&#34;&gt;Accelerate&lt;/a&gt; book from &lt;a href=&#34;https://twitter.com/nicolefv&#34; target=&#34;_blank&#34;&gt;Nicole Forsgren&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/jezhumble&#34; target=&#34;_blank&#34;&gt;Jez Humble&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/RealGeneKim?&#34; target=&#34;_blank&#34;&gt;Gene Kim&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Years of gathering data from real world teams and organizations which has been analyzed by inspiring thought leaders and data scientists from the DevOps world.  The Accelerate book recommends a number of capabilities that Jenkins X is implementing so users gain the scientifically proven benefits, out of the box.  We&amp;rsquo;ve started documenting the capabilities that are available today and will continue as more become available.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/capabilities.png&#34; class=&#34;img-thumbnail&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;use-version-control-for-all-artifacts&#34;&gt;Use version control for all artifacts&lt;/h1&gt;

&lt;p&gt;The Weaveworks folks coined the term GitOps which we love.  Any change to an environment, whether it be a new application, version upgrade, resource limit change or simple application configuration should be raised as a Pull Request to Git, have checks run against it like a form of CI for environments and approved by a team that has control over what goes into the related environment.  We now enable governance have full traceability for any change to an environment.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Related Accelerate capability:  Use version control for all production artifacts&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;automate-your-deployment-process&#34;&gt;Automate your deployment process&lt;/h1&gt;

&lt;h2 id=&#34;environments&#34;&gt;Environments&lt;/h2&gt;

&lt;p&gt;Jenkins X will automatically create Git backed environments during installation and makes it easy to add new ones using &lt;code&gt;jx create environment&lt;/code&gt;.  Additionally when creating new applications via a quickstart (&lt;code&gt;jx create quickstart&lt;/code&gt;), Java based SpringBoot (&lt;code&gt;jx create spring&lt;/code&gt;) or importing existing applications (&lt;code&gt;jx import&lt;/code&gt;), Jenkins X will both automatically add CI / CD pipelines and setup the jobs, git repos and webhooks to enable an automated deployment process.&lt;/p&gt;

&lt;p&gt;Out of the box Jenkins X creates Staging and Production (this is customizable) permanent environments as well as temporary environments for preview applications from Pull Requests.&lt;/p&gt;

&lt;h3 id=&#34;previews-environments&#34;&gt;Previews Environments&lt;/h3&gt;

&lt;p&gt;We are trying to move as much testing, security, validation and experimentation for a change before it&amp;rsquo;s merged to master.  With the use of temporary dynamically created Preview Environments any Pull Request can have a preview version built and deployed, including libraries that feed into a downstream deployable application.  This means we can code review, test, collaborate better with all teams that are involved in agreeing that change can go live.&lt;/p&gt;

&lt;p&gt;Ultimately Jenkins X wants to provide a way that developers, testers, designers and product managers can be as sure as they can that when a change is merged to master it works as expected.  We want to be confident the proposed change does not negatively affect any service or feature as well as deliver the value it is intended to.&lt;/p&gt;

&lt;p&gt;Where Preview Environments get really interesting is when we are able to progress a short term PR through various stages of maturity and confidence where we begin to direct a percentage of real production traffic (either shadow traffic or even beta users).  We can then analyze the value of the proposed change and possible run multiple automated experiments over time using Hypothesis Driven Development.  This helps give us better understanding of how the change will perform when released to all users. Though we need to make sure PRs stay short lived for trunk based development; lets try avoid PRs turning into long term feature branches!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Related Accelerate capability: Foster and enable team experimentation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Using preview environments is a great way to introduce better test automation.  While Jenkins X enables this we don&amp;rsquo;t yet have examples of automated tests being run against a preview environment.  A simple test would be to ensure the application starts ok and Kubernetes liveness check pass for an amount of time. This relates to&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Related Accelerate capability: Implement Test Automation&lt;/em&gt;
&lt;em&gt;Related Accelerate capability: Automate your deployment process&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;permanent-environments&#34;&gt;Permanent Environments&lt;/h3&gt;

&lt;p&gt;In software development we&amp;rsquo;re used to working with multiple environments in the lead up to a change being promoted to a live production environment.  Whilst this seems business as usual it can cause significant delays to other changes if for any reason that it is deemed not fit via some process that didn&amp;rsquo;t happen pre merge to master.  Subsequent commits then become blocked and can cause delay of urgent changes being promoted to production.&lt;/p&gt;

&lt;p&gt;As above Jenkins X wants any changes and experiments to be validated before it is merged to master.  We would like changes in a staging environment to be held there for a short amount of time before being promoted, ideally in an automated fashion.&lt;/p&gt;

&lt;p&gt;The default Jenkins X pipelines provide deployment automation via environments.  These are customizable to suite your own CI / CD pipeline requirements.&lt;/p&gt;

&lt;p&gt;Jenkins X recommends Staging should act as a near as possible reflection on production, ideally with real production data shadowed to it using a service mesh to understand the behavior.  This also helps when developing changes in preview where we can link to non production services in staging.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Related Accelerate capability: Automate your deployment process&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;use-trunk-based-development&#34;&gt;Use trunk-based development&lt;/h1&gt;

&lt;p&gt;The Accelerate book found that teams which use trunk based development with short lived branches performed better.  This has always worked for the Jenkins X core team members so this was an easy capability for Jenkins X to implement when setting up Git repositories and CI/CD jobs.&lt;/p&gt;

&lt;h1 id=&#34;implement-continuous-integration&#34;&gt;Implement Continuous Integration&lt;/h1&gt;

&lt;p&gt;Jenkins X sees CI as the effort of validating a proposed change via Pull Requests before it is merged to master.  Jenkins X will automatically configure source code repositories, Jenkins and Kubernetes to provide Continuous Integration of the box.&lt;/p&gt;

&lt;h1 id=&#34;implement-continuous-delivery&#34;&gt;Implement Continuous Delivery&lt;/h1&gt;

&lt;p&gt;Jenkins X sees CD as the effort of taking that change after it&amp;rsquo;s been merged to master through to running in a live environment.  Jenkins X automates many parts in a release pipeline:&lt;/p&gt;

&lt;p&gt;Jenkins X advocates the use of semantic versioning.  We use git tags to calculate the next release version which means we don&amp;rsquo;t need to store the latest release version in the master branch.  Where release systems do store the last or next version in Git repos it means CD becomes hard, as a commit in a release pipeline back to master triggers a new release.  This results in a recursive release trigger.  Using a Git tag helps avoid this situation which Jenkins X completely automates.&lt;/p&gt;

&lt;p&gt;Jenkins X will automatically create a released version on &lt;strong&gt;every&lt;/strong&gt; merge to master which can then potentially progress through to production.&lt;/p&gt;

&lt;h1 id=&#34;use-loosely-coupled-architecture&#34;&gt;Use loosely coupled architecture&lt;/h1&gt;

&lt;p&gt;By targeting Kubernetes users of Jenkins X can take advantage of many of the cloud features that help design and develop loosely coupled solutions.  Service discovery, fault tolerance, scalability, health checks, rolling upgrades, container scheduling and orchestration to name just a few examples of where Kubernetes helps.&lt;/p&gt;

&lt;h1 id=&#34;architect-for-empowered-teams&#34;&gt;Architect for empowered teams&lt;/h1&gt;

&lt;p&gt;Jenkins X aims to help polyglot application developers.  Right now Jenkins X has quickstarts and automated CI/CD setup with language detection for Golang, Java, NodeJS, .Net, React, Angular, Rust, Swift and more to come.  What this also does is provide a consistent Way Of Working so developers can concentrate on developing.&lt;/p&gt;

&lt;p&gt;Jenkins X also provides many addons, for example Grafana and Prometheus for automated metrics collection and visualization.  In this example centralized metrics help understand how your applications behave when built and deployed on Kubernetes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/docs/reference/devpods/&#34;&gt;DevPods&lt;/a&gt; are another feature which enables developers to edit source code in their local IDE, behind the scenes it is then synced to the cloud and rapidly built and redeployed.&lt;/p&gt;

&lt;p&gt;Jenkins X believes providing developers automation that helps them experiment in the cloud, with different technologies and  feedback empowers them to make the best decisions - faster.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: ChatOps Questions</title>
      <link>/docs/using-jx/faq/chatops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-jx/faq/chatops/</guid>
      <description>
        
        
        

&lt;h2 id=&#34;what-is-chatops&#34;&gt;What is ChatOps?&lt;/h2&gt;

&lt;p&gt;We use the phrase &lt;em&gt;ChatOps&lt;/em&gt; to mean operating code changes and GitOPs promotion via chat. More specifically this usually is done via commenting on Pull Requests on your git providers website; though in the future this could be via Slack or web consoles too.&lt;/p&gt;

&lt;h2 id=&#34;what-are-the-benefits-of-chatops&#34;&gt;What are the benefits of ChatOps?&lt;/h2&gt;

&lt;p&gt;ChatOps helps developers collaborate on Pull Requests and speeds up merging of Pull Requests. We want to be able to merge changes as quickly as possible into master so that we continuously integrate code which minimises the downsides of long term feature branching and merge hell.&lt;/p&gt;

&lt;p&gt;ChatOps (and &lt;a href=&#34;#what-does-hook-do&#34;&gt;tide in particular&lt;/a&gt;) also helps automate and speeds up tasks e.g.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;developers don&amp;rsquo;t have to keep hitting reload on a Pull Request page waiting for all the tests to pass so that they can click &lt;code&gt;Merge&lt;/code&gt;. Just add a &lt;code&gt;/lgtm&lt;/code&gt; comment or approve the code review and the Pull Request will automatically get merged once its tests go green. This also avoids developers accidentally hitting &lt;code&gt;Merge&lt;/code&gt; before all the test pass!&lt;/li&gt;
&lt;li&gt;all Pull Request are automatically rebased and tested against master before merging - further ensuring we don&amp;rsquo;t accidentally break master&lt;/li&gt;
&lt;li&gt;batch merging of Pull Request is supported to speed up merging Pull Requests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more detail see &lt;a href=&#34;#what-does-hook-do&#34;&gt;what does tide do&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;which-kinds-of-webhook-support-chatops&#34;&gt;Which kinds of webhook support ChatOps?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/docs/reference/components/prow/&#34;&gt;Prow&lt;/a&gt; and &lt;a href=&#34;/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt; support both webhooks and &lt;a href=&#34;/docs/using-jx/faq/chatops&#34;&gt;ChatOps&lt;/a&gt; whereas Jenkins just supports webhooks only.&lt;/p&gt;

&lt;h2 id=&#34;what-does-hook-do&#34;&gt;What does hook do?&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;hook&lt;/code&gt; is the name of the microservice in &lt;a href=&#34;/docs/reference/components/prow/&#34;&gt;Prow&lt;/a&gt; and the http endpoint in &lt;a href=&#34;/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt; which listens to webhooks coming in from your git provider which then gets processed as either a ChatOps command or a trigger of a pipeline.&lt;/p&gt;

&lt;h2 id=&#34;what-does-tide-do&#34;&gt;What does tide do?&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;tide&lt;/code&gt; is a microservice in  &lt;a href=&#34;/docs/reference/components/prow/&#34;&gt;Prow&lt;/a&gt; and &lt;a href=&#34;/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt; which periodically queries open pull requests on the repositories you have imported into Jenkins X. Then it performs the following logic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if a Pull Request has passed all of its review + CI tests (e.g. its got the &lt;code&gt;approved&lt;/code&gt; and/or &lt;code&gt;lgtm&lt;/code&gt; labels applied or has passed a github code review) and is green and is based off of master it is automatically merged.&lt;/li&gt;
&lt;li&gt;if a Pull Request has passed all of its review + CI tests but is not based off of master its pipelines are re-triggered based off of master to ensure the Pull Request will be valid if it were merged.&lt;/li&gt;
&lt;li&gt;if batching is enabled and there are multiple pending Pull Requests which are approved and green, a batch pipeline is triggered which combines multiple Pull Requests together into a single change - if all those pipelines go green then all the PRs are merged together at once and closed. This greatly speeds up getting multiple Pull Requests merged together (as it avoids re-triggering each PR&amp;rsquo;s tests after each one is merged).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how-can-i-make-chatops-ha&#34;&gt;How can I make ChatOps HA?&lt;/h2&gt;

&lt;p&gt;To make ChatOps highly avialable scale up the deployments which listen for http requests to, say, 3 replicas.&lt;/p&gt;

&lt;p&gt;When using &lt;a href=&#34;/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt; that just means modifying the replicas for the &lt;code&gt;lighthouse&lt;/code&gt; deployment. e.g. in your &lt;a href=&#34;/docs/getting-started/setup/boot/&#34;&gt;boot&lt;/a&gt; git repository try changing &lt;code&gt;env/lighthouse/values.tmpl.yaml&lt;/code&gt; to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;replicaCount: 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When using &lt;a href=&#34;/docs/reference/components/prow/&#34;&gt;Prow&lt;/a&gt; you need to scale up &lt;code&gt;hook&lt;/code&gt; and &lt;code&gt;pipelinerunner&lt;/code&gt;. e.g. in your &lt;a href=&#34;/docs/getting-started/setup/boot/&#34;&gt;boot&lt;/a&gt; git repository try changing &lt;code&gt;env/prow/values.tmpl.yaml&lt;/code&gt; to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;hook:
  replicaCount: 3
pipelinerunner:
  replicaCount: 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;should-i-use-prow-or-lighthouse&#34;&gt;Should I use prow or lighthouse?&lt;/h2&gt;

&lt;p&gt;If you are using a git server other than &lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34;&gt;https://github.com&lt;/a&gt; then we recommend &lt;a href=&#34;/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are using &lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34;&gt;https://github.com&lt;/a&gt; then for your git server then for now we recommend &lt;a href=&#34;/docs/reference/components/prow/&#34;&gt;Prow&lt;/a&gt; as it has had more testing than &lt;a href=&#34;/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Though &lt;a href=&#34;/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt; is our strategic direction. We are starting to incrementally move our open source repositories over to &lt;a href=&#34;/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt;. At some point in the future once we&amp;rsquo;ve been using &lt;a href=&#34;/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt; in production for all of our open source and commercial repositories &lt;a href=&#34;/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt; will become our recommended solution for all git providers so that we can have a single, simpler &amp;amp; smaller codebase to maintain.&lt;/p&gt;

&lt;h2 id=&#34;how-to-handle-a-flaky-broken-pipeline&#34;&gt;How to handle a flaky/broken pipeline&lt;/h2&gt;

&lt;p&gt;If you have a pending Pull Request which is blocked on a flaky test or an incorrectly failing lint or code review; you can use ChatOps to override its status via the ChatOps command: &lt;code&gt;/override nameOfPipeline&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;why-did-a-pullrequest-have-no-pipeline-triggered&#34;&gt;Why did a PullRequest have no pipeline triggered?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/docs/reference/components/prow/&#34;&gt;Prow&lt;/a&gt; and &lt;a href=&#34;/architecture/lighthouse/&#34;&gt;Lighthouse&lt;/a&gt; use an &lt;code&gt;OWNERS&lt;/code&gt; file stored in each git repository to define which developers are allowed to review and approve changes. You can even limit those roles to different folders.&lt;/p&gt;

&lt;p&gt;If a non-reviewer submits a Pull Request it won&amp;rsquo;t trigger CI pipelines by default until a reviewer adds an &lt;code&gt;/ok-to-test&lt;/code&gt; comment on the Pull Request.&lt;/p&gt;

&lt;p&gt;If you have public git repositories this also avoids the security issue of a non-approver submitting a Pull Request to change the pipeline to email them your security credentials in the CI pipeline ;)&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create Camel</title>
      <link>/docs/using-jx/creating/create-camel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-jx/creating/create-camel/</guid>
      <description>
        
        
        

&lt;p&gt;If you want to create a new Spring Boot based microservice using &lt;a href=&#34;http://camel.apache.org/&#34; target=&#34;_blank&#34;&gt;Apache Camel&lt;/a&gt; you can use the &lt;a href=&#34;/commands/jx_create_camel&#34;&gt;jx create camel&lt;/a&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx create camel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are then prompted for the project name.&lt;/p&gt;

&lt;p&gt;If you want you can specify this on the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx create camel -a myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;what-happens-when-you-create-a-camel-microservice&#34;&gt;What happens when you create a camel microservice&lt;/h3&gt;

&lt;p&gt;Once you have chosen the project to create and given it a name the following is automated for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;creates a new camel microservice in a sub directory&lt;/li&gt;
&lt;li&gt;add your source code into a git repository&lt;/li&gt;
&lt;li&gt;create a remote git repository on a git service, such as &lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;push your code to the remote git service&lt;/li&gt;
&lt;li&gt;adds default files:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; to build your application as a docker image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jenkinsfile&lt;/code&gt; to implement the CI / CD pipeline&lt;/li&gt;
&lt;li&gt;helm chart to run your application inside Kubernetes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;register a webhook on the remote git repository to your teams Jenkins&lt;/li&gt;
&lt;li&gt;add the git repository to your teams Jenkins&lt;/li&gt;
&lt;li&gt;trigger the first pipeline&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Decisions</title>
      <link>/docs/reference/components/decisions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/reference/components/decisions/</guid>
      <description>
        
        
        

&lt;h1 id=&#34;decisions&#34;&gt;Decisions&lt;/h1&gt;

&lt;p&gt;Jenkins X is an opinionated developer experience, here we will explain the background and decisions we have taken to help explain the reasons for these opinions.  You may also want to take a look at the &lt;a href=&#34;/about/opinions/&#34;&gt;Accelerate&lt;/a&gt; page for details on how Jenkins X implements the capabilities recommended by&lt;/p&gt;

&lt;h2 id=&#34;kubernetes&#34;&gt;Kubernetes&lt;/h2&gt;

&lt;p&gt;First is why Jenkins X is purely focused on Kubernetes and is only intended to run on it.&lt;/p&gt;

&lt;p&gt;Kubernetes has won the cloud wars, every major cloud provider now either supports Kubernetes or is actively working on a Kubernetes solution.  Google, Microsoft, Amazon, Red Hat, Oracle, IBM, Alibaba, Digital Ocean, Docker, Mesos and Cloud Foundry to name a few.  We now have one deployment platform to target and develop first class portable applications for.&lt;/p&gt;

&lt;p&gt;The Kubernetes ecosystem is rich with innovation and with a vibrant, forward thinking, diverse open source community which is inviting only suggests great things for all involved.&lt;/p&gt;

&lt;p&gt;Jenkins X strongly recommends using public cloud managed Kubernetes clusters where possible. GKE, AKS and EKS all offer managed Kubernetes services, which dramatically reduces risk of installing, upgrading and maintaining your Kubernetes cluster so you can focus on developing awesome code.&lt;/p&gt;

&lt;p&gt;i.e. let folks that know how to run containers and manage clusters at scale so you can focus on adding value to your business.&lt;/p&gt;

&lt;h2 id=&#34;draft&#34;&gt;Draft&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://draft.sh&#34; target=&#34;_blank&#34;&gt;Draft&lt;/a&gt; has a few capabilities but Jenkins X only uses the language detection and pack creation feature.  Jenkins X maintains it&amp;rsquo;s own &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34; target=&#34;_blank&#34;&gt;draft packs&lt;/a&gt; tailored to run with Jenkins X.&lt;/p&gt;

&lt;p&gt;Draft provides a great way to bootstrap a source code project with the necessary packaging needed to run the application on Kubernetes.&lt;/p&gt;

&lt;p&gt;The Draft project came from Deis who were acquired by Microsoft and continue to invest and evolve their Kubernetes developer story.&lt;/p&gt;

&lt;h2 id=&#34;helm&#34;&gt;Helm&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://helm.sh&#34; target=&#34;_blank&#34;&gt;Helm&lt;/a&gt; provides the templated packaging for running applications on Kubernetes.  We&amp;rsquo;ve received mixed feedback from our use of Helm.  From our experience being able to template and compose multiple Helm Charts together has been a very welcome find. This lead to our use of using Helm to compose, install and upgrade entire environments and being able to easily override values such as number of replicas or application resource limits per environment for example.&lt;/p&gt;

&lt;p&gt;OpenShift Templates aimed to do a similar thing however they are OpenShift specific.&lt;/p&gt;

&lt;p&gt;Lots of the concerns with Helm are being addressed with the major version upgrade of Helm 3.  Removing the use of Tiller the server side component of Helm is a big win as it&amp;rsquo;s seen as being insecure given the elevated permissions it needs to run.  Jenkins X &lt;a href=&#34;/architecture/helm3/&#34;&gt;provides a way&lt;/a&gt; to use the beta version of Helm 3 for folks that would like to try this instead, we&amp;rsquo;re using this ourselves and it&amp;rsquo;s working great so far.  If there are issues we&amp;rsquo;d like to feedback to the Helm project so we can help get them to GA sooner.&lt;/p&gt;

&lt;p&gt;The Helm project came from Deis who were acquired by Microsoft and continue to invest and evolve their Kubernetes developer story.&lt;/p&gt;

&lt;h2 id=&#34;skaffold&#34;&gt;Skaffold&lt;/h2&gt;

&lt;p&gt;Jenkins X uses &lt;a href=&#34;https://github.com/GoogleContainerTools/skaffold&#34; target=&#34;_blank&#34;&gt;Skaffold&lt;/a&gt; to perform the build and push image actions in a pipeline.  Skaffold allows us to implement different image builder and registries services like &lt;a href=&#34;https://cloud.google.com/container-builder/&#34; target=&#34;_blank&#34;&gt;Google Container Builder&lt;/a&gt;, &lt;a href=&#34;https://github.com/Azure/acr-builder&#34; target=&#34;_blank&#34;&gt;Azure Container Builder&lt;/a&gt; and &lt;a href=&#34;https://aws.amazon.com/ecr/&#34; target=&#34;_blank&#34;&gt;ECR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For folks that aren&amp;rsquo;t running on a public cloud with container builder or registry services then Skaffold can also work with &lt;a href=&#34;https://github.com/GoogleContainerTools/kaniko&#34; target=&#34;_blank&#34;&gt;kaniko&lt;/a&gt;, this allows pipelines to build docker images using rootless containers.  This is significantly more secure than mounting the docker socket from each node in the cluster.&lt;/p&gt;

&lt;h2 id=&#34;jenkins&#34;&gt;Jenkins&lt;/h2&gt;

&lt;p&gt;Jenkins as a large JVM that isn&amp;rsquo;t highly available, may seem a surprise to be selected as the pipeline engine to use in the Cloud, however the adoption of Jenkins by developers and the community it has means it is ideal to use and evolve it&amp;rsquo;s own cloud native story.  Already Jenkins X generates Kubernetes Custom Resource Definitions for pipeline activities that our IDE and CLI tooling uses rather than querying Jenkins.  We will be storing Jenkins builds and runs objects in Kubernetes rather than in the &lt;code&gt;$JENKINS_HOME&lt;/code&gt; which means we can scale Jenkins masters.  We are also switching to Prow to intercept Git webhook events rather than using Jenkins, this means we can have a highly available solution as well as hand off the scheduling of builds to Kubernetes.&lt;/p&gt;

&lt;p&gt;TL;DR we are pushing more of the Jenkins master functionality down into the Kubernetes platform.&lt;/p&gt;

&lt;p&gt;Taking this approach also means we will be able to support other pipeline engines in the future as well.&lt;/p&gt;

&lt;h2 id=&#34;prow&#34;&gt;Prow&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/test-infra/tree/master/prow&#34; target=&#34;_blank&#34;&gt;Prow&lt;/a&gt; handles Git events and can trigger workflows in Kubernetes.&lt;/p&gt;

&lt;p&gt;Prow can run in a highly available mode where multiple pods for a webhook ingress URL.  In contrast with Jenkins if you perform an upgrade then Jenkins has some downtime where webhook events can be missed.  This is in our future plans and we hope to be available soon.&lt;/p&gt;

&lt;h2 id=&#34;nexus&#34;&gt;Nexus&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://help.sonatype.com/repomanager3&#34; target=&#34;_blank&#34;&gt;Nexus&lt;/a&gt; is an overweight JVM that recently moved to OSGi however it does the job we need of it.  Cache dependencies for faster builds and provide a shared repository where teams can share their released artifacts.&lt;/p&gt;

&lt;p&gt;If someone developed an open source artifact repository server in a more cloud friendly language like Go then Jenkins X would likely switch to save on cloud bills.&lt;/p&gt;

&lt;p&gt;Right now Jenkins X doesn&amp;rsquo;t use the docker registry from Nexus.  The main reason was we needed to do some work to setup pod definitions with image pull secrets so we can use the authenticated registry.  Our preferred approach however is to switch to using native cloud provider registries like Amazon&amp;rsquo;s &lt;a href=&#34;https://aws.amazon.com/ecr/&#34; target=&#34;_blank&#34;&gt;ECR&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/container-registry/&#34; target=&#34;_blank&#34;&gt;Google Container Registry&lt;/a&gt; or Dockerhub for example with the help of Skaffold.&lt;/p&gt;

&lt;h2 id=&#34;docker-registry&#34;&gt;Docker registry&lt;/h2&gt;

&lt;p&gt;As above, we don&amp;rsquo;t intend to use &lt;a href=&#34;https://github.com/kubernetes/charts/tree/master/stable/docker-registry&#34; target=&#34;_blank&#34;&gt;this registry&lt;/a&gt; long term as we prefer using cloud provider registries like Amazon&amp;rsquo;s &lt;a href=&#34;https://aws.amazon.com/ecr/&#34; target=&#34;_blank&#34;&gt;ECR&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/container-registry/&#34; target=&#34;_blank&#34;&gt;Google Container Registry&lt;/a&gt; or Dockerhub for example with the help of Skaffold.&lt;/p&gt;

&lt;h2 id=&#34;chartmuseum&#34;&gt;ChartMuseum&lt;/h2&gt;

&lt;p&gt;At time of creating Jenkins X there were few options of how to publish Helm Charts, the Kubernetes community uses GitHub pages but we wanted to find a solution that works for folks that use any git provider.  &lt;a href=&#34;https://github.com/kubernetes-helm/chartmuseum&#34; target=&#34;_blank&#34;&gt;ChartMuseum&lt;/a&gt; is written in Go so performs well in the cloud, it supports multiple cloud storage and works great with Monocular.&lt;/p&gt;

&lt;h2 id=&#34;monocular&#34;&gt;Monocular&lt;/h2&gt;

&lt;p&gt;We use &lt;a href=&#34;https://github.com/kubernetes-helm/monocular&#34; target=&#34;_blank&#34;&gt;Monocular&lt;/a&gt; to discover our Teams published applications, we could use KubeApps by default instead if it is preferred by the community but we&amp;rsquo;ll enable KubeApps as an addon regardless.&lt;/p&gt;

&lt;h2 id=&#34;git&#34;&gt;Git&lt;/h2&gt;

&lt;p&gt;Jenkins X only works with Git.  There are a lot of dependencies and client implementations Jenkins X already needs to support for different Git providers, we don&amp;rsquo;t hear enough demand to support other version control systems so for now Jenkins X is tied to Git.&lt;/p&gt;

&lt;h2 id=&#34;programming-languages&#34;&gt;Programming languages&lt;/h2&gt;

&lt;p&gt;Jenkins X aims to help provide the right level of feedback for developers to understand how their applications are performing and give them easy ways to experiment with other languages which may suit both the feature and running on the Cloud better.  For example there are a lot of Java based organizations that only know how to write, run and maintain Java applications.  Java is extremely resource intensive compared with Golang, Rust, Swift, NodeJS to name a few, this results in much much higher cloud bills each month.  With Jenkins X we aim to help developers experiment with other options using quickstarts and metrics addons like Grafana and Prometheus to see how they behave in the cloud.&lt;/p&gt;

&lt;p&gt;For example any new microservice that we build on the Jenkins X project tends to be in either Golang or NodeJS given the huge effect is has on our cloud billing.  It does take time to shift to a new programming language but with Jenkins X we hope we can mitigate a lot of risk using quickstarts, automated CI/CD and a relatively consistent way of working on all languages.&lt;/p&gt;

&lt;h3 id=&#34;maven&#34;&gt;Maven&lt;/h3&gt;

&lt;p&gt;Maven has some tooling that a lot of folks are used to using which doesn&amp;rsquo;t suit CD particularly well.  For example the &lt;a href=&#34;http://maven.apache.org/maven-release/maven-release-plugin/&#34; target=&#34;_blank&#34;&gt;maven release plugin&lt;/a&gt; will version a project and commit directly back to master the new next SNAPSHOT version which in CD world would trigger another release resulting in a recursive loop.&lt;/p&gt;

&lt;p&gt;For Java projects Jenkins X uses the &lt;a href=&#34;https://www.mojohaus.org/versions-maven-plugin/set-mojo.html&#34; target=&#34;_blank&#34;&gt;maven version:set plugin&lt;/a&gt; to update all poms in a project using the next release version following the #Versioning step mentioned above.&lt;/p&gt;

&lt;p&gt;If a new major or minor version increment is needed users can create a new Git tag with the new major / minor number and Jenkins X will respect that.  Alternatively you can update the parent &lt;code&gt;pom.xml&lt;/code&gt; and any child pom files yourself and Jenkins X will detect and use the new major or minor version.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Dev Pods</title>
      <link>/docs/reference/devpods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/reference/devpods/</guid>
      <description>
        
        
        

&lt;p&gt;The initial focus of Jenkins X is around automating and improving CI/CD for kubernetes. The use of &lt;a href=&#34;/docs/concepts/features/#preview-environments&#34;&gt;Preview Environments&lt;/a&gt; really helps to validate and approve Pull Requests before they get merged to &lt;code&gt;master&lt;/code&gt;; but how do you try things out before you are ready submit a Pull Request?&lt;/p&gt;

&lt;p&gt;Jenkins X has a concept of &lt;code&gt;Dev Pods&lt;/code&gt; which are pods for developers to use as a terminal/shell which are based on the exact same operating system, docker containers and tools installed as the &lt;a href=&#34;/docs/managing-jx/common-tasks/pod-templates/&#34;&gt;pod templates&lt;/a&gt; used in the Jenkins X CI/CD pipelines.&lt;/p&gt;

&lt;p&gt;This lets build, run tests or redeploy apps before you commit to git safe in the knowledge you&amp;rsquo;re using the exact same tools as the CI/CD pipelines!&lt;/p&gt;

&lt;h2 id=&#34;creating-a-devpod&#34;&gt;Creating a DevPod&lt;/h2&gt;

&lt;p&gt;To create your own &lt;code&gt;DevPod&lt;/code&gt; use the command &lt;a href=&#34;/commands/jx_create_devpod/&#34;&gt;jx create devpod&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example if you want to create a &lt;code&gt;maven&lt;/code&gt; based DevPod use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx create devpod -l maven
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will then create a new &lt;code&gt;DevPod&lt;/code&gt; based on the maven based &lt;a href=&#34;/docs/managing-jx/common-tasks/pod-templates/&#34;&gt;pod template&lt;/a&gt; and open your terminal inside that pod. You are now free to use the various tools like &lt;code&gt;git, docker, maven, skaffold, jx&lt;/code&gt; which will all be using the same exact configuration as the CI/CD pipelines will.&lt;/p&gt;

&lt;h2 id=&#34;using-web-based-vs-code&#34;&gt;Using web based VS Code&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t use &lt;code&gt;--sync&lt;/code&gt; then the DevPod will embed the &lt;a href=&#34;https://github.com/cdr/code-server&#34; target=&#34;_blank&#34;&gt;web based version of VS Code&lt;/a&gt; in your DevPod so that you can open the IDE in a browser and work on the source code inside your DevPod!&lt;/p&gt;

&lt;p&gt;The source code is mounted into the workspace of the DevPod in the folder &lt;code&gt;/workspace&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To get an incremental redeploy as you edit source inside VS Code then open a &lt;code&gt;Terminal&lt;/code&gt; in VS Code and type:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./watch.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;inside the shell of the DevPod.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a &lt;a href=&#34;/images/developing/vscode-devpod.mp4&#34;&gt;demo showing how to use web based VS Code in a DevPod&lt;/a&gt;:&lt;/p&gt;

&lt;figure&gt;
&lt;embed src=&#34;https://jenkins-x.io/images/developing/vscode-devpod.mp4&#34; autostart=&#34;false&#34; height=&#34;400&#34; width=&#34;600&#34; /&gt;
&lt;figcaption&gt;
&lt;h5&gt;Use web based VS Code inside a DevPod&lt;/h5&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;using-theia-ide&#34;&gt;Using Theia IDE&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t use &lt;code&gt;--sync&lt;/code&gt; and you use &lt;code&gt;--theia&lt;/code&gt; then the DevPod will embed the &lt;a href=&#34;https://www.theia-ide.org/&#34; target=&#34;_blank&#34;&gt;Theia IDE&lt;/a&gt; so that you can open the IDE in a browser and work on the source code inside your DevPod!&lt;/p&gt;

&lt;p&gt;The source code is mounted into the workspace of the DevPod in the folder &lt;code&gt;/workspace&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To get an incremental redeploy as you edit source inside &lt;a href=&#34;https://www.theia-ide.org/&#34; target=&#34;_blank&#34;&gt;Theia IDE&lt;/a&gt; then type:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./watch.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;inside the shell of the DevPod.&lt;/p&gt;

&lt;h2 id=&#34;using-a-desktop-ide&#34;&gt;Using a desktop IDE&lt;/h2&gt;

&lt;p&gt;If you wish to use a desktop IDE then you need to sync your source code you can work on it there, using your preferred editor on your desktop. In this case the workflow is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;run &lt;code&gt;jx sync&lt;/code&gt; once on your system&lt;/li&gt;
&lt;li&gt;cd into your project dir, and run &lt;code&gt;jx create devpod --reuse --sync&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Once in the DevPod from step 2: run &lt;code&gt;./watch.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will open a shell (and create a DevPod, or re-use an existing one) and ensure the changes are synced up to the DevPod. Step 3: when  you run this then any changes you make locally will be pushed up to the DevPod, built, and then a temporary &amp;ldquo;edit&amp;rdquo; version of your application will be published.&lt;/p&gt;

&lt;p&gt;When you run &lt;code&gt;jx get applications&lt;/code&gt; you will see your &amp;ldquo;edit&amp;rdquo; application listed. You can open this in a browser, and edit away, and refresh, as if you were developing locally.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;if you are using the Visual Studio code extension to do this, you don&amp;rsquo;t need to worry about this, it will be done automatically for you&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;opening-a-devpod-shell&#34;&gt;Opening a DevPod shell&lt;/h2&gt;

&lt;p&gt;If you have other terminals that want to connect into an existing &lt;code&gt;DevPod&lt;/code&gt; use &lt;a href=&#34;/commands/jx_rsh/&#34;&gt;jx rsh -d&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx rsh -d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have more than one &lt;code&gt;DevPod&lt;/code&gt; active you will be prompted for the list of available &lt;code&gt;DevPod&lt;/code&gt;s to pick from. Otherwise your shell will open in the &lt;code&gt;DevPod&lt;/code&gt; directly.&lt;/p&gt;

&lt;p&gt;If you use &lt;code&gt;jx create devpod --reuse&lt;/code&gt; it will lazily create a devpod if one doesn&amp;rsquo;t exist for the project  directory you are in.&lt;/p&gt;

&lt;h3 id=&#34;viewing-my-devpods&#34;&gt;Viewing my DevPods&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&#34;/commands/jx_get_devpod/&#34;&gt;jx get devpod&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get devpod
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;deleting-a-devpod&#34;&gt;Deleting a DevPod&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&#34;/commands/jx_delete_devpod/&#34;&gt;jx delete devpod&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx delete devpod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then pick the devpod to delete and confirm. Or pass in the name of the devpod you want to delete as an argument.&lt;/p&gt;

&lt;h2 id=&#34;synchronizing-source-code&#34;&gt;Synchronizing source code&lt;/h2&gt;

&lt;p&gt;If you are using one of our &lt;a href=&#34;/developing/ide&#34;&gt;IDE plugins&lt;/a&gt; for your desktop IDE then synchronisation of local files to your DevPod will already be included.&lt;/p&gt;

&lt;p&gt;Otherwise if you are using a desktop IDE you can synchronise your local source code into your DevPod via the &lt;a href=&#34;/commands/jx_sync/&#34;&gt;jx sync&lt;/a&gt; command.&lt;/p&gt;

&lt;p&gt;This will allow you to edit source code in your preferred &lt;a href=&#34;/developing/ide&#34;&gt;IDE&lt;/a&gt; like &lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;VS Code&lt;/a&gt; or &lt;a href=&#34;https://www.jetbrains.com/idea/&#34; target=&#34;_blank&#34;&gt;IDEA&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx sync
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You just run this once on your system (if you are using the Visual Studio code extension to do this, you don&amp;rsquo;t need to worry about this, it will be done automatically for you)&lt;/p&gt;

&lt;p&gt;This command will download and install the excellent &lt;a href=&#34;https://github.com/vapor-ware/ksync&#34; target=&#34;_blank&#34;&gt;ksync&lt;/a&gt; tool if its not already installed, run &lt;code&gt;ksync init&lt;/code&gt; to add it to your cluster and then run &lt;code&gt;ksync watch&lt;/code&gt; and then use &lt;code&gt;ksync create&lt;/code&gt; to create a synchronisation spec.&lt;/p&gt;

&lt;p&gt;Then by default the code with be bidirectionally synchronized between the current directory and the &lt;code&gt;/code&lt;/code&gt; folder in the &lt;code&gt;DevPod&lt;/code&gt;. You can now edit the code in your IDE and run build/test commands inside the &lt;code&gt;DevPod&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;e.g. you can build your code with whatever tools you are using (&lt;code&gt;maven, gradle, make&lt;/code&gt; etc), perform &lt;code&gt;docker&lt;/code&gt; builds or run &lt;code&gt;skaffold&lt;/code&gt; in developer mode.&lt;/p&gt;

&lt;p&gt;Over time we are hoping to polish this experience to make it super easy to edit code in your IDE and get fast reloading working inside the kubernetes cluster using the same kubernetes resources, manifests and services!&lt;/p&gt;

&lt;h2 id=&#34;incremental-building&#34;&gt;Incremental building&lt;/h2&gt;

&lt;p&gt;One of the benefits of integrating with &lt;a href=&#34;https://github.com/GoogleContainerTools/skaffold&#34; target=&#34;_blank&#34;&gt;skaffold&lt;/a&gt; for building docker images is that we can perform incremental rebuilds of docker images and redeploys of the associated helm charts.&lt;/p&gt;

&lt;p&gt;So inside of your DevPod you can perform a regular build if your app is Java based. e.g. via maven:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mvn install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then to trigger incremental rebuilding and deploying of the local code in the DevPod you can use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./watch.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will use the &lt;code&gt;dev&lt;/code&gt; profile to generate a new docker image using the generated &lt;em&gt;digest&lt;/em&gt; then use it in the helm chart to deploy.&lt;/p&gt;

&lt;p&gt;When you created your DevPod it was associated with an &lt;em&gt;Edit Environment&lt;/em&gt; for your &lt;em&gt;username&lt;/em&gt; so that any apps deployed in a DevPod will appear in your &lt;em&gt;Edit Environment&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So once the &lt;code&gt;skaffold dev -p dev&lt;/code&gt; (what &lt;code&gt;watch.sh&lt;/code&gt; does) command has built the docker image and installed the helm chart, your app will show up via  &lt;a href=&#34;/commands/applications&#34;&gt;jx get applications&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get applications
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you edit code and trigger a docker rebuild, which for most languages is just changing the source code; though for Java apps its whenever you rebuild the jar - the image is regenerated and the helm chart updated!&lt;/p&gt;

&lt;h2 id=&#34;using-an-ide&#34;&gt;Using an IDE&lt;/h2&gt;

&lt;p&gt;One of the easiest ways to get started with DevPods is via an IDE such as &lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;VS Code&lt;/a&gt;. Check out the &lt;a href=&#34;/docs/using-jx/common-tasks/ide/&#34;&gt;Jenkins X plugins for IDEs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;VS Code has support which automates all the above so you can run a shell/sync quite easily.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Diagram</title>
      <link>/docs/concepts/diagram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/diagram/</guid>
      <description>
        
        
        &lt;p&gt;There are several architectures based on how you choose to install Jenkins X. We show you two common architectures below.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&#34;/images/ArchitectureStaticJenkins.png&#34;/&gt;
&lt;figcaption&gt;
&lt;h5&gt;Architecture depicts a deployment with static Jenkins instance&lt;/h5&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img src=&#34;/images/ArchitectureServerlessJenkins.png&#34;/&gt;
&lt;figcaption&gt;
&lt;h5&gt;Architecture depicts a serverless deployment using Tekton Pipelines&lt;/h5&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: General Questions</title>
      <link>/docs/overview/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/overview/faq/</guid>
      <description>
        
        
        

&lt;p&gt;We have tried to collate common issues here with work arounds. If your issue isn&amp;rsquo;t listed here please &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new&#34; target=&#34;_blank&#34;&gt;let us know&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;is-jenkins-x-open-source&#34;&gt;Is Jenkins X Open Source?&lt;/h2&gt;

&lt;p&gt;Yes! All of Jenkins X source code and artifacts are open source; either Apache or MIT and will always remain so!&lt;/p&gt;

&lt;h2 id=&#34;how-does-jenkins-x-compare-to-jenkins&#34;&gt;How does Jenkins X compare to Jenkins?&lt;/h2&gt;

&lt;p&gt;Jenkins X provides &lt;a href=&#34;/docs/concepts/features/#automated-pipelines&#34;&gt;automated CI + CD&lt;/a&gt; for applications on kubernetes with &lt;a href=&#34;/docs/concepts/features/#promotion&#34;&gt;GitOps promotion through environments&lt;/a&gt; and &lt;a href=&#34;/docs/concepts/features/#preview-environments&#34;&gt;preview environments on Pull Requests
&lt;/a&gt;. (See the &lt;a href=&#34;/docs/concepts/features/&#34;&gt;features for more details&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Jenkins is a general purpose CI/CD server that can be configured to do anything you like by adding plugins, changing configuration and writing your own pipelines.&lt;/p&gt;

&lt;p&gt;With Jenkins X you just &lt;a href=&#34;/docs/getting-started/&#34;&gt;install Jenkins X&lt;/a&gt; which automatically sets up all of the various tools (helm, docker registry, nexus etc) and then &lt;a href=&#34;/docs/using-jx/common-tasks/create-spring/&#34;&gt;create&lt;/a&gt;/&lt;a href=&#34;/docs/using-jx/common-tasks/import/&#34;&gt;import&lt;/a&gt; projects and you get fully automated CI/CD and previews. This lets your developers focus on building applications while you delegate to Jenkins X to manage your CI+CD.&lt;/p&gt;

&lt;p&gt;Jenkins X supports different execution engines; so it can orchestrate a Jenkins server per team by reusing Jenkins in a docker container. Though when using &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;serverless Jenkins X Pipelines&lt;/a&gt; we use &lt;a href=&#34;https://tekton.dev/&#34; target=&#34;_blank&#34;&gt;Tekton&lt;/a&gt; rather than Jenkins as the underlying CI/CD engine to provide a modern highly available cloud native architecture.&lt;/p&gt;

&lt;h2 id=&#34;is-jenkins-x-a-fork-of-jenkins&#34;&gt;Is Jenkins X a fork of Jenkins?&lt;/h2&gt;

&lt;p&gt;No! Jenkins X can orchestrate Jenkins by reusing it inside a container and configures it to be as kubernetes native as possible.&lt;/p&gt;

&lt;p&gt;Though when using &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;serverless Jenkins X Pipelines&lt;/a&gt; we use &lt;a href=&#34;https://tekton.dev/&#34; target=&#34;_blank&#34;&gt;Tekton&lt;/a&gt; rather than Jenkins as the underlying CI/CD engine to provide a modern highly available cloud native architecture.&lt;/p&gt;

&lt;h2 id=&#34;why-create-a-sub-project&#34;&gt;Why create a sub project?&lt;/h2&gt;

&lt;p&gt;We are huge fans of &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; &amp;amp; the cloud and think its
the long term future approach for running software for many folks.&lt;/p&gt;

&lt;p&gt;However lots of folks will still want to run Jenkins in the regular jenkins way via: &lt;code&gt;java
-jar jenkins.war&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So the idea of the Jenkins X sub project is to focus 100% on the Kubernetes and Cloud Native use
case and let the core Jenkins project focus on the classic java approach.&lt;/p&gt;

&lt;p&gt;One of Jenkins big strengths has always been its flexibility and huge ecosystem of different
plugins and capabilities. The separate Jenkins X sub project helps the community iterate and go fast
improving both the Cloud Native and the classic distributions of Jenkins in parallel.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Pull Request Reviews</title>
      <link>/docs/contributing/code/pullrequestreview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contributing/code/pullrequestreview/</guid>
      <description>
        
        
        

&lt;p&gt;The pull request is the main place we gate changes in Jenkins X. It&amp;rsquo;s here we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;run the tests (&lt;code&gt;make test-slow-integration&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;execute &lt;a href=&#34;https://github.com/jenkins-x/bdd-jx&#34; target=&#34;_blank&#34;&gt;end to end tests&lt;/a&gt; against static jenkins and Tekton&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x/jx/blob/2d54b6ef9a276f148cbc7cb10169e83238f2d83e/hack/linter.sh&#34; target=&#34;_blank&#34;&gt;check the change&lt;/a&gt; for linting issues&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x/jx/blob/2d54b6ef9a276f148cbc7cb10169e83238f2d83e/hack/gofmt.sh&#34; target=&#34;_blank&#34;&gt;check the code&lt;/a&gt; for formatting issues&lt;/li&gt;
&lt;li&gt;validate that &lt;a href=&#34;/docs/contributing/code/#code-generation&#34;&gt;all generated code&lt;/a&gt; (mocks, kubernetes clients, kubernetes openapi structs) are up to date&lt;/li&gt;
&lt;li&gt;validate that we can &lt;a href=&#34;/docs/contributing/code/#code-generation&#34;&gt;generate the apidoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;validate that your &lt;a href=&#34;/docs/contributing/code/#the-commit-message&#34;&gt;commits are conventional&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our philosophy is to automate the checks as much as possible - there are some that must still be done by a human but we
plan to reduce those as far as possible.&lt;/p&gt;

&lt;p&gt;These review guidelines apply to all github repos in &lt;a href=&#34;https://github.com/jenkins-x&#34; target=&#34;_blank&#34;&gt;https://github.com/jenkins-x&lt;/a&gt;, &lt;a href=&#34;https://github.com/jenkins-x-charts&#34; target=&#34;_blank&#34;&gt;https://github.com/jenkins-x-charts&lt;/a&gt;,
&lt;a href=&#34;https://github.com/jenkins-x-apps&#34; target=&#34;_blank&#34;&gt;https://github.com/jenkins-x-apps&lt;/a&gt;, &lt;a href=&#34;https://github.com/jenkins-x-quickstarts&#34; target=&#34;_blank&#34;&gt;https://github.com/jenkins-x-quickstarts&lt;/a&gt; and &lt;a href=&#34;https://github.com/jenkins-x-buildpacks&#34; target=&#34;_blank&#34;&gt;https://github.com/jenkins-x-buildpacks&lt;/a&gt;.
A repository with the &lt;code&gt;proof-of-concept&lt;/code&gt; label does not have to follow these guidelines. If we decide that the proof
of concept is going to become the longterm solution the &lt;code&gt;proof-of-concept&lt;/code&gt; label should be removed and the code in the
repository should be reviewed to ensure that these guidelines are met (and any remedial action needed added to the issue
tracker and scheduled).&lt;/p&gt;

&lt;h1 id=&#34;getting-your-pr-merged&#34;&gt;Getting your PR merged&lt;/h1&gt;

&lt;p&gt;In order to get your PR merged you&amp;rsquo;ll need to get a pass on all the automated checks. You&amp;rsquo;ll also need a maintainer to
approve the change using &lt;code&gt;/lgtm&lt;/code&gt;. In order to get an &lt;code&gt;/lgtm&lt;/code&gt; it helps to give a little bit of context to your PR in the
body of the PR - an essay is not necessary (or helpful!).&lt;/p&gt;

&lt;p&gt;We believe that the person who knows the most about the change is the author of the change and that the role of the approver
is to try to spot any functional or non-functional problems that the change might introduce. We&amp;rsquo;ll cover this in more
detail in &amp;ldquo;Approving a PR&amp;rdquo;. If you are uncertain about a part (or all) of the change please do mention this either in
the PR or as an inline comment as this means the approver can focus on the right part.&lt;/p&gt;

&lt;p&gt;All PRs are approved by a maintainer, and for all non-experimental repositories that maintainer must be a different
individual to the author.&lt;/p&gt;

&lt;p&gt;And above all, remember that as a PR author it&amp;rsquo;s your responsibility to get your PR merged!&lt;/p&gt;

&lt;h1 id=&#34;approving-a-pr&#34;&gt;Approving a PR&lt;/h1&gt;

&lt;p&gt;Your five principal tasks as an approver are to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;verify that the change is of overall benefit to Jenkins X&lt;/li&gt;
&lt;li&gt;spot potential functional or non-functional problems with a PR&lt;/li&gt;
&lt;li&gt;ensure any non-automated checks pass&lt;/li&gt;
&lt;li&gt;signal when a PR needs security review by applying the &lt;code&gt;needs-security-review&lt;/code&gt; label and wait with the approval
until a security person reviews the changes and removes the label&lt;/li&gt;
&lt;li&gt;identify when a PR requires some documentation by adding the &lt;code&gt;needs-docs&lt;/code&gt; label and also request to author
to create a follow up issue with label &lt;code&gt;area/docs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Verifying that the change is of &lt;strong&gt;overall benefit&lt;/strong&gt; is your most important responsibility as a PR approver. By default
we assume that changes are beneficial and that it is the responsibility of the approver to identify if the change would
be detrimental (rather than requiring the author to prove or assert benefit in all cases).&lt;/p&gt;

&lt;p&gt;If, as a PR approver, you feel that a PR is detrimental to Jenkins X you should:&lt;/p&gt;

&lt;p&gt;1) Place the PR on hold using the &lt;code&gt;/hold&lt;/code&gt; command, with the comment &amp;ldquo;I want to discuss whether this PR is beneficial or
not before approving. I&amp;rsquo;ll start a discussion in the #jenkins-x-dev channel shortly to discuss my concerns.&amp;rdquo;
2) Once you have started a discussion, add a comment with a PR with a link to the discussion
3) Once you have have reached mutual agreement update the PR:
   * Summarize the discussion on the PR
   * If you agree that the PR is ok or mostly ok (but need some changes) follow the standard approval process outlined in
     this document
   * If you agree that the PR is not ok close it with a the comment &amp;ldquo;We&amp;rsquo;ve agreed to not merge this PR&amp;rdquo;&lt;/p&gt;

&lt;p&gt;These sorts of discussions have the potential to become heated. Whilst we advise starting a discussion on slack we would
strongly encourage you to have a quick call with anyone interested if you can&amp;rsquo;t quickly (quickly means a couple of
messages, a minute discussion or a few sentances) reach agreement with the PR author to hash out what to do. You may also
want to consider asking a third developer to act as a facilitator/moderator to help you stay on track with the discussion.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This process is intentionally onerous on the approver as we feel change creates opportunity and that there must be a
good reason to prevent change that you can justify and explain. That does not diminish the responsibility on every
approver to ensure that a change is of benefit, and you will have the full support of all members of the project in
challenging the benefit even if some of the members disagree with your challenge!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Functional problems&lt;/strong&gt; are might potentially cause the code to not function as described on one of the PR, an attached issue,
an external document or PR against the docs repo. Examples might include missing prompts or questions, incomplete or
misleading helptext or an API that doesn&amp;rsquo;t make sense.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Non-functional problems&lt;/strong&gt; are that set of problems that don&amp;rsquo;t affect the functioning of the program but are known to cause
problems. An exhaustive list of non-functional problems the reviewer should check for is maintained here, and this list
must be updated when new non-functional areas for review are identified.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Too many files in a package. Go uses a lot of memory at compilation time and large packages can cause compilation to
crash. This is particularly a problem when running a test suite as we like to run tests in parallel for speed. Approvers
should use their discretion but as a rule of thumb any new functionality should go in it&amp;rsquo;s own package and not be
added to an existing package as a number (e.g. &lt;code&gt;kube&lt;/code&gt;, &lt;code&gt;util&lt;/code&gt;, &lt;code&gt;cmd&lt;/code&gt;) are already far too large&lt;/li&gt;
&lt;li&gt;Duplicated functionality. The codebase is large, and has many dependencies. When writing a new feature it&amp;rsquo;s often easy
to miss existing functions or dependency that do what you need, and add a new function or dependency. Approvers should
try to identify a duplicated dependencies or functions and ask for them to be consolidated.&lt;/li&gt;
&lt;li&gt;Excessive custom resource creation. Etcd struggles with too many custom resources being created (e.g. we saw 50k created)
by some errant code in one day recently. Approvers should check that the code won&amp;rsquo;t result in too many custom resources
being created - think about the complexity (is it linear, polynomial, exponential etc.). If a lot of custom resources are
being created, then ensure there is some form of garbage collection.&lt;/li&gt;
&lt;li&gt;Pushing secrets to source control. Validate that the code doesn&amp;rsquo;t risk pushing secrets&lt;/li&gt;
&lt;li&gt;Non-intuitive behavior that doesn&amp;rsquo;t have a comment. We don&amp;rsquo;t require comments for code that is logical and makes sense
but sometimes we have to write code in a certain way to deal with external circumstances. You can easily identify this
kind of code - if your reactions is &amp;ldquo;WTF&amp;rdquo; then it probably needs a comment. On the other hand if your reaction is
&amp;ldquo;I don&amp;rsquo;t understand this&amp;rdquo; then that&amp;rsquo;s not a good indication of non-intuitive code!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Security review&lt;/strong&gt; should be requested for any changes in security sensitive areas such as secrets handling with or without
vault, authentication/authorization, cloud service accounts and permissions, commands dealing with credentials, changes to
RBAC rules in various helm charts, changes to TLS configuration and so on.&lt;/p&gt;

&lt;p&gt;Non automated checks currently include:
* for a PR that includes a new feature, ensure that there is an associated PR for documentation
* That the commit message type (i.e. &lt;code&gt;fix&lt;/code&gt;, &lt;code&gt;chore&lt;/code&gt;, &lt;code&gt;feat&lt;/code&gt; or &lt;code&gt;BREAKING CHANGE&lt;/code&gt;) is correct as this will affect the release number used.
* Changes introduced to debug or test the PR being committed (e.g. changes to the test repo in use)&lt;/p&gt;

&lt;p&gt;As an approver there are a number of traps it&amp;rsquo;s very easy to fall into when reviewing a pull request. We regard these as
bad behaviors and a PR author or another community member should call out an approver if one of these behaviors is noticed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;requesting stylistic changes - &amp;ldquo;That&amp;rsquo;s not how &lt;strong&gt;I&lt;/strong&gt; would have done it!&amp;ldquo;, &amp;ldquo;Could you rename that variable/func/package
to &lt;code&gt;XXX&lt;/code&gt;&amp;rdquo;. As an approver you normally have the ability to edit the PR directly, you should make any changes like this
yourself.&lt;/li&gt;
&lt;li&gt;requesting trivial changes. As an approver you normally have the ability to edit the PR directly, you should make any
changes like this yourself.&lt;/li&gt;
&lt;li&gt;Requesting clarification of how something works. This is unhelpful as PR discussions are essentially lost when the PR
is merged. If you don&amp;rsquo;t understand how something works, puzzle over it for 5 minutes, clone the branch, run a test and
use your debugger. If you are still struggling then ask the author on slack and explain why you can&amp;rsquo;t understand it. The
author should then update the PR either with some comments or different code. You should also post a short summary back
on to the PR, focusing on the &amp;ldquo;why&amp;rdquo; - in other words why were you confused and why did the change fix it.&lt;/li&gt;
&lt;li&gt;Discussions about a change. If you need to discuss a change, then use #jenkins-x-dev on slack or do a call
(advertising it on slack ideally). Once you&amp;rsquo;ve got a conclusion make a quick note of that on the PR.&lt;/li&gt;
&lt;li&gt;Tangents. There are many problems in the codebase, but don&amp;rsquo;t be tempted to try to solve all of them in a review. Focus
on what problems this PR will cause.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Above all, remember that as an approver your role is not to make the code into something that you would have written
but to check it won&amp;rsquo;t cause a problem.&lt;/p&gt;

&lt;h1 id=&#34;future-enhancements-planned&#34;&gt;Future Enhancements Planned&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Switch config on all repos to use &lt;code&gt;lgtm&lt;/code&gt; plugin not &lt;code&gt;approval&lt;/code&gt; plugin, except those with the &lt;code&gt;proof-of-concept&lt;/code&gt; label&lt;/li&gt;
&lt;li&gt;Consider using something like &lt;a href=&#34;https://pullpanda.com/assigner&#34; target=&#34;_blank&#34;&gt;https://pullpanda.com/assigner&lt;/a&gt; to allocate reviewers automatically&lt;/li&gt;
&lt;li&gt;Add code coverage tools and implement a ratchet. For example, if the overall coverage is 40% then the coverage of the
change would have to be 50%. We will decide the size of the ratchet as part of this. The goal here is to steadily
improve the coverage&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Worked Example</title>
      <link>/docs/contributing/addons/worked-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contributing/addons/worked-example/</guid>
      <description>
        
        
        

&lt;p&gt;In this worked example we will implement the functionality of the classic &lt;a href=&#34;https://wiki.jenkins.io/display/JENKINS/JUnit+Plugin&#34; target=&#34;_blank&#34;&gt;JUnit Plugin&lt;/a&gt; from Jenkins in Jenkins X as a series of extensions to Jenkins X.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This guide is still a work in progress!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;functional-requirements&#34;&gt;Functional Requirements&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Collect JUnit XML files from build&lt;/li&gt;
&lt;li&gt;Associate with pipeline / pipeline step execution&lt;/li&gt;
&lt;li&gt;Notify user of URL to view test results&lt;/li&gt;
&lt;li&gt;Provide historical/trend view of tests&lt;/li&gt;
&lt;li&gt;Allow test results to affect build health&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;implementation&#34;&gt;Implementation&lt;/h1&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A working installation of &lt;code&gt;jx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A working Jenkins X cluster&lt;/li&gt;
&lt;li&gt;A working local install of Java and Maven&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;collect-junit-xml-files-from-build&#34;&gt;Collect JUnit XML files from build&lt;/h2&gt;

&lt;h3 id=&#34;create-a-sample-project&#34;&gt;Create a sample project&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll start by creating a sample Java project which will run some tests.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;jx create quickstart -f spring-boot-web&lt;/code&gt;. You can accept the defaults when prompted.&lt;/li&gt;
&lt;li&gt;Import the created sources into your favorite IDE.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open &lt;code&gt;pom.xml&lt;/code&gt; and add JUnit as a dependency:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
  &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
  &amp;lt;version&amp;gt;4.12&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create the file &lt;code&gt;src/test/java/jenkinsx/example/springboot/WelcomeControllerTest.java&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Copy and paste this code into the &lt;code&gt;WelcomeControllerTest&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package jenkinsx.example.springboot;

import org.junit.Assert;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class WelcomeControllerTest {

    @Test
    public void testWelcome() {
        WelcomeController wc = new WelcomeController();
        Map&amp;lt;String, Object&amp;gt; res = new HashMap&amp;lt;String, Object&amp;gt;();
        wc.welcome(res);
        Assert.assertEquals(res.get(&amp;quot;message&amp;quot;), &amp;quot;Hello World&amp;quot;);
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Validate your changes by running &lt;code&gt;mvn test&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Commit your changes and make sure the app makes it to staging in Jenkins X.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Our test reports will be generated in Jenkins X build pods, so we want to use that for development. Jenkins X DevPods make that easy. Run &lt;code&gt;jx create devpod --sync&lt;/code&gt; in your project.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Validate the DevPod is working by running &lt;code&gt;mvn test&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;generate-a-human-readable-report&#34;&gt;Generate a Human Readable Report&lt;/h3&gt;

&lt;p&gt;By default Maven Surefire doesn&amp;rsquo;t generate HTML files, just XML reports. We want people to be able to look at the reports, as well as be able to submit the XML for analysis.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the DevPod run &lt;code&gt;mvn install surefire-report:report&lt;/code&gt;. Validate that &lt;code&gt;target/site/surefire-report.html&lt;/code&gt; is generated.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a script &lt;code&gt;junit.sh&lt;/code&gt; in the sample project with this code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Generate the HTML report
mvn surefire-report:report
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;store-the-reports&#34;&gt;Store the reports&lt;/h3&gt;

&lt;p&gt;We need a place to store the reports. A simple Go program will suffice for now.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;jx create quickstart -f spring-boot-web&lt;/code&gt;. You can accept the defaults when prompted.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Replace the &lt;code&gt;main.go&lt;/code&gt; contents with this code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;package main

import (
  &amp;quot;fmt&amp;quot;
  &amp;quot;io/ioutil&amp;quot;
  &amp;quot;log&amp;quot;
  &amp;quot;net/http&amp;quot;
  &amp;quot;os&amp;quot;
  &amp;quot;path/filepath&amp;quot;
)

const maxUploadSize = 2 * 1024 * 1024 // 2 MB
const uploadPath = &amp;quot;/reports&amp;quot;
const downloadPort = 8080
const uploadPort = 8081
const bind = &amp;quot;0.0.0.0&amp;quot;

func main() {
  go uploadServer()
  downloadServer()
}

func downloadServer() {
  server:= http.NewServeMux()
  server.Handle(&amp;quot;/&amp;quot;, http.FileServer(http.Dir(uploadPath)))
  log.Printf(&amp;quot;Download server listening on %s:%d\n&amp;quot;, bind, downloadPort)
  http.ListenAndServe(fmt.Sprintf(&amp;quot;%s:%d&amp;quot;, bind, downloadPort), server)
}

func uploadServer() {
  server:= http.NewServeMux()
  server.HandleFunc(&amp;quot;/&amp;quot;, uploadFileHandler())
  log.Printf(&amp;quot;Upload server listening on %s:%d\n&amp;quot;, bind, uploadPort)
  http.ListenAndServe(fmt.Sprintf(&amp;quot;%s:%d&amp;quot;, bind, uploadPort), server)
}

func uploadFileHandler() http.HandlerFunc {
  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
    // validate file size
    r.Body = http.MaxBytesReader(w, r.Body, maxUploadSize)
    if err := r.ParseMultipartForm(maxUploadSize); err != nil {
      log.Println(err)
      renderError(w, &amp;quot;FILE_TOO_BIG&amp;quot;, http.StatusBadRequest)
      log.Println(err)
      return
    }

    // parse and validate file and post parameters
    file, _, err := r.FormFile(&amp;quot;upload&amp;quot;)
    if err != nil {
      renderError(w, &amp;quot;INVALID_FILE&amp;quot;, http.StatusBadRequest)
      log.Println(err)
      return
    }
    defer file.Close()
    fileBytes, err := ioutil.ReadAll(file)
    if err != nil {
      renderError(w, &amp;quot;INVALID_FILE&amp;quot;, http.StatusBadRequest)
      log.Println(err)
      return
    }
    filename, dir := filepath.Split(r.URL.Path)
    newPath := filepath.Join(dir, filename)

    err = os.MkdirAll(dir, os.FileMode(0755))
    if err != nil {
      renderError(w, &amp;quot;CANT_CREATE_DIR&amp;quot;, http.StatusInternalServerError)
      log.Println(err)
      return
    }
    // write file
    newFile, err := os.Create(newPath)
    if err != nil {
      renderError(w, &amp;quot;CANT_WRITE_FILE&amp;quot;, http.StatusInternalServerError)
      log.Println(err)
      return
    }
    defer newFile.Close() // idempotent, okay to call twice
    if _, err := newFile.Write(fileBytes); err != nil || newFile.Close() != nil {
      renderError(w, &amp;quot;CANT_WRITE_FILE&amp;quot;, http.StatusInternalServerError)
      log.Println(err)
      return
    }
    w.Write([]byte(&amp;quot;SUCCESS&amp;quot;))
  })
}

func renderError(w http.ResponseWriter, message string, statusCode int) {
  w.WriteHeader(http.StatusBadRequest)
  w.Write([]byte(message))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code will create an HTTP server that listens on two ports. It listens on 8080 to serve files from the &lt;code&gt;/reports&lt;/code&gt; directory, and listens on 8081 for file uploads (using the URL path as the path as the location under &lt;code&gt;/reports&lt;/code&gt; to store the file). By listening on different ports for download and upload we can easily expose the downloads service outside the cluster, but restrict the uploads service to inside the cluster meaning we have no need to secure the transport.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll add authentication to the upload endpoint at a later point.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We need to store the reports somewhere, and in Kubernetes this means using a volume. Add this snippet to the bottom of &lt;code&gt;charts/jenkins-x-reports/templates/deployment.yaml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;      volumes:
      - name: {{ .Values.service.reportVolumeName }}
        emptyDir: {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and add this snippet to the container (just below above &lt;code&gt;ports&lt;/code&gt; will work well):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;        volumeMounts:
        - name: {{ .Values.service.reportVolumeName }}
          mountPath: {{ .Values.service.reportMountPath }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now modify &lt;code&gt;charts/jenkins-x-reports/values.yaml&lt;/code&gt; and modify the &lt;code&gt;service&lt;/code&gt; and add (just after &lt;code&gt;internalPort&lt;/code&gt; will work well):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;  reportVolumeName: reports-volume
  reportMountPath: /reports
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll notice that we&amp;rsquo;ve used &lt;code&gt;emptyDir{}&lt;/code&gt; to store the reports - this is transient and reports will be lost when the pod dies. We&amp;rsquo;ll replace this with a persistent volume later.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Modify the &lt;code&gt;Dockerfile&lt;/code&gt; to expose port &lt;code&gt;8081&lt;/code&gt; as well by adding the line &lt;code&gt;EXPOSE 8081&lt;/code&gt; just after &lt;code&gt;EXPOSE 8080&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Modify &lt;code&gt;charts/jenkins-x-reports/values.yaml&lt;/code&gt; and add the values for the upload service just after the existing service:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;serviceUpload:
  name: jenkins-x-reports-upload
  type: ClusterIP
  externalPort: 80
  internalPort: 8081
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how we&amp;rsquo;ve given it a unique name, set the internal port correctly and removed the annotations that instruct Jenkins X to expose the service outside the cluster.&lt;/p&gt;

&lt;p&gt;We now need to create a template for these values. Add the file &lt;code&gt;charts/jenkins-x-reports/templates/service-upload.yaml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  apiVersion: v1
  kind: Service
  metadata:
  {{- if .Values.serviceUpload.name }}
    name: {{ .Values.serviceUpload.name }}
  {{- else }}
    name: {{ template &amp;quot;fullname&amp;quot; . }}
  {{- end }}
    labels:
      chart: &amp;quot;{{ .Chart.Name }}-{{ .Chart.Version | replace &amp;quot;+&amp;quot; &amp;quot;_&amp;quot; }}&amp;quot;
  {{- if .Values.serviceUpload.annotations }}
    annotations:
  {{ toYaml .Values.serviceUpload.annotations | indent 4 }}
  {{- end }}
  spec:
    type: {{ .Values.serviceUpload.type }}
    ports:
    - port: {{ .Values.serviceUpload.externalPort }}
      targetPort: {{ .Values.serviceUpload.internalPort }}
      protocol: TCP
      name: http
    selector:
      app: {{ template &amp;quot;fullname&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This file is simply a copy of &lt;code&gt;service.yaml&lt;/code&gt; with the &lt;code&gt;service&lt;/code&gt; variable changed to &lt;code&gt;serviceUpload&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We also need to add the upload port to the list of container ports. Just below &lt;code&gt;containerPort: {{ .Values.service.internalPort }}&lt;/code&gt; add:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;          containerPort: {{ .Values.serviceUpload.internalPort }}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run this as an app on your Jenkins X cluster by pushing your code changes to GitHub. The app will build and can be tested in the staging environment.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Validate you can upload and download files. In the DevPod for the sample app run &lt;code&gt;curl -F upload=@target/site/surefire-report.html http://jenkins-x-reports-upload.jx-staging/test/1&lt;/code&gt; and then validate that the file is there by running &lt;code&gt;curl http://jenkins-x-reports.jx-staging/test/1&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Promote the app to production using &lt;code&gt;jx promote -a jenkins-x-reports -e production -v 0.0.1&lt;/code&gt; (assuming you are still on your first version of the app)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To POST all the JUnit artifacts to the reports server use this script&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

UPLOADED=uploaded.yaml
REPORT_HOST=`jx get urls -e production | grep -o http://jenkins-x-reports.jx-production.*`

function upload() {
    upload_junit_artifacts
}

function upload_junit_artifacts() {
    # Generate the HTML report
    mvn surefire-report:report
    upload_file target/site/surefire-report.html
    for f in target/surefire-reports/*.xml; do
        upload_file ${f}
    done
}

function upload_file() {
    [ -f &amp;quot;$1&amp;quot; ] || break
    filename=$(basename $1)
    path=$ORG/$APP_NAME/$VERSION/$filename
    set -x
    curl -s -F upload=@$1 http://jenkins-x-reports-upload.jx-production/$path
    set +x
    echo &amp;quot;    ${filename}: ${REPORT_HOST}/${path}&amp;quot; &amp;gt;&amp;gt; $UPLOADED
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make the script executable by running &lt;code&gt;chmod u+x junit.sh&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Tell Jenkins to execute the script by adding this snippet to the &lt;code&gt;Jenkinsfile&lt;/code&gt; just above the &lt;code&gt;jx step post build&lt;/code&gt; lines in both the &lt;code&gt;CI Build and push snapshot&lt;/code&gt; and &lt;code&gt;Build Release&lt;/code&gt; stages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;        sh &amp;quot;VERSION=`cat VERSION` ./junit.sh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So far we&amp;rsquo;ve had to add a script to the sample and modify the &lt;code&gt;Jenkinsfile&lt;/code&gt; to run the script. Later in this tutorial we&amp;rsquo;ll implement this functionality as a cross-cutting concern and be able to remove this from the sample project. But for now let&amp;rsquo;s focus on the functionality we need.&lt;/p&gt;

&lt;h3 id=&#34;create-an-index-of-reports&#34;&gt;Create an index of reports&lt;/h3&gt;

&lt;p&gt;In order to provide the user with access to reports we need to create a central list. A Kubernetes &lt;code&gt;ConfigMap&lt;/code&gt; is a simple way to store this information. A config map does have some limitations (they aren&amp;rsquo;t ideal for large amounts of rapidly changing data) so we&amp;rsquo;ll come back at a later stage and provide a better solution, but for now it allows us to focus on the user functionality.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll use one &lt;code&gt;ConfigMap&lt;/code&gt; per app, and we&amp;rsquo;ll use a standard naming pattern so that other tools can work out where the test report config map is for each app. We&amp;rsquo;ll store the config maps in the &lt;code&gt;jx&lt;/code&gt; namespace.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Update the &lt;code&gt;junit.sh&lt;/code&gt; script with these three functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
CM_NAME=$ORG-$APP_NAME-test-reports

function create_cm_if_needed() {
    if ! kubectl get cm $CM_NAME &amp;amp;&amp;gt; /dev/null; then
        echo &amp;quot;Creating ConfigMap $CM_NAME&amp;quot;
        kubectl create cm $CM_NAME
    fi
}

function init_patch() {
    rm -f $UPLOADED
    echo &amp;quot;data:&amp;quot; &amp;gt;&amp;gt; $UPLOADED
    echo &amp;quot;  $VERSION: |-&amp;quot; &amp;gt;&amp;gt; $UPLOADED
}

function update_cm() {
    set -x
    kubectl -v1 patch cm $CM_NAME --patch &amp;quot;$(cat $UPLOADED)&amp;quot;
    set +x
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;And update the &lt;code&gt;upload()&lt;/code&gt; function to call these functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;function upload() {
    create_cm_if_needed
    init_patch
    upload_junit_artifacts
    update_cm
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;visualize-the-test-results&#34;&gt;Visualize the test results&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll use Kibana and ElasticSearch to create dashboards to visualize the test results.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install ElasticSearch by running &lt;code&gt;helm install --name jenkins-x-reports-elasticsearch incubator/elasticsearch&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install Kibana by running &lt;code&gt;helm install stable/kibana --name=jenkins-x-reports-kibana --set service.annotations.&amp;quot;fabric8\.io/expose&amp;quot;=true --set files.&amp;quot;kibana\.yml&amp;quot;.&amp;quot;elasticsearch\.url&amp;quot;=http://jenkins-x-reports-elasticsearch-client:9200 --set  &amp;amp;&amp;amp; jx upgrade ingress&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The ingress upgrade will ask you a number of questions, and you can just accept the defaults. You can now access Kibana by running &lt;code&gt;jx get urls&lt;/code&gt; and copying the URL for &lt;code&gt;jenkins-x-reports-kibana&lt;/code&gt; into your browser.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a mapping for the JUnit XML format in Kibana by pasting this code into the Kibana console:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;PUT tests 
{
    &amp;quot;mappings&amp;quot;: {
      &amp;quot;junit&amp;quot;: { 
        &amp;quot;properties&amp;quot;: { 
        &amp;quot;errors&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot; },
        &amp;quot;failures&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot; },
        &amp;quot;name&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; },
        &amp;quot;noNamespaceSchemaLocation&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot; },
        &amp;quot;skipped&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot; },
        &amp;quot;tests&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot; },
        &amp;quot;time&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;double&amp;quot; },
        &amp;quot;xsi&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot; },
        &amp;quot;appName&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; },
        &amp;quot;org&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; },
        &amp;quot;version&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; },
        &amp;quot;timestamp&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;date&amp;quot; }
      }
      }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;An initial client for sending data to Kibana is available at (&lt;a href=&#34;https://github.com/pmuir/junit-runner&#34; target=&#34;_blank&#34;&gt;https://github.com/pmuir/junit-runner&lt;/a&gt;). Download it and get it building.
As we start to convert the functionality we&amp;rsquo;ve built so far to a Jenkins X extension, we&amp;rsquo;ll move the scripted code we&amp;rsquo;ve written so far into this Go program. For now, we can just use the current version.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add this function to &lt;code&gt;junit.sh&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
function dashboard() {
    curl https://github.com/pmuir/junit-runner/releases/download/v0.0.4/junit-runner &amp;gt; junit-runner
    chmod u+x junit-runner
    ./junit-runner
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and call it from &lt;code&gt;upload()&lt;/code&gt;. Push your changes to the sample repo and watch as Kibana starts to be populated with data.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;a-better-way-to-build-functionality&#34;&gt;A better way to build functionality&lt;/h3&gt;

&lt;p&gt;If you have built plugins for something like Jenkins or Eclipse, you will be used to building the functionality you need to run &amp;ldquo;in process&amp;rdquo; - inside the main process that the application is running (e.g. the Jenkins master). More recently a different approach to writing plugins has become more popular where you build the functionality as a separate process that is managed by the main process; this is the model used by VS Code for example. We would recommend using this approach in Jenkins X, and because Jenkins X is based on Kubernetes, that means using a separate container or Pod to build your functionality, and calling out to using REST APIs.&lt;/p&gt;

&lt;p&gt;In this case that means that it would be better to build the functionality we created in &lt;code&gt;junit-runner&lt;/code&gt; into a separate pod, rather than run it inside the build pod. As it so happens we already have a pod - the one we built to store and serve the test artifacts.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s open that project up, and move the code which transforms the JUnit XML and sends it to elastic search into it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open the &lt;code&gt;main.go&lt;/code&gt; file and add this function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func toJson(json []byte) ([]byte, error) {
  m, err := mxj.NewMapJson(json)
  if err != nil {
    return nil, err
  }

  if err != nil {
    return nil, err
  }
  // Kibana is quite restrictive in the way it accepts JSON, so just rebuild the JSON entirely!

  utc, _ := time.LoadLocation(&amp;quot;UTC&amp;quot;)
  data := map[string]interface{} {
    &amp;quot;org&amp;quot;: os.Getenv(&amp;quot;ORG&amp;quot;),
    &amp;quot;appName&amp;quot;: os.Getenv(&amp;quot;APP_NAME&amp;quot;),
    &amp;quot;version&amp;quot;: os.Getenv(&amp;quot;VERSION&amp;quot;),
    &amp;quot;errors&amp;quot;: m.ValueOrEmptyForPathString(&amp;quot;testsuite.-errors&amp;quot;),
    &amp;quot;failures&amp;quot;: m.ValueOrEmptyForPathString(&amp;quot;testsuite.-failures&amp;quot;),
    &amp;quot;testsuiteName&amp;quot;: m.ValueOrEmptyForPathString(&amp;quot;testsuite.-name&amp;quot;),
    &amp;quot;skippedTests&amp;quot;: m.ValueOrEmptyForPathString(&amp;quot;testsuite.-skipped&amp;quot;),
    &amp;quot;tests&amp;quot;: m.ValueOrEmptyForPathString(&amp;quot;testsuite.-tests&amp;quot;),
    &amp;quot;time&amp;quot;: m.ValueOrEmptyForPathString(&amp;quot;testsuite.-time&amp;quot;),
    &amp;quot;timestamp&amp;quot;: time.Now().In(utc).Format(&amp;quot;2006-01-02T15:04:05Z&amp;quot;),
    // TODO Add the TestCases
  }
  fmt.Printf(&amp;quot;%s&amp;quot;, data)
  return json2.Marshal(data)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function comes directly from the &lt;code&gt;junit-runner&lt;/code&gt; code and is responsible for building a piece of JSON that is used by Kibana.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We also need to add this function from the &lt;code&gt;junit-runner&lt;/code&gt; code which reads the XML file, converts it to JSON using &lt;code&gt;toJson()&lt;/code&gt;, and then sends it onwards to our ElasticSearch instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func sendToElasticSearch(reader io.Reader, path string) error {
  _, json, err := x2j.XmlReaderToJson(reader)
  if err != nil {
    return err
  }
  json, err = toJson(json)
  fmt.Printf(&amp;quot;Successfully annnotated JUnit result with build info\n&amp;quot;)
  if err != nil {
    return err
  }
  req, err := http.NewRequest(&amp;quot;POST&amp;quot;, url, bytes.NewBuffer(json))

  req.Header.Set(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;)

  if err != nil {
    return err
  }

  client := &amp;amp;http.Client{}
  resp, err := client.Do(req)
  if err != nil {
    return err
  }
  defer resp.Body.Close()
  if (resp.StatusCode &amp;gt;= 200 &amp;amp;&amp;amp; resp.StatusCode &amp;lt; 300 ) {
    fmt.Printf(&amp;quot;Sent %s to %s\n&amp;quot;, path, url)
  } else {
    body, _ := ioutil.ReadAll(resp.Body)
    return errors.New(fmt.Sprintf(&amp;quot;HTTP status: %s; HTTP Body: %s\n&amp;quot;, resp.Status, body))
  }
  return nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we need to add a const to the go file which specifies the URL of the ElasticSearch instance. Add this to the top of &lt;code&gt;main.go&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const url = &amp;quot;http://jenkins-x-reports-elasticsearch-client:9200/tests/junit/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you&amp;rsquo;ve resolved all the imports, you&amp;rsquo;ll notice that we still have some errors. That&amp;rsquo;s because we are missing a dependency on the &lt;code&gt;mxj&lt;/code&gt; library which we are using to work with XML and JSON. Make sure you have these imports:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;  &amp;quot;github.com/clbanning/mxj&amp;quot;
  &amp;quot;github.com/clbanning/mxj/x2j&amp;quot;
  json2 &amp;quot;encoding/json&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then add this by running &lt;code&gt;dep init&lt;/code&gt; which will detect our dependency and set it up properly.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We&amp;rsquo;ll also need to call it for each JUnit XML file we receive. And only for JUnit files. We can use the HTTP headers for this:
Just above where we write the success message to the HTTP stream, add this code to call &lt;code&gt;sendToElasticSearch()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    if r.Header.Get(&amp;quot;X-Content-Type&amp;quot;) == &amp;quot;text/vnd.junit-xml&amp;quot; {
      err = sendToElasticSearch(r.Body, r.URL.Path)
      if err != nil {
        renderError(w, &amp;quot;CANT_SEND_TO_ELASTICSEATCH&amp;quot;, http.StatusInternalServerError)
        log.Println(err)
      }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Push your changes up to Git to have the updated server built on Jenkins X.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We now need to modify our script to send JUnit XML files with the mime type set to &lt;code&gt;text/vnd.junit-xml&lt;/code&gt;. In the &lt;code&gt;junit.sh&lt;/code&gt; file in the sample project modify the curl command in &lt;code&gt;upload_file()&lt;/code&gt; to add the header. The whole line should look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    curl -H &amp;quot;X-Content-Type: text/vnd.junit-xml&amp;quot; -s -F upload=@$1 http://jenkins-x-reports-upload.jx-production/$path
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are wondering why we use &lt;code&gt;X-Content-Type&lt;/code&gt; it is to avoid breaking the multipart form upload for the file!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;And of course we need to remove &lt;code&gt;junit-runner&lt;/code&gt;. Delete the &lt;code&gt;dashboard()&lt;/code&gt; function and remove the call to it from &lt;code&gt;upload()&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now, let&amp;rsquo;s clean things up a bit more by moving the code creating the configmap from the &lt;code&gt;junit.sh&lt;/code&gt; script into the &lt;code&gt;jenkins-x-reports&lt;/code&gt; code. First, we need to add a dependency on kubernetes-client to our code. Edit &lt;code&gt;Gopkg.toml&lt;/code&gt; and add:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[constraint]]
  name = &amp;quot;k8s.io/api&amp;quot;
  version = &amp;quot;kubernetes-1.11.0&amp;quot;

[[constraint]]
  name = &amp;quot;k8s.io/apimachinery&amp;quot;
  version = &amp;quot;kubernetes-1.11.0&amp;quot;
[[constraint]]
  name = &amp;quot;k8s.io/client-go&amp;quot;
  version = &amp;quot;kubernetes-1.11.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now we can add this function to create the Kubernetes client:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func createKubernetesClient() (*kubernetes.Clientset, error) {
  // creates the in-cluster config
  config, err := rest.InClusterConfig()
  if err != nil {
    return nil, err
  }
  // creates the clientset
  client, err := kubernetes.NewForConfig(config)
  if err != nil {
    return nil, err
  }
  return client, nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And call it by adding these lines to the top of &lt;code&gt;main()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;  client, err := createKubernetesClient()
  if err != nil {
    panic(err)
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We now need to pass it to the &lt;code&gt;uploadServer()&lt;/code&gt; function and change the signature of &lt;code&gt;uploadServer()&lt;/code&gt; to &lt;code&gt;func uploadServer(client *kubernetes.Clientset)&lt;/code&gt;, and then do the same to &lt;code&gt;uploadFileHandler()&lt;/code&gt;, changing the signature to &lt;code&gt;func uploadServer(client *kubernetes.Clientset)&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now, we can write a function that gets or creates the configmap:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func getOrCreateConfigMap(org string, app string, client kubernetes.Interface) (*corev1.ConfigMap, error) {
  cmName := fmt.Sprintf(&amp;quot;%s-%s-test-reports&amp;quot;, org, app)
  cm, err := client.CoreV1().ConfigMaps(cmNamespace).Get(cmName, metav1.GetOptions{})
  if err != nil {
    return nil, err
  }
  if cm == nil {
    return client.CoreV1().ConfigMaps(cmNamespace).Create(&amp;amp;corev1.ConfigMap{
      ObjectMeta: metav1.ObjectMeta{
        Name: cmName,
      },
    })
    if err != nil {
      return nil, err
    }
  }
  return cm, nil
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In order to pass the org name and the app name to the config map creator, we can pass them using HTTP Headers. We can call the config map creation from the &lt;code&gt;uploadFileHandler()&lt;/code&gt;, just before we write success by adding these lines to the top of the function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    // Get and validate headers
    org := r.Header.Get(&amp;quot;X-Org&amp;quot;)
    if org == &amp;quot;&amp;quot; {
      renderError(w, &amp;quot;MUST_PROVIDE_X-ORG_HEADER&amp;quot;, http.StatusInternalServerError)
      log.Println(&amp;quot;No X-ORG HEADER provided&amp;quot;)
    }
    app := r.Header.Get(&amp;quot;X-App&amp;quot;)
    if app == &amp;quot;&amp;quot; {
      renderError(w, &amp;quot;MUST_PROVIDE_X-APP_HEADER&amp;quot;, http.StatusInternalServerError)
      log.Println(&amp;quot;No X-APP HEADER provided&amp;quot;)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this to the bottom, just above the success message:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;getOrCreateConfigMap(org, app, client)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And before we forget, update the &lt;code&gt;junit.sh&lt;/code&gt; script to send these values. The curl command should now look like &lt;code&gt;curl -H &amp;quot;X-Content-Type: text/vnd.junit-xml&amp;quot; -H &amp;quot;X-ORG: ${ORG}&amp;quot; -H &amp;quot;X-APP: ${APP_NAME} -s -F upload=@$1&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now, let&amp;rsquo;s implement the function &lt;code&gt;updateConfigMap()&lt;/code&gt; to perform the actual patch. Use this function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func updateConfigMap(cm *corev1.ConfigMap, version string, filename string, url string, client kubernetes.Interface) (*corev1.ConfigMap, error){
  fmt.Printf(&amp;quot;Updating %s with data for %s and Data %s\n&amp;quot;, cm.Name, version, cm.Data )
  if cm.Data[version] == &amp;quot;&amp;quot; {
    cm.Data[version] = fmt.Sprintf(&amp;quot;|-\n&amp;quot;)
  }
  cm.Data[version] = fmt.Sprintf(&amp;quot;%s\n    %s: %s\n&amp;quot;, cm.Data[version], filename, url)
  return client.CoreV1().ConfigMaps(cmNamespace).Update(cm)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now we need to figure out the host URL for the report downloads. Use this function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func getReportHost(client kubernetes.Interface) (string, error) {
  svc, err := client.CoreV1().Services(&amp;quot;jx-production&amp;quot;).Get(&amp;quot;jenkins-x-reports&amp;quot;, metav1.GetOptions{})
  if err != nil {
    return &amp;quot;&amp;quot;, err
  }
  return svc.Annotations[&amp;quot;fabric8.io/exposeUrl&amp;quot;], nil
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We now need to wire it in. Add a version header to the top of the &lt;code&gt;uploadFileHandler()&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;version := r.Header.Get(&amp;quot;X-Version&amp;quot;)
if version == &amp;quot;&amp;quot; {
  renderError(w, &amp;quot;MUST_PROVIDE_X-VERSION_HEADER&amp;quot;, http.StatusInternalServerError)
  log.Println(&amp;quot;No X-VERSION HEADER provided&amp;quot;)
}   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And add just above the success message:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;cm, err := getOrCreateConfigMap(org, app, client)
    if err != nil {
        renderError(w, &amp;quot;ERROR_CREATING_CONFIG_MAP&amp;quot;, http.StatusInternalServerError)
        log.Println(err)
    }
    reportHost, err := getReportHost(client)
    if err != nil {
        renderError(w, &amp;quot;ERROR_CREATING_CONFIG_MAP&amp;quot;, http.StatusInternalServerError)
        log.Println(err)
    }

    url := fmt.Sprintf(&amp;quot;%s/%s/%s/%s/%s&amp;quot;, reportHost, org, app, version, filename)
    cm, err = updateConfigMap(cm, version, filename, url, client )
    if err != nil {
        renderError(w, &amp;quot;ERROR_UPDATING_CONFIG_MAP&amp;quot;, http.StatusInternalServerError)
        log.Println(err)
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We can also improve the way we are storing the files now, using the headers to create the path rather than just copying the path that was used for upload by changing the variable &lt;code&gt;dir&lt;/code&gt; to look more like &lt;code&gt;dir := filepath.Join(uploadPath, org, app, version)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Finally, let&amp;rsquo;s tidy up &lt;code&gt;junit.sh&lt;/code&gt; by removing the remnants of the patching code and adding the version header. Your final curl command should look like: &lt;code&gt;curl -H &amp;quot;X-Content-Type: text/vnd.junit-xml&amp;quot; -H &amp;quot;X-Org: ${ORG}&amp;quot; -H &amp;quot;X-App: ${APP_NAME}&amp;quot; -H &amp;quot;X-Version: ${VERSION}&amp;quot; -s -F upload=@$1 http://jenkins-x-reports-upload.jx-production/$filename&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;progress-review&#34;&gt;Progress Review&lt;/h2&gt;

&lt;p&gt;We still have some steps to complete.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add token based authentication for the upload endpoint to prevent random pieces of code updating it (it&amp;rsquo;s only accessible in the cluster anyway)&lt;/li&gt;
&lt;li&gt;Allow contribution to build health (requires additional JX support &lt;code&gt;jx step post&lt;/code&gt; and &lt;code&gt;jx step pre&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point the JX team have also learned that we want to build some additional extension points into Jenkins X:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;jx step post&lt;/code&gt; support for a &amp;lsquo;post build` steps. This will allow us to implement build health, as it will allow us to:

&lt;ul&gt;
&lt;li&gt;Inject additional steps into the build that allow us to run e.g. &lt;code&gt;mvn surefire-report:report&lt;/code&gt; without modifying the build&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jx step collect&lt;/code&gt; for collecting build artifact that will run even if the build fails

&lt;ul&gt;
&lt;li&gt;Add URLs to the &lt;code&gt;PipelineActivity&lt;/code&gt; CRD&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TODO complete the guide&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Apache License</title>
      <link>/docs/overview/license/</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/docs/overview/license/</guid>
      <description>
        
        
        



&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;Jenkins X is released under the Apache 2.0 license.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Version 2.0, January 2004&lt;/em&gt; &lt;br&gt;
&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34; target=&#34;_blank&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Terms and Conditions for use, reproduction, and distribution&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-definitions&#34;&gt;1. Definitions&lt;/h2&gt;

&lt;p&gt;“License” shall mean the terms and conditions for use, reproduction, and
distribution as defined by Sections 1 through 9 of this document.&lt;/p&gt;

&lt;p&gt;“Licensor” shall mean the copyright owner or entity authorized by the copyright
owner that is granting the License.&lt;/p&gt;

&lt;p&gt;“Legal Entity” shall mean the union of the acting entity and all other entities
that control, are controlled by, or are under common control with that entity.
For the purposes of this definition, “control” means &lt;strong&gt;(i)&lt;/strong&gt; the power, direct or
indirect, to cause the direction or management of such entity, whether by
contract or otherwise, or &lt;strong&gt;(ii)&lt;/strong&gt; ownership of fifty percent (50%) or more of the
outstanding shares, or &lt;strong&gt;(iii)&lt;/strong&gt; beneficial ownership of such entity.&lt;/p&gt;

&lt;p&gt;“You” (or “Your”) shall mean an individual or Legal Entity exercising
permissions granted by this License.&lt;/p&gt;

&lt;p&gt;“Source” form shall mean the preferred form for making modifications, including
but not limited to software source code, documentation source, and configuration
files.&lt;/p&gt;

&lt;p&gt;“Object” form shall mean any form resulting from mechanical transformation or
translation of a Source form, including but not limited to compiled object code,
generated documentation, and conversions to other media types.&lt;/p&gt;

&lt;p&gt;“Work” shall mean the work of authorship, whether in Source or Object form, made
available under the License, as indicated by a copyright notice that is included
in or attached to the work (an example is provided in the Appendix below).&lt;/p&gt;

&lt;p&gt;“Derivative Works” shall mean any work, whether in Source or Object form, that
is based on (or derived from) the Work and for which the editorial revisions,
annotations, elaborations, or other modifications represent, as a whole, an
original work of authorship. For the purposes of this License, Derivative Works
shall not include works that remain separable from, or merely link (or bind by
name) to the interfaces of, the Work and Derivative Works thereof.&lt;/p&gt;

&lt;p&gt;“Contribution” shall mean any work of authorship, including the original version
of the Work and any modifications or additions to that Work or Derivative Works
thereof, that is intentionally submitted to Licensor for inclusion in the Work
by the copyright owner or by an individual or Legal Entity authorized to submit
on behalf of the copyright owner. For the purposes of this definition,
“submitted” means any form of electronic, verbal, or written communication sent
to the Licensor or its representatives, including but not limited to
communication on electronic mailing lists, source code control systems, and
issue tracking systems that are managed by, or on behalf of, the Licensor for
the purpose of discussing and improving the Work, but excluding communication
that is conspicuously marked or otherwise designated in writing by the copyright
owner as “Not a Contribution.”&lt;/p&gt;

&lt;p&gt;“Contributor” shall mean Licensor and any individual or Legal Entity on behalf
of whom a Contribution has been received by Licensor and subsequently
incorporated within the Work.&lt;/p&gt;

&lt;h2 id=&#34;2-grant-of-copyright-license&#34;&gt;2. Grant of Copyright License&lt;/h2&gt;

&lt;p&gt;Subject to the terms and conditions of this License, each Contributor hereby
grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,
irrevocable copyright license to reproduce, prepare Derivative Works of,
publicly display, publicly perform, sublicense, and distribute the Work and such
Derivative Works in Source or Object form.&lt;/p&gt;

&lt;h2 id=&#34;3-grant-of-patent-license&#34;&gt;3. Grant of Patent License&lt;/h2&gt;

&lt;p&gt;Subject to the terms and conditions of this License, each Contributor hereby
grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,
irrevocable (except as stated in this section) patent license to make, have
made, use, offer to sell, sell, import, and otherwise transfer the Work, where
such license applies only to those patent claims licensable by such Contributor
that are necessarily infringed by their Contribution(s) alone or by combination
of their Contribution(s) with the Work to which such Contribution(s) was
submitted. If You institute patent litigation against any entity (including a
cross-claim or counterclaim in a lawsuit) alleging that the Work or a
Contribution incorporated within the Work constitutes direct or contributory
patent infringement, then any patent licenses granted to You under this License
for that Work shall terminate as of the date such litigation is filed.&lt;/p&gt;

&lt;h2 id=&#34;4-redistribution&#34;&gt;4. Redistribution&lt;/h2&gt;

&lt;p&gt;You may reproduce and distribute copies of the Work or Derivative Works thereof
in any medium, with or without modifications, and in Source or Object form,
provided that You meet the following conditions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;(a)&lt;/strong&gt; You must give any other recipients of the Work or Derivative Works a copy of
this License; and&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(b)&lt;/strong&gt; You must cause any modified files to carry prominent notices stating that You
changed the files; and&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(c)&lt;/strong&gt; You must retain, in the Source form of any Derivative Works that You distribute,
all copyright, patent, trademark, and attribution notices from the Source form
of the Work, excluding those notices that do not pertain to any part of the
Derivative Works; and&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(d)&lt;/strong&gt; If the Work includes a “NOTICE” text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.&lt;/p&gt;

&lt;h2 id=&#34;5-submission-of-contributions&#34;&gt;5. Submission of Contributions&lt;/h2&gt;

&lt;p&gt;Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.&lt;/p&gt;

&lt;h2 id=&#34;6-trademarks&#34;&gt;6. Trademarks&lt;/h2&gt;

&lt;p&gt;This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.&lt;/p&gt;

&lt;h2 id=&#34;7-disclaimer-of-warranty&#34;&gt;7. Disclaimer of Warranty&lt;/h2&gt;

&lt;p&gt;Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.&lt;/p&gt;

&lt;h2 id=&#34;8-limitation-of-liability&#34;&gt;8. Limitation of Liability&lt;/h2&gt;

&lt;p&gt;In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.&lt;/p&gt;

&lt;h2 id=&#34;9-accepting-warranty-or-additional-liability&#34;&gt;9. Accepting Warranty or Additional Liability&lt;/h2&gt;

&lt;p&gt;While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;END OF TERMS AND CONDITIONS&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;appendix-how-to-apply-the-apache-license-to-your-work&#34;&gt;APPENDIX: How to apply the Apache License to your work&lt;/h2&gt;

&lt;p&gt;To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets &lt;code&gt;[]&lt;/code&gt; replaced with your own identifying information. (Don&amp;rsquo;t include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same “printed page” as the copyright notice for easier identification within third-party archives.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Copyright [yyyy] [name of copyright owner]

Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add this as a file called &lt;code&gt;apache-notice.txt&lt;/code&gt; to the root of your repo&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Multiple Clusters</title>
      <link>/docs/reference/multi-cluster/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/docs/reference/multi-cluster/</guid>
      <description>
        
        
        

&lt;p&gt;A common requirement for a production setup is to isolate your Development, Staging and Production environments onto separate kubernetes clusters and to isolate the clusters from each other in separate cloud accounts or VPNs etc.&lt;/p&gt;

&lt;p&gt;You can do this by installing the &lt;code&gt;Environment Controller&lt;/code&gt; chart into your Staging or Production cluster.&lt;/p&gt;

&lt;h2 id=&#34;goal&#34;&gt;Goal&lt;/h2&gt;

&lt;p&gt;Our assumption with the Environment Controller is that we need something that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;runs inside your Staging or Production cluster to avoid having to expose write/admin access to Staging/Production outside of your cluster&lt;/li&gt;
&lt;li&gt;has a small with minimal RBAC footprint so it can be installed in any namespace in any Staging/Production cluster which are usually really locked down for security&lt;/li&gt;
&lt;li&gt;makes few assumptions about the cluster (e.g. does not depend on a particular Ingress controller)&lt;/li&gt;
&lt;li&gt;does not require access to the development cluster or anything else in Jenkins X other than the environments git repository and a docker + chart repository&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;creating-your-dev-cluster&#34;&gt;Creating your Dev cluster&lt;/h2&gt;

&lt;p&gt;If you are creating a new installation then when you use &lt;a href=&#34;/commands/jx_create_cluster&#34;&gt;jx create cluster&lt;/a&gt; or &lt;a href=&#34;/commands/jx_install&#34;&gt;jx install&lt;/a&gt; then please specify &lt;code&gt;--remote-environments&lt;/code&gt; to indicate that &lt;code&gt;Staging/Production&lt;/code&gt; environments will be remote from the development cluster.&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create cluster gke --remote-environments --tekton
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When creating your Environments via &lt;a href=&#34;/commands/jx_create_environment&#34;&gt;jx create environment&lt;/a&gt; you can also specify the environment is remote via the &lt;code&gt;--remote&lt;/code&gt; or answering &lt;code&gt;Y&lt;/code&gt; to the question when prompted.&lt;/p&gt;

&lt;p&gt;What this means is that if an environment is remote to the development cluster then we don&amp;rsquo;t register the release pipeline
of the environment in the Dev cluster; we leave that to the Environment Controller to perform running inside the remote cluster.&lt;/p&gt;

&lt;h2 id=&#34;configure-an-existing-dev-cluster&#34;&gt;Configure an existing Dev cluster&lt;/h2&gt;

&lt;p&gt;If you already have a Dev cluster that was setup with &lt;code&gt;Staging&lt;/code&gt; and &lt;code&gt;Production&lt;/code&gt; namespaces inside your Dev cluster then please do the following:&lt;/p&gt;

&lt;p&gt;Edit the environments to mark them as remote via &lt;a href=&#34;/commands/jx_edit_environment&#34;&gt;jx edit environment&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx edit env staging --remote 
jx edit env production --remote 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You need to manually disable the release pipeline in the Dev cluster.&lt;/p&gt;

&lt;p&gt;e.g. by removing the &lt;code&gt;postsubmit&lt;/code&gt; setting in your Prow configuration if you are using &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;serverless Jenkins X Pipelines and tekton&lt;/a&gt; - or comment out the &lt;code&gt;jx step helm apply&lt;/code&gt; command in your &lt;code&gt;Jenkinsfile&lt;/code&gt; if using static jenkins server&lt;/p&gt;

&lt;h2 id=&#34;installing-environment-controller&#34;&gt;Installing Environment Controller&lt;/h2&gt;

&lt;p&gt;First you need to connect to your remote kubernetes cluster for &lt;code&gt;Staging&lt;/code&gt; or &lt;code&gt;Production&lt;/code&gt; using your managed kubernetes provider&amp;rsquo;s tooling.&lt;/p&gt;

&lt;p&gt;You also need to have RBAC karma to be able to &lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/rbac/#privilege-escalation-prevention-and-bootstrapping&#34; target=&#34;_blank&#34;&gt;escalate roles&lt;/a&gt; for &lt;code&gt;Role&lt;/code&gt; and/or &lt;code&gt;ClusterRole&lt;/code&gt; permissions.&lt;/p&gt;

&lt;p&gt;Then to install the Environment Controller use &lt;a href=&#34;/commands/jx_create_addon_environment/&#34;&gt;jx create addon envctl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You need to specify the environments git repository and docker registry host and on GCP the project ID:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create addon envctl -s https://github.com/myorg/env-production.git --project-id myproject --docker-registry gcr.io --cluster-rbac true --user mygituser --token mygittoken
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The installer needs a user + API token for the git repository which it will prompt you for the known values from your &lt;code&gt;~/.jx/gitAuth.yaml&lt;/code&gt; file so if you already installed Jenkins X it should be able to default those values for you.&lt;/p&gt;

&lt;p&gt;If you prefer you can install the helm chart &lt;code&gt;jenkins-x/environment-controller&lt;/code&gt; directly with helm by specifying the &lt;a href=&#34;https://github.com/jenkins-x-charts/environment-controller/blob/master/environment-controller/values.yaml#L3-L19&#34; target=&#34;_blank&#34;&gt;required values from the values.yaml file&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;installing-ingress-controller&#34;&gt;Installing Ingress Controller&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t already have any kind of Ingress Controller in your remote &lt;code&gt;Staging&lt;/code&gt; / &lt;code&gt;Production&lt;/code&gt; cluster then it is recommend - particularly if you want to try out our &lt;a href=&#34;/docs/getting-started/first-project/create-quickstart/&#34;&gt;quickstarts&lt;/a&gt; which depend on Ingress to be able to be used from a web browser.&lt;/p&gt;

&lt;p&gt;To install the default ingress controller into a remote cluster (which doesn&amp;rsquo;t have Jenkins X installed) you can use the command &lt;a href=&#34;/commands/jx_create_addon_ingress/&#34;&gt;jx create addon ingctl&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create addon ingctl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will setup the Ingress Controller; find its external domain and then setup a Pull Request on the environments git repository so that future promotions in the environment will use the correct &lt;code&gt;domain&lt;/code&gt; value on the generated &lt;code&gt;Ingress&lt;/code&gt; resources.&lt;/p&gt;

&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;

&lt;p&gt;On startup the Environment Controller registers itself into the github repository as a webhook endpoint using its LoadBalancer service IP address. If you are using a custom ingress/DNS endpoint you can override this via the &lt;code&gt;webhookUrl&lt;/code&gt; chart value or &lt;a href=&#34;/commands/jx_create_addon_environment/&#34;&gt;&amp;ndash;webhook-url CLI option&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whenever there is a push to the &lt;code&gt;master&lt;/code&gt; branch (PRs and feature branches are handled by your Development cluster) the Environment Controller triggers a new &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Jenkins X Pipeline&lt;/a&gt; for the Promotion. All other push events on other branches are ignored (as they are processed by the Development cluster).&lt;/p&gt;

&lt;p&gt;Then the tekton controller turns this set of Pipeline resources is turned into one or more Pods which run the pipeline. By default promotion pipelines just use a single pod - but you can &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/#customising-the-pipelines&#34;&gt;customise your deployment pipeline&lt;/a&gt; which may use sequential/parallel tasks which result in multiple pods.&lt;/p&gt;

&lt;p&gt;Because Environment Controller reacts purely to merges to the environment git repository and we are using canonical git source code; it works with both Static Jenkins Servers and &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;serverless Jenkins X Pipelines and tekton&lt;/a&gt; in the Development cluster.&lt;/p&gt;

&lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;

&lt;p&gt;There was a demo of using environment controller in the &lt;a href=&#34;/community/april-18/&#34;&gt;April 19, 2019 Office Hours&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;known-limitations&#34;&gt;Known limitations&lt;/h2&gt;

&lt;p&gt;The following things are not yet automatically configured for you but we hope to automate them soon:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;currently you have to manually add the &lt;code&gt;CHART_REPOSITORY&lt;/code&gt; environment variable into the &lt;code&gt;jenkins-x.yml&lt;/code&gt; file in your environment git repository. e.g. a &lt;code&gt;jenkins-x.yml&lt;/code&gt; file like this will do the trick - using the real URL to your chartmuseum (use &lt;code&gt;jx open&lt;/code&gt; in your development cluster:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;pipelineConfig:
env:
- name: CHART_REPOSITORY
value: http://chartmuseum.jx.1.2.3.4.nip.io
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can do the above via the &lt;a href=&#34;/commands/jx_create_variable/&#34;&gt;jx create var -n CHART_REPOSITORY&lt;/a&gt; command if you are inside a clone of the staging/production git repository - then git commit + merge the change.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Build Packs</title>
      <link>/docs/reference/components/build-packs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/reference/components/build-packs/</guid>
      <description>
        
        
        

&lt;p&gt;We use &lt;a href=&#34;https://draft.sh/&#34; target=&#34;_blank&#34;&gt;draft&lt;/a&gt; style &lt;em&gt;build packs&lt;/em&gt; for different languages, runtimes and build tools to add the necessary configuration files to projects as we &lt;a href=&#34;/docs/using-jx/common-tasks/import/&#34;&gt;import them&lt;/a&gt; or &lt;a href=&#34;/docs/using-jx/common-tasks/create-spring/&#34;&gt;create&lt;/a&gt; &lt;a href=&#34;/docs/getting-started/first-project/create-quickstart/&#34;&gt;them&lt;/a&gt; so that we can build and deploy them in kubernetes.&lt;/p&gt;

&lt;p&gt;The build packs are used to default the following files if they do not already exist in the project being created/imported:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; to turn the code into an immutable docker image for running on kubernetes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jenkinsfile&lt;/code&gt; to define the declarative Jenkins pipeline to define the CI/CD steps for the application&lt;/li&gt;
&lt;li&gt;helm chart in the &lt;code&gt;charts&lt;/code&gt; folder to generate the kubernetes resources to run the application on kubernetes&lt;/li&gt;
&lt;li&gt;a &lt;em&gt;preview chart&lt;/em&gt; in the &lt;code&gt;charts/preview&lt;/code&gt; folder to define any dependencies for deploying a &lt;a href=&#34;/docs/concepts/features/#preview-environments&#34;&gt;preview environment&lt;/a&gt; on a Pull Request&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The default build packs are at &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34; target=&#34;_blank&#34;&gt;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&lt;/a&gt; with a folder for each language or build tool.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;jx&lt;/code&gt; command line clones the build packs to your &lt;code&gt;.~/.jx/draft/packs/&lt;/code&gt; folder and updates them via a &lt;code&gt;git pull&lt;/code&gt; each time you try create or import a project.&lt;/p&gt;

&lt;h2 id=&#34;pipeline-extension-model&#34;&gt;Pipeline extension model&lt;/h2&gt;

&lt;p&gt;As part of the move to &lt;a href=&#34;/docs/managing-jx/common-tasks/cloud-native-jenkins/&#34;&gt;cloud native Jenkins&lt;/a&gt; we&amp;rsquo;ve refactored our &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/&#34; target=&#34;_blank&#34;&gt;build packs&lt;/a&gt; so that they are more modular and easier to compose and reuse across workloads.&lt;/p&gt;

&lt;p&gt;For example the &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34; target=&#34;_blank&#34;&gt;jenkins-x-kubernetes&lt;/a&gt; build pack inherits from the &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-classic&#34; target=&#34;_blank&#34;&gt;jenkins-x-classic&lt;/a&gt; build pack, reusing the CI and release pipelines but then adding the kubernetes specific workloads (e.g. building docker images, creating helm charts, &lt;a href=&#34;/docs/concepts/features/#preview-environments&#34;&gt;Preview Environments&lt;/a&gt; and &lt;a href=&#34;/docs/concepts/features/#promotion&#34;&gt;Promotion via GitOps&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;To do this we&amp;rsquo;ve introduced a simple new YAML file format for defining pipelines.&lt;/p&gt;

&lt;h2 id=&#34;pipelines&#34;&gt;Pipelines&lt;/h2&gt;

&lt;p&gt;Each Pipeline YAML file has a number of separate logical pipelines:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;release&lt;/code&gt; for processing merges to the &lt;code&gt;master&lt;/code&gt; branch which typically creates a new version and release then triggers promotion&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pullRequest&lt;/code&gt; for processing Pull Requests&lt;/li&gt;
&lt;li&gt;&lt;code&gt;feature&lt;/code&gt; for processing merges to a feature branch. Though note that the &lt;a href=&#34;/about/accelerate/&#34;&gt;accelerate book&lt;/a&gt; recommends against long term feature branches. Instead consider using trunk based development which is a practice of high performing teams.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;life-cycles&#34;&gt;Life Cycles&lt;/h2&gt;

&lt;p&gt;Then each pipeline has a number of distinct life cycle phases - rather like maven has &lt;code&gt;clean&lt;/code&gt;, &lt;code&gt;compile&lt;/code&gt;, &lt;code&gt;compile-test&lt;/code&gt;, &lt;code&gt;package&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;The life cycle phases in Jenkins X Pipeline YAML are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preBuild&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;postBuild&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;promote&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;extending&#34;&gt;Extending&lt;/h2&gt;

&lt;p&gt;A Pipeline YAML can extend another YAML file. You can reference a base pipeline YAML via:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;using &lt;code&gt;file&lt;/code&gt; to reference a relative file path in the same build pack &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml#L1-L2&#34; target=&#34;_blank&#34;&gt;like this example using file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;using &lt;code&gt;import&lt;/code&gt; to reference a YAML file which is imported like &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/blob/45819e05fa197d9069af682fbbcad0af8d8d605a/packs/maven/pipeline.yaml#L2-L3&#34; target=&#34;_blank&#34;&gt;this example using import&lt;/a&gt; which then refers to a &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/blob/45819e05fa197d9069af682fbbcad0af8d8d605a/packs/imports.yaml#L2-L4&#34; target=&#34;_blank&#34;&gt;named imported module via git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;overriding-steps&#34;&gt;Overriding steps&lt;/h2&gt;

&lt;p&gt;Rather like classes in languages like Java you can override steps in a Pipeline YAML from a base Pipeline YAML. This lets you reuse the steps in a base pipeline&amp;rsquo;s life cycle then add your own additional steps.&lt;/p&gt;

&lt;p&gt;By default any steps you define are added after the base pipeline YAML steps like in &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/0520fe3d9740cbcb1cc9754e173fe7726219f58e/pkg/jx/cmd/test_data/step_buildpack_apply/inheritence/pipeline.yaml#L7&#34; target=&#34;_blank&#34;&gt;this example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can add steps before the base pipeline steps using the &lt;code&gt;preSteps:&lt;/code&gt; property like &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/0520fe3d9740cbcb1cc9754e173fe7726219f58e/pkg/jx/cmd/test_data/step_buildpack_apply/inheritence2/pipeline.yaml#L6&#34; target=&#34;_blank&#34;&gt;this example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to completely replace all the steps from a base pipeline for a particular life cycle you can use &lt;code&gt;replace: true&lt;/code&gt; like in &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/0520fe3d9740cbcb1cc9754e173fe7726219f58e/pkg/jx/cmd/test_data/step_buildpack_apply/inheritence2/pipeline.yaml#L11-L14&#34; target=&#34;_blank&#34;&gt;this example&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;example-pipeline&#34;&gt;Example Pipeline&lt;/h2&gt;

&lt;p&gt;For example for &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml&#34; target=&#34;_blank&#34;&gt;maven libraries we use this pipeline.yaml file&lt;/a&gt; which:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml#L1-L2&#34; target=&#34;_blank&#34;&gt;extends&lt;/a&gt; the &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/pipeline.yaml&#34; target=&#34;_blank&#34;&gt;common pipeline&lt;/a&gt; that sets up git and defines common post build steps&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml#L3-L5&#34; target=&#34;_blank&#34;&gt;configures the agent&lt;/a&gt; in terms of &lt;a href=&#34;/docs/managing-jx/common-tasks/pod-templates/&#34;&gt;pod template&lt;/a&gt; and container name&lt;/li&gt;
&lt;li&gt;defines the steps for the &lt;code&gt;pull request&lt;/code&gt; pipeline &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml#L7-L11&#34; target=&#34;_blank&#34;&gt;build steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;defines the &lt;code&gt;release&lt;/code&gt; pipeline &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml#L13-L18&#34; target=&#34;_blank&#34;&gt;set version steps&lt;/a&gt; and &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml#L19-L21&#34; target=&#34;_blank&#34;&gt;build steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then the &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/blob/45819e05fa197d9069af682fbbcad0af8d8d605a/packs/maven/pipeline.yaml&#34; target=&#34;_blank&#34;&gt;maven kubernetes pipeline.yaml&lt;/a&gt; then &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/blob/45819e05fa197d9069af682fbbcad0af8d8d605a/packs/maven/pipeline.yaml#L2-L3&#34; target=&#34;_blank&#34;&gt;extends&lt;/a&gt; from the classic pipeline to add the kubernetes steps&lt;/p&gt;

&lt;h1 id=&#34;creating-new-build-packs&#34;&gt;Creating new build packs&lt;/h1&gt;

&lt;p&gt;We love &lt;a href=&#34;/community/&#34;&gt;contributions&lt;/a&gt; so please consider adding new build packs and &lt;a href=&#34;/docs/managing-jx/common-tasks/pod-templates/&#34;&gt;pod templates&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are instructions on how to create a new build pack - please if anything is not clear come &lt;a href=&#34;/community/&#34;&gt;join the community and just ask&lt;/a&gt; we are happy to help!&lt;/p&gt;

&lt;p&gt;The best place to start with is a &lt;em&gt;quickstart&lt;/em&gt; application. A sample project that you can use as a test. So create/find a suitable example project and then &lt;a href=&#34;/developing/import&#34;&gt;import it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then manually add a &lt;code&gt;Dockerfile&lt;/code&gt; and &lt;code&gt;Jenkinsfile&lt;/code&gt; if one is not already added for you. You could start with files from the &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs&#34; target=&#34;_blank&#34;&gt;current build pack folders&lt;/a&gt; - using the most similar language/framework to yours.&lt;/p&gt;

&lt;p&gt;If your build pack is using build tools which are not yet available in one of the existing &lt;a href=&#34;/architecture/pod-templates&#34;&gt;pod templates&lt;/a&gt; then you will need to &lt;a href=&#34;/docs/managing-jx/common-tasks/pod-templates/#submitting-new-pod-templates&#34;&gt;submit a new pod template&lt;/a&gt; probably using a new build container image too.&lt;/p&gt;

&lt;p&gt;Once you have a pod template to use, say, &lt;code&gt;jenkins-foo&lt;/code&gt; then refer to it in your &lt;code&gt;Jenkinsfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// my declarative Jenkinsfile

pipeline {
    agent {
      label &amp;quot;jenkins-foo&amp;quot;
    }
    environment {
      ...
    }
    stages {
      stage(&#39;CI Build and push snapshot&#39;) {
        steps {
          container(&#39;foo&#39;) {
            sh &amp;quot;foo deploy&amp;quot;
          }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once your &lt;code&gt;Jenkinsfile&lt;/code&gt; is capable of doing CI/CD for your language/runtime on your sample project then we should be able to take the &lt;code&gt;Dockerfile&lt;/code&gt;, &lt;code&gt;Jenkinsfile&lt;/code&gt; and charts folder and copy them into a folder in your fork of the &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34; target=&#34;_blank&#34;&gt;jenkins-x/draft-packs repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can try that out locally by adding these files to your local clone of the build packs repository at &lt;code&gt;~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export PACK=&amp;quot;foo&amp;quot;
mkdir ~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs/$PACK
cp Dockerfile Jenkinsfile  ~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs/$PACK

# the charts will be in some folder charts/somefoo
cp -r charts/somefoo ~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs/$PACK/charts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once your build pack is in a folder at &lt;code&gt;~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs/&lt;/code&gt;
then it should be usable by the &lt;a href=&#34;/commands/jx_import&#34;&gt;jx import&lt;/a&gt; code
which uses programming language detection to find the most suitable build pack to use when importing a project.
If your build pack requires custom logic to detect it then let us know
and we can help patch &lt;a href=&#34;/commands/jx_import&#34;&gt;jx import&lt;/a&gt; to work better for your build pack.
For example, we have some custom logic for handling &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/712d9edf5e55aafaadfb3e0ac57692bb44634b1c/pkg/jx/cmd/common_buildpacks.go#L82:L108&#34; target=&#34;_blank&#34;&gt;Maven and Gradle better&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you need any more help &lt;a href=&#34;/community/&#34;&gt;join the community&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Continuous Integrating JX itself</title>
      <link>/docs/contributing/code/continuous-integrating-jx-itself/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contributing/code/continuous-integrating-jx-itself/</guid>
      <description>
        
        
        

&lt;p&gt;You may be wondering how Jenkins X introduce changes to Jenkins X. Of course, Jenkins X is built using Jenkins X itself! That means that new changes to the project go through a CI process, and are built and tested using pipelines that run on a Jenkins X Kubernetes cluster.&lt;/p&gt;

&lt;h2 id=&#34;pipelines&#34;&gt;Pipelines&lt;/h2&gt;

&lt;p&gt;A Pull Request in the &lt;a href=&#34;https://github.com/jenkins-x/jx&#34; target=&#34;_blank&#34;&gt;jx repository&lt;/a&gt; will automatically trigger some jobs to do CI. The jobs are triggered &lt;a href=&#34;/docs/reference/components/prow/&#34;&gt;by Prow&lt;/a&gt;, and we can &lt;a href=&#34;https://github.com/jenkins-x/prow-config-tekton/blob/f1a74a38c2936722f8507769e5a30b56ca96fe45/prow/config.yaml#L902-L932&#34; target=&#34;_blank&#34;&gt;configure which jobs to execute&lt;/a&gt;. The jobs with always_run configured to be true, will be ran when the PR is opened. All jobs (independently of having always_run set to true or false) can be manually triggered writing a comment in the PR. The comment needed to trigger the job is also in the configuration, in the trigger key. For example, to trigger the end-to-end tests manually, you may write a new comment in the PR containing &amp;ldquo;/test bdd&amp;rdquo;, and the bdd job will be triggered.&lt;/p&gt;

&lt;p&gt;The jobs all have a name and a context &lt;a href=&#34;https://github.com/jenkins-x/prow-config-tekton/blob/f1a74a38c2936722f8507769e5a30b56ca96fe45/prow/config.yaml#L902-L932&#34; target=&#34;_blank&#34;&gt;in the configuration&lt;/a&gt;. The name is the name what will show up on GitHub, and the context is the Jenkins X pipeline to execute.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/contribute/ci-jobs.png&#34; alt=&#34;Jobs executed during CI&#34; /&gt;&lt;/p&gt;

&lt;p&gt;These pipelines are defined in the root of the jx repository. For example, &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/jenkins-x-bdd.yml&#34; target=&#34;_blank&#34;&gt;here you can see the bdd pipeline&lt;/a&gt; that executes the end-to-end (e2e) tests that will get triggered when we tell Prow to execute the bdd job.&lt;/p&gt;

&lt;p&gt;The pipelines that are executed are &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Jenkins X pipelines&lt;/a&gt;, that underneath use &lt;a href=&#34;https://cloud.google.com/tekton/&#34; target=&#34;_blank&#34;&gt;Tekton pipelines&lt;/a&gt;. These pipelines execute tests to make sure everything still works. Typically, they execute unit tests and functional e2e tests.&lt;/p&gt;

&lt;p&gt;Following our bdd pipeline example, here are the steps executed as part of &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/jenkins-x-bdd.yml&#34; target=&#34;_blank&#34;&gt;the bdd pipeline&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/contribute/bdd-pipeline.png&#34; alt=&#34;BDD Pipeline&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;end-to-end-tests&#34;&gt;End to end tests&lt;/h2&gt;

&lt;p&gt;For the e2e tests, the application binary is compiled with the changes on the pull request so that the tests use these changes. Docker images are also published to Google Cloud Registry (GCR) with the changes on the pull request, so testing locally is easier.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jenkins-x/bdd-jx&#34; target=&#34;_blank&#34;&gt;The e2e tests live on a different repository&lt;/a&gt;, and they are ran using &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/jx/scripts/ci.sh&#34; target=&#34;_blank&#34;&gt;a bash script&lt;/a&gt;, that will be executed inside a container (like all the other steps in all the other pipelines). The bash script reads some secrets from the Kubernetes cluster where this job is running, and prepares the container where the step is being ran to run the tests configuring the Git client locally, creating a valid kubeconfig file to be able to talk to a Kubernetes cluster, etc.&lt;/p&gt;

&lt;p&gt;One of the most common e2e test is to create a new application, push it to a new GitHub repository, and deploy it using jx. These repositories created for testing are created on &lt;a href=&#34;https://github.beescloud.com/&#34; target=&#34;_blank&#34;&gt;a GitHub Enterprise instance called beescloud&lt;/a&gt;. Credentials to do that are read from the Kubernetes cluster, and passed as parameters while invoking the tests.&lt;/p&gt;

&lt;p&gt;The last command on the bash script is actually running the tests using the jx step bdd command, that basically clones &lt;a href=&#34;https://github.com/jenkins-x/bdd-jx&#34; target=&#34;_blank&#34;&gt;the tests repository&lt;/a&gt; and runs a &lt;a href=&#34;https://github.com/jenkins-x/bdd-jx/blob/master/Makefile&#34; target=&#34;_blank&#34;&gt;Makefile target in that repository&lt;/a&gt;. Some of the logic executed by Jenkins X during the e2e tests is executed using the jx binary that we compiled on the first step of the pipeline. But not all. Other parts of the logic is executed inside the containers used on the steps of the pipeline.&lt;/p&gt;

&lt;p&gt;The containers used as part of the Jenkins X pipelines are called builders. If we want our pull request changes to be used in the builder containers too, we need to tell Jenkins X to use the container images published on a previous step of the pipeline, which contain the pull request changes. Fortunately, &lt;a href=&#34;/docs/managing-jx/common-tasks/config&#34;&gt;Jenkins X allows you to pass a file that will override the &amp;ldquo;values.yaml&amp;rdquo; file used to install Helm charts as part of the Jenkins X installation&lt;/a&gt;. If you don&amp;rsquo;t use a custom values file, &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/values.yaml&#34; target=&#34;_blank&#34;&gt;this is the default used when installing Jenkins X&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The jx step bdd command allows you to create a new jx cluster to run the e2e tests, or use an existing one. When creating a new cluster, the different components that make up a Jenkins X cluster are installed. By default latest versions for those components would be installed, so two consecutive installations could yield different behaviors because a change on some component between the two. That&amp;rsquo;s not suited for testing, where deterministic scenarios are preferred. That&amp;rsquo;s why the jx step bdd command uses &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-versions&#34; target=&#34;_blank&#34;&gt;a versions repository&lt;/a&gt; which specifies which version to use for every Jenkins X cluster component. The jx step bdd command may receive a &amp;ldquo;config&amp;rdquo; parameter pointing to &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-versions/blob/master/jx/bdd/tekton/cluster.yaml&#34; target=&#34;_blank&#34;&gt;a configuration file&lt;/a&gt; that specifies how the cluster will be created. If no config parameter is passed, then the Kubernetes cluster referenced in the kubeconfig file that was created before executing the jx step bdd command will be used.&lt;/p&gt;

&lt;h2 id=&#34;release&#34;&gt;Release&lt;/h2&gt;

&lt;p&gt;If all tests pass and the pull request is merged, a new version of jx &lt;a href=&#34;https://github.com/jenkins-x/jx/releases&#34; target=&#34;_blank&#34;&gt;will be released&lt;/a&gt;. Not everyone can approve pull requests, only people whose names appear on &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/master/OWNERS&#34; target=&#34;_blank&#34;&gt;the OWNERS file&lt;/a&gt; can approve them. Remember, every merged pull request generates a new jx version. By default, new versions increment the patch part of the version string. This is done automatically, so when merging a pull request if jx is currently at version 1.3.152, after merging the pull request, the version 1.3.53 will be released. But when breaking changes are merged, the minor or major parts of the version string may be manually increased.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create Cluster</title>
      <link>/docs/getting-started/demos-talks-posts/create_cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/demos-talks-posts/create_cluster/</guid>
      <description>
        
        
        &lt;p&gt;This &lt;a href=&#34;https://www.youtube.com/watch?v=ELA4tytdFeA&#34; target=&#34;_blank&#34;&gt;demo&lt;/a&gt; &lt;a href=&#34;/docs/getting-started/setup/create-cluster/&#34;&gt;creates a new kubernetes cluster&lt;/a&gt; using these commands in parallel:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/commands/jx_create_cluster_gke&#34;&gt;jx create cluster gke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/commands/jx_create_cluster_aks&#34;&gt;jx create cluster aks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/commands/jx_create_cluster_minikube&#34;&gt;jx create cluster minikube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/ELA4tytdFeA&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create MLquickstart</title>
      <link>/docs/using-jx/creating/create-mlquickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-jx/creating/create-mlquickstart/</guid>
      <description>
        
        
        

&lt;p&gt;Machine learning quickstarts are pre-made machine-learning applications you can leverage to start your own projects.&lt;/p&gt;

&lt;p&gt;You can create new applications from our list of curated machine learning quickstart applications via the &lt;a href=&#34;/commands/jx_create_mlquickstart&#34;&gt;jx create mlquickstart&lt;/a&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx create mlquickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are then prompted for a list of quickstarts to choose from.&lt;/p&gt;

&lt;p&gt;You will see that these come in groups of three:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;? select the quickstart you wish to create  [Use arrows to move, space to select, type to filter]
&amp;gt; machine-learning-quickstarts/ML-python-pytorch-cpu
  machine-learning-quickstarts/ML-python-pytorch-cpu-service
  machine-learning-quickstarts/ML-python-pytorch-cpu-training
  machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu
  machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu-service
  machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu-training
  machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu
  machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu-service
  machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu-training
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each machine learning quickstart consists of two projects, a training project which manages the training script for your model and a service project that allows you to wrap your trained model instances with service APIs ready for integration into your application.&lt;/p&gt;

&lt;p&gt;If you want to create just the &lt;code&gt;-service&lt;/code&gt; or &lt;code&gt;-training&lt;/code&gt; project on its own, you can do so by selecting the option with the matching name suffix.&lt;/p&gt;

&lt;p&gt;Most of the time, however, what you want to do is to select the &lt;em&gt;project set&lt;/em&gt;, which is the first option with the same prefix name and no suffix. That will create a matched pair of projects that are linked. For example, if you call your project repository &lt;code&gt;my-first-ml-project&lt;/code&gt; and select the &lt;code&gt;ML-python-pytorch-cpu&lt;/code&gt; project set, you will create two independent projects in the current folder, &lt;code&gt;my-first-ml-project-training&lt;/code&gt; and &lt;code&gt;my-first-ml-project-service&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you create these individually, it is important that your projects share the same root name and that they end with the suffixes &lt;code&gt;-training&lt;/code&gt; and &lt;code&gt;-service&lt;/code&gt; so that they can automatically integrate during the build process.&lt;/p&gt;

&lt;p&gt;You can use a text filter to filter on the project names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx create mlquickstart -f gpu
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;what-happens-when-you-create-a-quickstart&#34;&gt;What happens when you create a quickstart&lt;/h3&gt;

&lt;p&gt;Once you have chosen the project to create and given it a name the following is automated for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;creates a pair of new projects from the quickstart in sub directories&lt;/li&gt;
&lt;li&gt;adds the source code for both into a pair of git repositories&lt;/li&gt;
&lt;li&gt;creates matching remote git repositories on a git service, such as &lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pushes your code to the remote git service&lt;/li&gt;
&lt;li&gt;adds default files:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; to build your -service application as a docker image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jenkins-x.yml&lt;/code&gt; to implement the CI / CD pipelines for training and service builds&lt;/li&gt;
&lt;li&gt;Helm charts to run your applications inside Kubernetes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;registers webhooks on the remote git repositories to your teams Jenkins-X server&lt;/li&gt;
&lt;li&gt;triggers the pipelines to train and deploy your service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you create a machine learning quickstart, both the training and service projects will build simultaneously. The service project will deploy but first time around, it will fail to start, because it doesn&amp;rsquo;t yet have a trained model to work with.&lt;/p&gt;

&lt;p&gt;Meanwhile the training project will start work on training the model and once trained, will run some acceptance tests to verify that the trained model instance is sufficiently accurate to be worth promoting for further testing. If the model has not learned well enough, the training build will fail at this point.&lt;/p&gt;

&lt;p&gt;You can restart training with the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx start pipeline
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then select the name of the training project you wish to run again, or you may edit your training script, commit your changes and push them to automatically trigger another training run.&lt;/p&gt;

&lt;p&gt;Once training has completed successfully, the version of your model that has just been trained and the metrics associated with this run will be passed to your &lt;code&gt;-service&lt;/code&gt; project using a pull request. You now need to review the &lt;code&gt;-service&lt;/code&gt; project repository and check the training metrics for suitability. The &lt;code&gt;-service&lt;/code&gt; project will automatically rebuild using the newly trained model instance and deploy into a preview environment where you can test it using its API.&lt;/p&gt;

&lt;p&gt;If all QA checks pass you may then sign-off the release in the same way you would do for any other build within Jenkins-X (have approvers and reviewers issue /approve and /lgtm comments in the pull request thread).&lt;/p&gt;

&lt;p&gt;Once signed off, the trained model instance is merged into the master branch of your -service project, rebuilt and deployed into staging for further testing and integration.&lt;/p&gt;

&lt;p&gt;Each time you restart the traing project, you will get a new model instance that you can chose to promote in the same way. All models are versioned via Git, so you can keep track of each instance and its metrics.&lt;/p&gt;

&lt;h3 id=&#34;how-do-quickstarts-work&#34;&gt;How do quickstarts work?&lt;/h3&gt;

&lt;p&gt;The source of these Quickstarts are maintained in &lt;a href=&#34;https://github.com/machine-learning-quickstarts&#34; target=&#34;_blank&#34;&gt;the machine-learning-quickstarts GitHub organisation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As with conventional Jenkins-X quickstarts, we use the &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34; target=&#34;_blank&#34;&gt;Jenkins X build packs&lt;/a&gt; to match the right pack for the project using the source code language and machine learning framework kinds to pick the most suitable match.&lt;/p&gt;

&lt;p&gt;When you use &lt;a href=&#34;/docs/getting-started/setup/create-cluster/&#34;&gt;jx create&lt;/a&gt;, &lt;a href=&#34;/docs/managing-jx/common-tasks/install-on-cluster/&#34;&gt;jx install&lt;/a&gt; or &lt;a href=&#34;/commands/jx_init/&#34;&gt;jx init&lt;/a&gt; the &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34; target=&#34;_blank&#34;&gt;Jenkins X build packs&lt;/a&gt; are cloned into your &lt;code&gt;~/.jx/draft/packs&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Then when you create a machine learning quickstart, the &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34; target=&#34;_blank&#34;&gt;Jenkins X build packs&lt;/a&gt; are used to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;find the right language pack. e.g. here are the current &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs&#34; target=&#34;_blank&#34;&gt;list of language packs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;the language pack is then used to default these files if they don&amp;rsquo;t already exist:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; to package the application as a docker image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jenkins-x.yml&lt;/code&gt; to implement the CI / CD pipelines using declarative pipeline as code&lt;/li&gt;
&lt;li&gt;Helm Charts to deploy the application on Kubernetes and to implement &lt;a href=&#34;/docs/concepts/features/#preview-environments&#34;&gt;Preview Environments&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;adding-your-own-quickstarts&#34;&gt;Adding your own Quickstarts&lt;/h2&gt;

&lt;p&gt;If you would like to submit a new Quickstart to Jenkins X please just &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new?labels=quickstart&amp;amp;title=Add%20mlquickstart&amp;amp;body=Please%20add%20this%20github%20mlquickstart:&#34; target=&#34;_blank&#34;&gt;raise an issue&lt;/a&gt; with the URL in GitHub of your quickstart and we can fork it it into the &lt;a href=&#34;https://github.com/machine-learning-quickstarts&#34; target=&#34;_blank&#34;&gt;quickstart organisation&lt;/a&gt; so it appears in the &lt;code&gt;jx create mlquickstart&lt;/code&gt; menu.&lt;/p&gt;

&lt;p&gt;Or if you are part of an open source project and wish to curate your own set of quickstarts for your project; you can &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new?labels=quickstart&amp;amp;title=Add%20mlquickstart&amp;amp;body=Please%20add%20this%20github%20mlquickstart:&#34; target=&#34;_blank&#34;&gt;raise an issue&lt;/a&gt; giving us details of the github organisation where the quickstarts live and we&amp;rsquo;ll add that in as a default organisation to include in the &lt;a href=&#34;/commands/jx_create_mlquickstart&#34;&gt;jx create mlquickstart&lt;/a&gt; command. Its easier for the &lt;a href=&#34;/commands/jx_create_mlquickstart&#34;&gt;jx create mlquickstart&lt;/a&gt; if you maintain the quickstarts in a separate quickstart organisation on github.&lt;/p&gt;

&lt;p&gt;Until we do that you can still use your own Quickstarts in the &lt;code&gt;jx create mlquickstart&lt;/code&gt; command via the &lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--organisations&lt;/code&gt; command line argument. e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx create mlquickstart  --organisations my-github-org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then all machine learning quickstarts found in &lt;code&gt;my-github-org&lt;/code&gt; will be listed in addition to the defaults.&lt;/p&gt;

&lt;p&gt;Note there are some standards for creating machine learning quickstarts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All quickstart names must start with the letters &lt;code&gt;ML-&lt;/code&gt; to distinguish it from a conventional quickstart&lt;/li&gt;
&lt;li&gt;Training projects must be suffixed &lt;code&gt;-training&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Service projects must be suffixed &lt;code&gt;-service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;All components of a project set must share the same root prefix to their name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create a machine learning project set, create a new repository in your quickstart organisation such that the name is the shared prefix for your quickstart, for example: &lt;code&gt;machine-learning-quickstarts/ML-python-pytorch-cpu&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Try to pick explanatory names so that it is clear what language, frameworks and hardware are associated with this project set.&lt;/p&gt;

&lt;p&gt;Inside your project set repository, create a single file named &lt;code&gt;projectset&lt;/code&gt; which has the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[
   {
      &amp;quot;Repo&amp;quot;:&amp;quot;ML-python-pytorch-cpu-service&amp;quot;,
      &amp;quot;Tail&amp;quot;:&amp;quot;-service&amp;quot;
   },
   {
      &amp;quot;Repo&amp;quot;:&amp;quot;ML-python-pytorch-cpu-training&amp;quot;,
      &amp;quot;Tail&amp;quot;:&amp;quot;-training&amp;quot;
   }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;customising-your-teams-quickstarts&#34;&gt;Customising your teams quickstarts&lt;/h2&gt;

&lt;p&gt;You can configure at a team level the quickstarts which are presented to you in the &lt;code&gt;jx create mlquickstart&lt;/code&gt; command. These settings are stored in the &lt;a href=&#34;/docs/reference/components/custom-resources/&#34;&gt;Environment Custom Resource&lt;/a&gt; in Kubernetes.&lt;/p&gt;

&lt;p&gt;To add the location of a set of machine learning quickstarts you can use the &lt;a href=&#34;/commands/jx_create_quickstartlocation/&#34;&gt;jx create quickstartlocation&lt;/a&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx create quickstartlocation --url https://mygit.server.com --owner my-mlquickstarts --includes=[ML-*]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you MUST specify the &lt;code&gt;--includes=[ML-*]&lt;/code&gt; option or your quickstarts will be added to the conventional quickstart list rather than the machine learning list.&lt;/p&gt;

&lt;p&gt;If you omit the &lt;code&gt;--url&lt;/code&gt; argument the command will assume its a &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt; repository. Note that both public and private repositories are supported.&lt;/p&gt;

&lt;p&gt;This means you can have your own shared private quickstarts to reuse within your organisation. Of course we&amp;rsquo;d obviously prefer you to &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new?labels=quickstart&amp;amp;title=Add%20mlquickstart&amp;amp;body=Please%20add%20this%20github%20mlquickstart:&#34; target=&#34;_blank&#34;&gt;share your quickstarts with us via open source&lt;/a&gt; then we can include your quickstart with the entire &lt;a href=&#34;/community&#34;&gt;community&lt;/a&gt; - but there may be times you want to curate your own internal quickstarts using proprietary software.&lt;/p&gt;

&lt;p&gt;You can also specify other &lt;code&gt;--includes&lt;/code&gt; or &lt;code&gt;--excludes&lt;/code&gt; patterns to filter the names of the repositories where &lt;code&gt;*&lt;/code&gt; matches anything and &lt;code&gt;foo*&lt;/code&gt; matches anything starting with &lt;code&gt;foo&lt;/code&gt;. e.g. you could just include the languages and technologies your organisation supports and exclude the rest etc.&lt;/p&gt;

&lt;p&gt;Also note that you can use the alias of &lt;code&gt;qsloc&lt;/code&gt; instead of &lt;code&gt;quickstartlocation&lt;/code&gt; if you like shorter aliases ;)&lt;/p&gt;

&lt;p&gt;You can then view the current quickstart locations for your team via the &lt;a href=&#34;/commands/jx_get_quickstartlocations/&#34;&gt;jx get quickstartlocations&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx get quickstartlocations
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or using an abbreviation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx get qsloc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is also &lt;a href=&#34;/commands/jx_delete_quickstartlocation/&#34;&gt;jx delete quickstartlocation&lt;/a&gt; if you need to remove a git organisation.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Features</title>
      <link>/docs/concepts/features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/features/</guid>
      <description>
        
        
        

&lt;h2 id=&#34;command-line&#34;&gt;Command Line&lt;/h2&gt;

&lt;p&gt;Jenkins X comes with a handy &lt;a href=&#34;/commands/jx&#34;&gt;jx&lt;/a&gt; command line tool to easily:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[install Jenkins X](/docs/getting-started/setup/install inside your existing kubernetes cluster&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/docs/getting-started/setup/create-cluster/&#34;&gt;create a new kubernetes cluster&lt;/a&gt; and install Jenkins X into it&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/developing/import&#34;&gt;import projects&lt;/a&gt; into Jenkins X and their Continuous Delivery pipelines setup&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/developing/create-spring&#34;&gt;create new Spring Boot applications&lt;/a&gt; which get imported into Jenkins X and their Continuous Delivery pipelines setup&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;automated-pipelines&#34;&gt;Automated Pipelines&lt;/h2&gt;

&lt;p&gt;Rather than having to have deep knowledge of the internals of Jenkins Pipeline, Jenkins X will automatically setup awesome pipelines for your projects that fully implements both CI and CD using &lt;a href=&#34;/about/concepts&#34;&gt;DevOps best practices&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;environments&#34;&gt;Environments&lt;/h2&gt;

&lt;p&gt;An &lt;em&gt;environment&lt;/em&gt; is a place where applications get deployed. Developers often refer environments using a short name like &lt;code&gt;Testing, Staging/UAT or Production&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With Jenkins X each &lt;em&gt;team&lt;/em&gt; gets its own Environments. By default Jenkins X creates a &lt;code&gt;Staging&lt;/code&gt; and &lt;code&gt;Production&lt;/code&gt; environment for each team but you can create new environments via &lt;a href=&#34;/commands/jx_create_environment&#34;&gt;jx create environment&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is also the &lt;code&gt;Dev&lt;/code&gt; environment which is where tools like Jenkins, Nexus or Prow are installed and where CI/CD pipelines run.&lt;/p&gt;

&lt;p&gt;We use GitOps to manage the configuration and version of the kubernetes resources which are deployed to each environment. So each Environment has its own git repository that contains all the Helm Charts, their versions and the configuration for the applications be run in the environment.&lt;/p&gt;

&lt;p&gt;An Environment maps to a namespace in a Kubernetes cluster. When Pull Requests are merged into the environments git repository the pipeline runs for the environment which then applies the helm charts in git to the environments namespace.&lt;/p&gt;

&lt;p&gt;This means both developers and operations can use the same git repository to manage all the configuration and versions of all the applications and resources for an environment in the same git repository and all changes to the environment are captured in git. So its easy to see who made changes when and more importantly its then easy to revert changes which cause bad things to happen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/gitops.png&#34; class=&#34;img-thumbnail&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;teams&#34;&gt;Teams&lt;/h2&gt;

&lt;p&gt;A Team in Jenkins X is represented by an install of Jenkins X in a separate namespace.&lt;/p&gt;

&lt;p&gt;You can install Jenkins X into different namespaces in the same cluster if you wish using the &lt;code&gt;--namespace&lt;/code&gt; command line argument in &lt;a href=&#34;/commands/jx_create_cluster/&#34;&gt;jx create cluster&lt;/a&gt; or &lt;a href=&#34;/commands/jx_install/&#34;&gt;jx install&lt;/a&gt;. Note that to support multiple installs of Jenkins X in the same cluster you need to &lt;a href=&#34;/news/helm-without-tiller/&#34;&gt;avoid Tiller if you are using helm 2.x&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also use the &lt;a href=&#34;/commands/jx_create_team/&#34;&gt;jx create team&lt;/a&gt; CLI which creates a new &lt;code&gt;Team&lt;/code&gt; &lt;a href=&#34;/docs/reference/components/custom-resources/&#34;&gt;Custom Resource&lt;/a&gt; then in the background the team controller will create a new Jenkins X install in the teams namespaces, by default reusing the same underlying nexus and docker registry.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&#34;/docs/managing-jx/common-tasks/config/&#34;&gt;configuration guide&lt;/a&gt; for more details on how to share resources like Nexus across Teams.&lt;/p&gt;

&lt;h2 id=&#34;promotion&#34;&gt;Promotion&lt;/h2&gt;

&lt;p&gt;Promotion is implemented with GitOps by generating a pull request on the Environment&amp;rsquo;s git repository  so that all changes go through git for audit, approval and so that any change is easy to revert.&lt;/p&gt;

&lt;p&gt;When a new change to an environments git repository is merged to master, the pipeline for the environment triggers which applies any changes to the resources via helm - using the source code from the git repository.&lt;/p&gt;

&lt;p&gt;The CD Pipelines of Jenkins X automate the promotion of version changes through each Environment which is configured with a &lt;em&gt;promotion strategy&lt;/em&gt; property of &lt;code&gt;Auto&lt;/code&gt;. By default the &lt;code&gt;Staging&lt;/code&gt; environment uses automatic promotion and the &lt;code&gt;Production&lt;/code&gt; environment uses &lt;code&gt;Manual&lt;/code&gt; promotion.&lt;/p&gt;

&lt;p&gt;To manually promote a version of an application to an environment you can use &lt;a href=&#34;/developing/promote&#34;&gt;jx promote&lt;/a&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/overview.png&#34; class=&#34;img-thumbnail&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;preview-environments&#34;&gt;Preview Environments&lt;/h2&gt;

&lt;p&gt;Jenkins X lets you spin up Preview Environments for your Pull Requests so you can get fast feedback before changes are merged to master. This gives you faster feedback for your changes before they are merged and released and allows you to avoid having human approval inside your release pipeline to speed up delivery of changes merged to master.&lt;/p&gt;

&lt;p&gt;When the Preview Environment is up and running Jenkins X will comment on your Pull Request with a link so in one click your team members can try out the preview!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/pr-comment.png&#34; class=&#34;img-thumbnail&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;feedback&#34;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;As you can see above Jenkins X automatically comments on your Pull Requests when using Preview Environments.&lt;/p&gt;

&lt;p&gt;If the commit comments reference issues (e.g. via the text &lt;code&gt;fixes #123&lt;/code&gt;) then Jenkins X pipelines will generate release notes like those of &lt;a href=&#34;https://github.com/jenkins-x/jx/releases&#34; target=&#34;_blank&#34;&gt;the jx releases&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also as the version with those new commits is promoted to &lt;code&gt;Staging&lt;/code&gt; or &lt;code&gt;Production&lt;/code&gt; you will get automated comments on each fixed issue that the issue is now available for review in the corresponding environment. e.g.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/issue-comment.png&#34; class=&#34;img-thumbnail&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;applications&#34;&gt;Applications&lt;/h2&gt;

&lt;p&gt;A collection of best of breed software tools packaged as helm charts that come pre-integrated with Jenkins X such as: Nexus, ChartMuseum, Monocular, Prometheus, Grafana etc&lt;/p&gt;

&lt;h3 id=&#34;addons&#34;&gt;Addons&lt;/h3&gt;

&lt;p&gt;Some of these applications are baked in; like: Nexus, ChartMuseum, Monocular.  Others are provided as an &lt;code&gt;Addon&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To install an addon then use the &lt;a href=&#34;/commands/jx_create_addon/&#34;&gt;jx create addon&lt;/a&gt; command. e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create addon grafana
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Progressive Delivery</title>
      <link>/docs/managing-jx/tutorials/progressive-delivery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/tutorials/progressive-delivery/</guid>
      <description>
        
        
        

&lt;p&gt;It&amp;rsquo;s likely you have heard of &amp;ldquo;blue green deployment&amp;rdquo; or &amp;ldquo;canary deployment&amp;rdquo;. The idea is to carefully roll out new versions of your application, if problems happen (gasp!) in production, then the system will automatically roll them back, and the majority of users will not be impacted.&lt;/p&gt;

&lt;p&gt;This has become a popular CD technique over the years.&lt;/p&gt;

&lt;p&gt;As Jenkins X runs on top of Kubernetes, there are some additional built in protections about starting new versions: if a new application fails to start, it is likely that it will never really make it to production, this is a good thing! And you get it for free!&lt;/p&gt;

&lt;p&gt;Progressive Delivery takes this a bit further: changes can be rolled out to a small percentage of users or traffic (say 1%) and then progressively released to more users (say 5%) before the delivery is considered complete.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Progressive Delivery&lt;/strong&gt; makes it easier to adopt Continuous Delivery, by deploying new versions to a subset of users and evaluating their correctness and performance before rolling them to the totality of the users, and rolled back if not matching some key metrics.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Progressive Delivery is used by Netflix, Facebook and others to reduce the risk of deployments. But you can now adopt it when using Jenkins X.&lt;/p&gt;

&lt;p&gt;In particular we focused on Canary releases and made it really easy to adopt them in your Jenkins X applications. Canary releases consist on sending a small percentage of traffic to the new version of your application and validate there are no errors before rolling it out to the rest of the users. Facebook does it this way, delivering new versions first to internal employees, then a small percentage of the users, then everybody else, but you don’t need to be Facebook to take advantage of it!&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&#34;https://martinfowler.com/bliki/CanaryRelease.html&#34; target=&#34;_blank&#34;&gt;read more on Canaries at Martin Fowler’s website&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;jenkins-x-promotion-with-canaries&#34;&gt;Jenkins X Promotion with Canaries&lt;/h1&gt;

&lt;p&gt;If you already have an application in Jenkins X you know that you can promote it to the &lt;em&gt;production&lt;/em&gt; environment with &lt;code&gt;jx promote myapp --version 1.0 --env production&lt;/code&gt;. But it can also be automatically and gradually rolled it out to a percentage of users while checking that the new version is not failing. If that happens the application will be automatically rolled back. No human intervention at all during the process.&lt;/p&gt;

&lt;p&gt;As the first step three Jenkins X addons need to be installed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34;&gt;Istio&lt;/a&gt;: &lt;a href=&#34;https://istio.io/docs/concepts/what-is-istio/&#34; target=&#34;_blank&#34;&gt;a service mesh&lt;/a&gt; that allows us to manage traffic to our services.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/weaveworks/flagger&#34; target=&#34;_blank&#34;&gt;Flagger&lt;/a&gt;: a project that uses Istio to automate canarying and rollbacks using metrics from Prometheus.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The addons can be installed with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx create addon istio --version 1.1.7
jx create addon flagger
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will enable Istio in the &lt;strong&gt;jx-production&lt;/strong&gt; namespace for metrics gathering.&lt;/p&gt;

&lt;p&gt;Now get the ip of the Istio ingress and point a wildcard domain to it (e.g. &lt;code&gt;*.example.com&lt;/code&gt;), so we can use it to route multiple services based on host names. The Istio ingress provides the routing capabilities needed for Canary releases (traffic shifting) that the traditional Kubernetes ingress objects do not support.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kubectl -n istio-system get service istio-ingressgateway \
-o jsonpath=&#39;{.status.loadBalancer.ingress[0].ip}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The cluster is configured, and it’s time to configure our application. Add a &lt;code&gt;canary.yaml&lt;/code&gt; to your helm chart, under &lt;code&gt;charts/myapp/templates&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;{{- if eq .Release.Namespace &amp;quot;jx-production&amp;quot; }}
{{- if .Values.canary.enable }}
apiVersion: flagger.app/v1alpha2
kind: Canary
metadata:
  name: {{ template &amp;quot;fullname&amp;quot; . }}
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ template &amp;quot;fullname&amp;quot; . }}
  progressDeadlineSeconds: 60
  service:
    port: {{.Values.service.internalPort}}
{{- if .Values.canary.service.gateways }}
    gateways:
{{ toYaml .Values.canary.service.gateways | indent 4 }}
{{- end }}
{{- if .Values.canary.service.hosts }}
    hosts:
{{ toYaml .Values.canary.service.hosts | indent 4 }}
{{- end }}
  canaryAnalysis:
    interval: {{ .Values.canary.canaryAnalysis.interval }}
    threshold: {{ .Values.canary.canaryAnalysis.threshold }}
    maxWeight: {{ .Values.canary.canaryAnalysis.maxWeight }}
    stepWeight: {{ .Values.canary.canaryAnalysis.stepWeight }}
{{- if .Values.canary.canaryAnalysis.metrics }}
    metrics:
{{ toYaml .Values.canary.canaryAnalysis.metrics | indent 4 }}
{{- end }}
{{- end }}
{{- end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then append to the &lt;code&gt;charts/myapp/values.yaml&lt;/code&gt; the following, changing &lt;code&gt;myapp.example.com&lt;/code&gt; to your host name or names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;canary:
  enable: true
  service:
    # Istio virtual service host names
    hosts:
    - myapp.example.com
    gateways:
    - jx-gateway.istio-system.svc.cluster.local
  canaryAnalysis:
    # schedule interval (default 60s)
    interval: 60s
    # max number of failed metric checks before rollback
    threshold: 5
    # max traffic percentage routed to canary
    # percentage (0-100)
    maxWeight: 50
    # canary increment step
    # percentage (0-100)
    stepWeight: 10
    metrics:
    - name: request-success-rate
      # minimum req success rate (non 5xx responses)
      # percentage (0-100)
      threshold: 99
      interval: 60s
    - name: request-duration
      # maximum req duration P99
      # milliseconds
      threshold: 500
      interval: 60s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it! Now when the app is promoted to the production environment with &lt;code&gt;jx promote myapp --version 1.0 --env production&lt;/code&gt; it will do a Canary rollout. Note that the first time it is promoted it will not do a Canary as it needs a previous version data to compare to, but it will work from the second promotion on.&lt;/p&gt;

&lt;p&gt;With the configuration in the values.yaml file above it would look like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;minute 1: send 10% of the traffic to the new version&lt;/li&gt;
&lt;li&gt;minute 2: send 20% of the traffic to the new version&lt;/li&gt;
&lt;li&gt;minute 3: send 30% of the traffic to the new version&lt;/li&gt;
&lt;li&gt;minute 4: send 40% of the traffic to the new version&lt;/li&gt;
&lt;li&gt;minute 5: send 100% of the traffic to the new version&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the metrics we have configured (request duration over 500 milliseconds or more than 1% responses returning 500 errors) fail, Flagger then will note that failure, and if it is repeated 5 times it will rollback the release, sending 100% of the traffic to the old version.&lt;/p&gt;

&lt;p&gt;To get the Canary events run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ kubectl -n jx-production get events --watch \
  --field-selector involvedObject.kind=Canary
LAST SEEN   FIRST SEEN   COUNT   NAME                                                  KIND     SUBOBJECT   TYPE     REASON   SOURCE    MESSAGE
23m         10d          7       jx-production-myapp.1584d8fbf5c306ee   Canary               Normal   Synced   flagger   New revision detected! Scaling up jx-production-myapp.jx-production
22m         10d          8       jx-production-myapp.1584d89a36d2e2f2   Canary               Normal   Synced   flagger   Starting canary analysis for jx-production-myapp.jx-production
22m         10d          8       jx-production-myapp.1584d89a38592636   Canary               Normal   Synced   flagger   Advance jx-production-myapp.jx-production canary weight 10
21m         10d          7       jx-production-myapp.1584d917ed63f6ec   Canary               Normal   Synced   flagger   Advance jx-production-myapp.jx-production canary weight 20
20m         10d          7       jx-production-myapp.1584d925d801faa0   Canary               Normal   Synced   flagger   Advance jx-production-myapp.jx-production canary weight 30
19m         10d          7       jx-production-myapp.1584d933da5f218e   Canary               Normal   Synced   flagger   Advance jx-production-myapp.jx-production canary weight 40
18m         10d          6       jx-production-myapp.1584d941d4cb21e8   Canary               Normal   Synced   flagger   Advance jx-production-myapp.jx-production canary weight 50
18m         10d          6       jx-production-myapp.1584d941d4cbc55b   Canary               Normal   Synced   flagger   Copying jx-production-myapp.jx-production template spec to jx-production-myapp-primary.jx-production
17m         10d          6       jx-production-myapp.1584d94fd1218ebc   Canary               Normal   Synced   flagger   Promotion completed! Scaling down jx-production-myapp.jx-production
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dashboard&#34;&gt;Dashboard&lt;/h2&gt;

&lt;p&gt;Flagger includes a Grafana dashboard for visualization purposes as it is not needed for the Canary releases. It can be accessed locally using Kubernetes port forwarding&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kubectl --namespace istio-system port-forward deploy/flagger-grafana 3000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then accessing &lt;a href=&#34;http://localhost:3000&#34; target=&#34;_blank&#34;&gt;http://localhost:3000&lt;/a&gt; using admin/admin, selecting the canary-analysis dashboard and&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;namespace: jx-production&lt;/li&gt;
&lt;li&gt;primary: jx-production-myapp-primary&lt;/li&gt;
&lt;li&gt;canary: jx-production-myapp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;would provide us with a view of different metrics (cpu, memory, request duration, response errors,…) of the incumbent and new versions side by side.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/grafana-canary-analysis.png&#34; class=&#34;img-thumbnail&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;caveats&#34;&gt;Caveats&lt;/h2&gt;

&lt;p&gt;Note that Istio 1.0.x by default will prevent access from your pods to the outside of the cluster, a behavior that has changed in Istio 1.1. &lt;a href=&#34;https://istio.io/docs/tasks/traffic-management/egress/&#34; target=&#34;_blank&#34;&gt;Learn how to control the Istio egress traffic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If a rollback happens automatically because the metrics fail, the Jenkins X GitOps repository for the production environment becomes out of date, still using the new version instead of the old one. This is something planned to be fixed in next releases.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Triaging issues</title>
      <link>/docs/contributing/code/triage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contributing/code/triage/</guid>
      <description>
        
        
        

&lt;p&gt;The main issue tracker for the Jenkins X project is &lt;a href=&#34;https://github.com/jenkins-x/jx/issues&#34; target=&#34;_blank&#34;&gt;https://github.com/jenkins-x/jx/issues&lt;/a&gt;.  This aims to capture issues, ideas and development work.  If in doubt please raise an issue and a Jenkins X team member will look to triage it as soon as possible.&lt;/p&gt;

&lt;p&gt;As Jenkins X is using &lt;a href=&#34;https://www.cloudbees.com/blog/serverless-jenkins-jenkins-x&#34; target=&#34;_blank&#34;&gt;prow&lt;/a&gt; from the Kubernetes ecosystem we figured we&amp;rsquo;d take their lead in triaging a large number of issues to aid and encourage contributions.  We are reusing the style of labels including colours in an attempt to create familiarity across open source projects and reduce the barrier to contributing.&lt;/p&gt;

&lt;h1 id=&#34;triaging-issues&#34;&gt;Triaging issues&lt;/h1&gt;

&lt;p&gt;For a full list of available labels please see &lt;a href=&#34;https://github.com/jenkins-x/jx/labels&#34; target=&#34;_blank&#34;&gt;https://github.com/jenkins-x/jx/labels&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When triaging an issue, someone from the Jenkins X team will assign labels to describe the &lt;strong&gt;area&lt;/strong&gt; and &lt;strong&gt;kind&lt;/strong&gt; of issue.  Where possible they will also add a priority however these are subject to change after further analysis or wider visibility.&lt;/p&gt;

&lt;p&gt;Labels are added via the prow &lt;a href=&#34;https://prow.k8s.io/plugins&#34; target=&#34;_blank&#34;&gt;label&lt;/a&gt; plugin using GitHub comments.  For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/kind bug
/area prow
/priority important-soon
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/images/contribute/triage.png&#34; alt=&#34;Triage&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;assigning-issues&#34;&gt;Assigning issues&lt;/h1&gt;

&lt;p&gt;When triaging we will attempt to assign someone to the issue.  This may change depending on the investigation or availability of people.&lt;/p&gt;

&lt;h1 id=&#34;investigating-issues&#34;&gt;Investigating issues&lt;/h1&gt;

&lt;p&gt;When anyone is working on an issue we aim to capture any analysis by adding comments.  This helps people learn tips on how to investigate similar problems, helps people understand the thought process and provides context for any linked fixes via pull requests.&lt;/p&gt;

&lt;h1 id=&#34;new-labels&#34;&gt;New labels&lt;/h1&gt;

&lt;p&gt;If you would like to request a new label be created please raise an issue with as much context as possible.&lt;/p&gt;

&lt;h1 id=&#34;stale-issues&#34;&gt;Stale issues&lt;/h1&gt;

&lt;p&gt;As we encourrage a wide range of issue kinds like general ideas and thoughts the issue tracker can grow quite high.  We are going to be enabling the prow &lt;a href=&#34;https://prow.k8s.io/plugins&#34; target=&#34;_blank&#34;&gt;lifecycle&lt;/a&gt; plugin to help manage stale issues.  This is not meant to be intrusive but instead allow us to continually rethink problems and keep momentum across issues.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Cloud Native Jenkins</title>
      <link>/docs/reference/components/cloud-native-jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/reference/components/cloud-native-jenkins/</guid>
      <description>
        
        
        

&lt;p&gt;Jenkins X helps to support &lt;em&gt;cloud native Jenkins&lt;/em&gt; via:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;orchestrating either &lt;a href=&#34;/news/serverless-jenkins/&#34;&gt;serverless Jenkins&lt;/a&gt; using &lt;a href=&#34;/architecture/prow&#34;&gt;prow&lt;/a&gt; or a Static Jenkins masters per team. This lets teams move towards serverless while bring along static masters too.&lt;/li&gt;
&lt;li&gt;each team can install its own Jenkins X in its own namespace (via &lt;code&gt;jx install --namespace myteam&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;support for different workloads per team (see &lt;a href=&#34;/commands/jx_edit_buildpack/&#34;&gt;jx edit buildpack&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;different-workloads&#34;&gt;Different workloads&lt;/h2&gt;

&lt;p&gt;Some teams develop cloud native applications on kubernetes and so should use the &lt;code&gt;kubernetes workloads&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;For teams that do not deploy applications to kubernetes - such as delivering libraries or binaries - there&amp;rsquo;s a new &lt;code&gt;library workloads&lt;/code&gt; option which has CI and automated releases but no CD.&lt;/p&gt;

&lt;p&gt;When you &lt;a href=&#34;getting-started/create-cluster/&#34; target=&#34;_blank&#34;&gt;create a cluster&lt;/a&gt; or &lt;a href=&#34;/docs/managing-jx/common-tasks/install-on-cluster/&#34;&gt;install Jenkins X&lt;/a&gt; you are prompted to pick between the available build packs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;? Pick workload build pack:   [Use arrows to move, type to filter]
&amp;gt; Kubernetes Workloads: Automated CI+CD with GitOps Promotion
  Library Workloads: CI+Release but no CD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can change this configuration at any time via &lt;a href=&#34;/commands/jx_edit_buildpack/&#34;&gt;jx edit buildpack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By default just hit enter to stick to the &lt;code&gt;kubernetes workloads&lt;/code&gt; option. Though if you have a significant number of libraries you wish to manage you could setup a separate team for this and import your various library projects there.&lt;/p&gt;

&lt;h2 id=&#34;current-workloads&#34;&gt;Current workloads&lt;/h2&gt;

&lt;p&gt;We store our build packs in &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/&#34; target=&#34;_blank&#34;&gt;jenkins-x-buildpacks&lt;/a&gt; organization at GitHub. Currently we support:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-classic&#34; target=&#34;_blank&#34;&gt;jenkins-x-classic&lt;/a&gt; build pack supports CI+Releases but does not include CD. e.g. do CI and release of your Java libraries or Node modules but don&amp;rsquo;t deploy to Kubernetes&lt;/li&gt;
&lt;li&gt;the &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34; target=&#34;_blank&#34;&gt;jenkins-x-kubernetes&lt;/a&gt; build pack supports automated CI+CD with GitOps promotion and Preview Environments for &lt;code&gt;kubernetes workloads&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However you should be able to extend either of these build packs to add alternative platforms and capabilities.&lt;/p&gt;

&lt;h2 id=&#34;writing-your-own-build-pack&#34;&gt;Writing your own build pack&lt;/h2&gt;

&lt;p&gt;We want you to &lt;a href=&#34;/extending/&#34;&gt;extend Jenkins X&lt;/a&gt; so please check out the &lt;a href=&#34;/docs/managing-jx/common-tasks/build-packs/#creating-new-build-packs&#34;&gt;documentation on creating your own build packs&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Jenkins X Pipelines</title>
      <link>/docs/concepts/jenkins-x-pipelines/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/jenkins-x-pipelines/</guid>
      <description>
        
        
        

&lt;p&gt;We &lt;a href=&#34;/news/jenkins-x-next-gen-pipeline-engine&#34;&gt;recently announced&lt;/a&gt; that we are introducing &lt;strong&gt;Jenkins X Pipelines&lt;/strong&gt;, a new serverless pipeline execution engine based on the &lt;a href=&#34;https://tekton.dev/&#34; target=&#34;_blank&#34;&gt;Tekton Pipelines&lt;/a&gt; open source project.&lt;/p&gt;

&lt;p&gt;Tekton has been designed to be a modern cloud native solution for running pipelines.&lt;/p&gt;

&lt;p&gt;The work here is still experimental but we&amp;rsquo;d love feedback and help from the community to drive it forward.&lt;/p&gt;

&lt;h2 id=&#34;trying-jenkins-x-pipelines&#34;&gt;Trying Jenkins X Pipelines&lt;/h2&gt;

&lt;p&gt;Right now to enable a Tekton based install you can create a new cluster using &lt;code&gt;jx&lt;/code&gt; along with these flags:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create cluster gke --tekton 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if you want to go all in on the next generation of Jenkins X with built-in GitOps for your development environment, using Tekton and using Vault for storage of Secrets then use the following (only works on GCP and AWS right now):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create cluster gke --ng
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The general developer experience, CLI and IDE plugins should work as before - but using &lt;a href=&#34;https://tekton.dev/&#34; target=&#34;_blank&#34;&gt;Tekton Pipelines&lt;/a&gt; Custom Resources under the covers instead of creating a Jenkins Server per team!&lt;/p&gt;

&lt;h2 id=&#34;using-a-quickstart&#34;&gt;Using a quickstart&lt;/h2&gt;

&lt;p&gt;Once your cluster is started you can create a new quickstart, we&amp;rsquo;ve been using the NodeJS one reliably.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create quickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;code&gt;prowjob&lt;/code&gt; is created, a new prow pipeline controller watches for these jobs and when it receives an event it will check if it has a &lt;code&gt;pipelinerun&lt;/code&gt; spec present, if not it will post the &lt;code&gt;prowjob&lt;/code&gt; to a new &lt;code&gt;pipelinerunner&lt;/code&gt; service from Jenkins X which in turn clones the repo and revision then translates its &lt;code&gt;jenkins-x.yml&lt;/code&gt; into vanilla Tekton Pipeline resources.  Once they are created the &lt;code&gt;tekton-pipeline-controller&lt;/code&gt; executes the builds.&lt;/p&gt;

&lt;h2 id=&#34;differences-to-jenkins-pipelines&#34;&gt;Differences to Jenkins Pipelines&lt;/h2&gt;

&lt;p&gt;Jenkins X Pipelines use a new &lt;code&gt;jenkins-x.yml&lt;/code&gt; file which is YAML instead of the Groovy &lt;code&gt;Jenkinsfile&lt;/code&gt; used by Jenkins.&lt;/p&gt;

&lt;p&gt;However it&amp;rsquo;s still reusing the same reusable and composable build packs under the covers. (The Jenkins X &lt;a href=&#34;/docs/managing-jx/common-tasks/build-packs/&#34;&gt;build packs&lt;/a&gt; are actually written in Jenkins X Pipelines YAML).&lt;/p&gt;

&lt;p&gt;One thing you will notice is that with Jenkins X Pipelines we don&amp;rsquo;t need to copy/paste a large &lt;code&gt;Jenkinsfile&lt;/code&gt; into each application&amp;rsquo;s git repository; usually the generated &lt;code&gt;jenkins-x.yml&lt;/code&gt; file is small, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;buildPack: maven
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it! What that basically means is at runtime the Jenkins X Pipeline will use the &lt;a href=&#34;/docs/managing-jx/common-tasks/build-packs/&#34;&gt;build packs&lt;/a&gt; to generate the actual Tekton Pipeline.&lt;/p&gt;

&lt;h2 id=&#34;customizing-the-pipelines&#34;&gt;Customizing the Pipelines&lt;/h2&gt;

&lt;p&gt;Having automated &lt;a href=&#34;/docs/managing-jx/common-tasks/build-packs/&#34;&gt;build packs&lt;/a&gt; to do all of your CI+CD is pretty awesome - as most of the time your microservices will all be compiled, tested, packaged, released and promoted in the same way. CI+CD is often undifferentiated heavy lifting we should just automate!&lt;/p&gt;

&lt;p&gt;However there are times you want to customize a &lt;a href=&#34;/docs/managing-jx/common-tasks/build-packs/#pipelines&#34;&gt;particular pipeline&lt;/a&gt; (release, pull request, feature etc) and a particular &lt;a href=&#34;/docs/managing-jx/common-tasks/build-packs/#lifecycles&#34;&gt;life cycle&lt;/a&gt; to change the actual steps invoked.&lt;/p&gt;

&lt;p&gt;You can read more about the &lt;a href=&#34;/docs/managing-jx/common-tasks/build-packs/#pipeline-extension-model&#34;&gt;extension model&lt;/a&gt; to find out all you can do. Basically you can add steps before/after any life cycle or completely replace a set of life cycles or even opt out of the build pack completely and inline your pipelines inside your &lt;code&gt;jenkins-x.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For a quick way to add a new step into a pipeline life cycle you can use the &lt;a href=&#34;/commands/jx_create_step/&#34;&gt;jx create step&lt;/a&gt; command:&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&#34;/images/architecture/create-step.gif&#34; /&gt;
&lt;figcaption&gt;
&lt;h5&gt;Create a new Jenkins X Pipeline Step via the CLI&lt;/h5&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;You can also add or override an environment variable in your pipeline via the &lt;a href=&#34;/commands/jx_create_variable/&#34;&gt;jx create variable&lt;/a&gt; command&lt;/p&gt;

&lt;h2 id=&#34;editing-in-vs-code&#34;&gt;Editing in VS Code&lt;/h2&gt;

&lt;p&gt;If you are using &lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;VS Code&lt;/a&gt; we recommend you install the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml&#34; target=&#34;_blank&#34;&gt;YAML Language Extension&lt;/a&gt; from Red Hat.&lt;/p&gt;

&lt;p&gt;This extension lets you edit YAML files with optional JSON Schema validation.&lt;/p&gt;

&lt;p&gt;Jenkins X&amp;rsquo;s JSON Schema is already registered with &lt;a href=&#34;http://schemastore.org/json/&#34; target=&#34;_blank&#34;&gt;schemastore.org&lt;/a&gt; so editing your &lt;code&gt;jenkins-x.yml&lt;/code&gt; file in VS Code will include smart completion and validation!&lt;/p&gt;

&lt;figure&gt;
&lt;embed src=&#34;/images/architecture/yaml-edit.mp4&#34; autostart=&#34;false&#34; height=&#34;400&#34; width=&#34;600&#34; /&gt;
&lt;figcaption&gt;
&lt;h5&gt;Edit Jenkins X Pipeline in VS Code&lt;/h5&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We&amp;rsquo;d love to improve this UX if you fancy &lt;a href=&#34;/docs/contributing/&#34;&gt;helping out&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;editing-in-idea&#34;&gt;Editing in IDEA&lt;/h2&gt;

&lt;p&gt;This should already be interested out of the box due to the Jenkins X JSON Schema being registered with &lt;a href=&#34;http://schemastore.org/json/&#34; target=&#34;_blank&#34;&gt;schemastore.org&lt;/a&gt; so editing your &lt;code&gt;jenkins-x.yml&lt;/code&gt; file in IDEA will include smart completion and validation!&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;d love to improve this UX if you fancy &lt;a href=&#34;/docs/contributing/&#34;&gt;helping out&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;default-environment-variables&#34;&gt;Default environment variables&lt;/h2&gt;

&lt;p&gt;The following environment variables are available for use in a step in Jenkins X Pipelines:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DOCKER_REGISTRY&lt;/td&gt;
&lt;td&gt;the docker registry host (e.g. &lt;code&gt;docker.io&lt;/code&gt; or &lt;code&gt;gcr.io&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;BUILD_NUMBER&lt;/td&gt;
&lt;td&gt;the build number (1, 2, 3) starts at &lt;code&gt;1&lt;/code&gt; for each repo and branch&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PIPELINE_KIND&lt;/td&gt;
&lt;td&gt;the kind of pipeline such as &lt;code&gt;release&lt;/code&gt; or &lt;code&gt;pullrequest&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PIPELINE_CONTEXT&lt;/td&gt;
&lt;td&gt;the pipeline context if there are multiple pipelines per PR (for different tests/governance/lint etc)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;REPO_OWNER&lt;/td&gt;
&lt;td&gt;the git repository owner&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;REPO_NAME&lt;/td&gt;
&lt;td&gt;the git repository name&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;JOB_NAME&lt;/td&gt;
&lt;td&gt;the job name which typically looks like &lt;code&gt;$REPO_OWNER/$REPO_NAME/$BRANCH_NAME&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;APP_NAME&lt;/td&gt;
&lt;td&gt;the name of the app which typically is the &lt;code&gt;$REPO_NAME&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;BRANCH_NAME&lt;/td&gt;
&lt;td&gt;the name of the branch such as &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;PR-123&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;JX_BATCH_MODE&lt;/td&gt;
&lt;td&gt;indicates to jx to use batch mode if &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;VERSION&lt;/td&gt;
&lt;td&gt;contains the version number being released or the PR&amp;rsquo;s preview version&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;BUILD_ID&lt;/td&gt;
&lt;td&gt;same as &lt;code&gt;$BUILD_NUMBER&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;JOB_TYPE&lt;/td&gt;
&lt;td&gt;the prow job type such as &lt;code&gt;presubmit&lt;/code&gt; for PR or &lt;code&gt;postsubmit&lt;/code&gt; for release&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PULL_BASE_REF&lt;/td&gt;
&lt;td&gt;the branch/ref of git&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PULL_BASE_SHA&lt;/td&gt;
&lt;td&gt;the git SHA being built&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PULL_NUMBER&lt;/td&gt;
&lt;td&gt;for PRs this will be the number without the &lt;code&gt;PR-&lt;/code&gt; prefix&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PULL_REFS&lt;/td&gt;
&lt;td&gt;for batch merging all the git refs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Azure</title>
      <link>/docs/getting-started/setup/create-cluster/azure/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/setup/create-cluster/azure/</guid>
      <description>
        
        
        &lt;p&gt;You may find &lt;a href=&#34;https://cloudblogs.microsoft.com/opensource/2019/03/06/jenkins-x-azure-kubernetes-service-setup/&#34; target=&#34;_blank&#34;&gt;this blog helpful&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Otherwise ensure you &lt;a href=&#34;/docs/getting-started/setup/install/&#34;&gt;have installed the jx CLI&lt;/a&gt; then run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create cluster aks --skip-installation
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create Cluster GKE</title>
      <link>/docs/getting-started/demos-talks-posts/create_cluster_gke/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/demos-talks-posts/create_cluster_gke/</guid>
      <description>
        
        
        &lt;p&gt;This &lt;a href=&#34;https://www.youtube.com/watch?v=r8-J9Qg-p9U&#34; target=&#34;_blank&#34;&gt;demo&lt;/a&gt; uses the &lt;a href=&#34;/commands/jx_create_cluster_gke&#34;&gt;jx create cluster gke&lt;/a&gt; command to &lt;a href=&#34;/docs/getting-started/setup/create-cluster/&#34;&gt;create a new kubernetes cluster&lt;/a&gt;:&lt;/p&gt;

&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/r8-J9Qg-p9U&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create Spring Boot</title>
      <link>/docs/using-jx/creating/create-spring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-jx/creating/create-spring/</guid>
      <description>
        
        
        

&lt;p&gt;Java microservices developers can leverage the opinionated resources and
preconfigured components of &lt;a href=&#34;https://spring.io/projects/spring-boot&#34; target=&#34;_blank&#34;&gt;Spring
Boot&lt;/a&gt;. This software framework
takes the Spring platform and adds preconfigured components, third-party
libraries, software packagers, and command-line tools for running
specialized scripts.&lt;/p&gt;

&lt;p&gt;The aim of Spring Boot is to create Spring-based software such as
microservices, which can be deployed using the &lt;code&gt;java&lt;/code&gt; command-line
runtime or standalone &lt;em&gt;Web Application Resource&lt;/em&gt; (WAR) package files.
Spring Boot uses Spring as a foundation for development, and enhances it
with components that provides faster development and deployment,
opinionated configuration and setup to get started developing
microservices quickly, and a plugin framework that features Maven and
Gradle project support.&lt;/p&gt;

&lt;h2 id=&#34;spring-boot-and-jenkins-x&#34;&gt;Spring Boot and Jenkins X&lt;/h2&gt;

&lt;p&gt;You can incorporate Jenkins X into your Spring
Boot projects in two ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;By importing existing Spring Boot code using &lt;code&gt;jx import&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;By creating a Spring Boot application from scratch using
&lt;code&gt;jx create spring&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;importing-existing-spring-boot-projects&#34;&gt;Importing existing Spring Boot projects&lt;/h2&gt;

&lt;p&gt;If you have an Spring Boot project (perhaps created using the &lt;a href=&#34;http://start.spring.io/&#34; target=&#34;_blank&#34;&gt;Spring Boot Initializr&lt;/a&gt;) that you want to manage builds using
Jenkins X, you can use &lt;code&gt;jx import&lt;/code&gt; to commit your
code to a Git service such as GitHub, add a &lt;code&gt;Dockerfile&lt;/code&gt; to build your
Spring Boot project as a Docker image, a &lt;code&gt;pipeline.yaml&lt;/code&gt; to your
&lt;code&gt;~/.jx/&lt;/code&gt; directory that manages the development pipeline, and a Helm
chart for running as a package in Kubernetes.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Change into your Spring Boot project directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd my-springapp/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the import from a command-line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx import
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The application asks for your Git username (such as &lt;code&gt;myuser&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The application asks if you wan to initialize your project in Git.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The application asks you what organization to use for managing
builds (for example, &lt;code&gt;myorg&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The application asks if you want to name your repository (such as
&lt;code&gt;my-springapp&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can now perform builds, commit project code to your newly created
Git repository, and Jenkins X will automatically
process pull requests and create &lt;a href=&#34;/developing/preview&#34;&gt;previews&lt;/a&gt; of your applications for testing and validation.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-new-spring-boot-application&#34;&gt;Creating a new Spring Boot application&lt;/h2&gt;

&lt;p&gt;If you are evaluating Spring Boot in your Jenkins X environment and need an application template of a Spring Boot project that is preconfigured with CI/CD pipeline and GitOps promotion, use &lt;code&gt;jx create&lt;/code&gt; to make the preconfigured project.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Run the Spring Boot creation via command-line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx create spring
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The application asks for your Git username (such as &lt;code&gt;myuser&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The application lets you choose your Git organization from an
available list&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The application asks for a repository name, such as
&lt;code&gt;my-springapp1&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The application prompts you for the development language for your
project (by default, &lt;code&gt;java&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The application prompts you for a group ID (by default,
&lt;code&gt;com.example&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The application prompts you for any Spring Boot starters, or
dependency descriptors that you can use to make your development
smoother and quicker.&lt;/p&gt;

&lt;p&gt;We recommend at minimum the &lt;code&gt;Actuator&lt;/code&gt; and &lt;code&gt;Web&lt;/code&gt;
dependencies, which you can activate by moving to those checkboxes
and hitting the &lt;code&gt;Space Bar&lt;/code&gt; to select them. The application
prompts you to initialize Git&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is a &lt;a href=&#34;/demos/create_spring/&#34;&gt;demo of using the command: jx create spring&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also pass certain options to the &lt;code&gt;jx create&lt;/code&gt; command, such as specifying Spring Boot dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx create spring -d web -d actuator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;-d&lt;/code&gt; argument lets you specify the Spring Boot dependencies you wish to add to your spring boot application. In the above example, the command calls the &lt;code&gt;web&lt;/code&gt; argument, which passes in the Web Starter dependency to create RESTful web applications; the &lt;code&gt;actuator&lt;/code&gt; dependency for monitoring the health and metrics your application.  When you omit the &lt;code&gt;-d&lt;/code&gt; arguments and let the &lt;code&gt;jx&lt;/code&gt; command prompt you to pick the dependencies via a CLI wizard&lt;/p&gt;

&lt;p&gt;We recommend you always include the &lt;strong&gt;actuator&lt;/strong&gt; dependency in your Spring Boot applications as it helps provide health checks for &lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/&#34; target=&#34;_blank&#34;&gt;Liveness and Readiness probes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;spring-boot-projects-managed-by-jenkins-x&#34;&gt;Spring Boot projects managed by Jenkins X&lt;/h2&gt;

&lt;p&gt;The two methods of configuring Spring Boot projects in Jenkins X performs several actions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a new Spring Boot application in a local subdirectory&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add your source code into a Git repository&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a remote git repository on a git service, such as
&lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Commit your code to the remote Git service&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Adds default build files to your project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A &lt;code&gt;Dockerfile&lt;/code&gt; to build your application as a docker image&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A &lt;code&gt;pipeline.yaml&lt;/code&gt; to implement the CI / CD pipeline&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A helm chart to run your application inside Kubernetes&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Registers a webhook (such as
&lt;code&gt;http://hook-jx.192.169.1.100.nip.io/hook&lt;/code&gt;) on the remote git
repository&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;trigger the first pipeline build&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can now use your Git-enabled local project subdirectory to make
changes to your Spring Boot application, push those changes to Git, and
automatically have Jenkins X build, create
&lt;a href=&#34;/developing/preview/&#34;&gt;previews&lt;/a&gt; for testing and validation, and &lt;a href=&#34;/developing/promote&#34;&gt;promote&lt;/a&gt; your app to production for general usage.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Prow</title>
      <link>/docs/reference/components/prow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/reference/components/prow/</guid>
      <description>
        
        
        

&lt;p&gt;Prow is a Kubernetes based CI/CD system. Jobs can be triggered by various types of events and report their status to many different services. In addition to job execution, Prow provides GitHub automation in the form of policy enforcement, chat-ops via /foo style commands, and automatic PR merging.&lt;/p&gt;

&lt;p&gt;Prow has a microservice architecture implemented as a collection of container images that run as Kubernetes deployments&lt;/p&gt;

&lt;h2 id=&#34;hook&#34;&gt;hook&lt;/h2&gt;

&lt;p&gt;There is a &lt;a href=&#34;https://github.com/kubernetes/test-infra/tree/master/prow/cmd/hook&#34; target=&#34;_blank&#34;&gt;binary called hook&lt;/a&gt; that receives all the web hooks from GitHub. It is a stateless server that listens for GitHub webhooks and dispatches them to the appropriate plugins. Hook&amp;rsquo;s plugins are used to trigger jobs, implement &amp;lsquo;slash&amp;rsquo; commands, post to Slack, and more. The hook binary exposes a /hook endpoint to receive the Git server web hook requests (basically all web hooks go to /hook). There is an ingress rule that exposes that endpoint to outside the cluster.&lt;/p&gt;

&lt;h2 id=&#34;prow-plugins&#34;&gt;Prow Plugins&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/kubernetes/test-infra/tree/master/prow/cmd/hook&#34; target=&#34;_blank&#34;&gt;hook binary&lt;/a&gt; uses several different plugins that can be enable/disable independently, to do different things. They are basically event handlers for the different GitHub events received through web hooks. These plugins are configured using a yaml config that is passed from a kubernetes ConfigMap to hook and can be enabled per repo or org.
All plugins have the same interface. The hook process passes two objects to every plugin: a plugin client that let them talk to k8s, git, GitHub, owners file in git repo, slack, etc., and the deserialized GitHub event (like IssueCommentEvent).&lt;/p&gt;

&lt;h3 id=&#34;lgtm-plugin&#34;&gt;lgtm plugin&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/test-infra/tree/master/prow/plugins/lgtm&#34; target=&#34;_blank&#34;&gt;The LGTM plugin&lt;/a&gt; is a good example to get started on plugins. It&amp;rsquo;s a plugin that adds the LGTM label when someone comments /lgtm on a Pull Request.&lt;/p&gt;

&lt;h3 id=&#34;updateconfig-plugin&#34;&gt;UpdateConfig plugin&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/test-infra/tree/master/prow/plugins/updateconfig&#34; target=&#34;_blank&#34;&gt;A plugin that automatically updates a ConfigMap&lt;/a&gt; whenever a PR is merged in a repository. That way you can automatically keep your ConfigMaps up to date, following a GitOps flow.
You can map specific files to ConfigMaps, or even use regex.
It’s normally used to update the ConfigMap that contains the prow configuration, so every time a PR is merged with changes in the files containing the prow configuration, the ConfigMap is automatically updated.&lt;/p&gt;

&lt;h3 id=&#34;trigger-plugin&#34;&gt;Trigger plugin&lt;/h3&gt;

&lt;p&gt;Probably the most important plugin. It&amp;rsquo;s plugin that reacts to comments on PR’s, so we can trigger builds (by writing “test” as a comment or any other trigger). It determines which jobs to run based on the job config. When find a job that needs to be trigger, it creates a &lt;a href=&#34;https://github.com/kubernetes/test-infra/blob/master/prow/apis/prowjobs/v1/types.go#L85&#34; target=&#34;_blank&#34;&gt;ProwJob CRD&lt;/a&gt;, using the configuration found in the hook ConfigMap (that way you can create a different &lt;a href=&#34;https://github.com/kubernetes/test-infra/blob/master/prow/apis/prowjobs/v1/types.go#L85&#34; target=&#34;_blank&#34;&gt;ProwJob&lt;/a&gt; object depending on the org or repo, like using a different build agent (Jenkins vs Knative vs pods), the type of the job, etc). This CRD contains some interesting fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;agent: to select which k8s controller will take care of this job&lt;/li&gt;
&lt;li&gt;refs: GitHub repository and revision to use for the source code&lt;/li&gt;
&lt;li&gt;type: whether is presubmit or post submit (run the job before merging or post merge)&lt;/li&gt;
&lt;li&gt;pod_spec: spec to create a Pod object, if we use &lt;a href=&#34;https://github.com/kubernetes/test-infra/tree/master/prow/plank&#34; target=&#34;_blank&#34;&gt;plank&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;build_spec: spec to create a &lt;a href=&#34;https://github.com/knative/docs/blob/master/build/builds.md&#34; target=&#34;_blank&#34;&gt;Knative Build object&lt;/a&gt;, if we use &lt;a href=&#34;https://github.com/kubernetes/test-infra/blob/master/prow/cmd/build/controller.go&#34; target=&#34;_blank&#34;&gt;prow-build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The life cycle of a &lt;a href=&#34;https://github.com/kubernetes/test-infra/blob/master/prow/apis/prowjobs/v1/types.go#L85&#34; target=&#34;_blank&#34;&gt;ProwJob&lt;/a&gt; is handled by the ProwJob controllers running on the cluster. Potential ProwJob states are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;triggered: the job has been created but not yet scheduled.&lt;/li&gt;
&lt;li&gt;pending: the job is scheduled but not yet running.&lt;/li&gt;
&lt;li&gt;Success/failure: the job has completed.&lt;/li&gt;
&lt;li&gt;aborted: means prow killed the job early (new commit pushed, perhaps).&lt;/li&gt;
&lt;li&gt;error: means the job could not schedule (bad config, perhaps).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;job-type&#34;&gt;Job Type&lt;/h4&gt;

&lt;p&gt;In the Prow configuration you can configure per-repo Presubmits and Postsubmits jobs that are triggered by the trigger plugin. Presubmits are run when the PR code changes (opening a new PR or pushing code to the PR’s branch), so you can test your new code changes. Postsubmits are run whenever there is a new commit appearing on an origin branch (GitHub push event).&lt;/p&gt;

&lt;p&gt;The use-case for postsubmits is that there may be fewer than 100 merges a day to a really high-volume repo, but there could be ten or one hundred times that many presubmit jobs run. Postsubmits can be used when something is very expensive to test and is not necessarily blocking for merge, but you do want signal. Similarly, the way the system works is that your presubmit check will run with your code merged into the branch you&amp;rsquo;re targeting, so technically the merge commit that ends up in &lt;code&gt;master&lt;/code&gt; branch has effectively been tested already and often this means you may want a presubmit job but not to duplicate it also postsubmit as it gives you no more signal.&lt;/p&gt;

&lt;h3 id=&#34;prowjob-controllers&#34;&gt;ProwJob controllers&lt;/h3&gt;

&lt;p&gt;We can later use different Kubernetes Operators that react to ProwJob objects to run our builds, based on the agent field (each operator looks for ProwJobs with specific agent value):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/test-infra/blob/master/prow/plank/controller.go&#34; target=&#34;_blank&#34;&gt;Plank&lt;/a&gt; is one that uses kubernetes pods. Uses the &lt;code&gt;pod_spec&lt;/code&gt; field.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/test-infra/blob/master/prow/cmd/build/controller.go&#34; target=&#34;_blank&#34;&gt;prow-build&lt;/a&gt; is a build operator that uses Knative Build CRD. Uses the build_spec field.&lt;/li&gt;
&lt;li&gt;There is a &lt;a href=&#34;https://github.com/kubernetes/test-infra/blob/master/prow/jenkins/controller.go&#34; target=&#34;_blank&#34;&gt;jenkins-operator&lt;/a&gt; that runs builds on Jenkins. This is currently not recommended.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These controllers manage the &lt;a href=&#34;https://github.com/kubernetes/test-infra/blob/master/prow/life_of_a_prow_job.md&#34; target=&#34;_blank&#34;&gt;the life cycle of a ProwJob&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;plank-https-github-com-kubernetes-test-infra-tree-master-prow-plank&#34;&gt;&lt;a href=&#34;https://github.com/kubernetes/test-infra/tree/master/prow/plank&#34; target=&#34;_blank&#34;&gt;plank&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Plank is a Kubernetes operator that reacts to ProwJob custom resources. It creates a Pod to run the build associated with the ProwJob object. The ProwJob object itself contains a PodSpec.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If ProwJob doesn’t have a Pod, it creates a pod to run the build. Use init-containers to do VCS checkout.&lt;/li&gt;
&lt;li&gt;If ProwJob has a Pod with completed status, mark ProwJob as completed.&lt;/li&gt;
&lt;li&gt;If ProwJob is completed, do nothing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are using Knative build in Jenkins X, which uses the &lt;a href=&#34;https://github.com/kubernetes/test-infra/blob/master/prow/cmd/build/controller.go&#34; target=&#34;_blank&#34;&gt;prow-build controller&lt;/a&gt;, so you shouldn&amp;rsquo;t have to worry about plank.&lt;/p&gt;

&lt;h4 id=&#34;prow-build-https-github-com-kubernetes-test-infra-blob-master-prow-cmd-build-controller-go&#34;&gt;&lt;a href=&#34;https://github.com/kubernetes/test-infra/blob/master/prow/cmd/build/controller.go&#34; target=&#34;_blank&#34;&gt;prow-build&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Kubernetes operator that watches ProwJob objects, and reacts to those whose agent field is the Knative build agent. It will create &lt;a href=&#34;https://github.com/knative/docs/blob/master/build/builds.md&#34; target=&#34;_blank&#34;&gt;a Knative Build object&lt;/a&gt; based on the build_spec field of the ProwJob object.
&lt;a href=&#34;https://github.com/knative/build/blob/master/cmd/controller/main.go&#34; target=&#34;_blank&#34;&gt;The Knative build controller&lt;/a&gt; reacts to it and creates a Pod to run the build. All the ProwJob, the Build and the Pod have the same name (a UUID).&lt;/p&gt;

&lt;p&gt;The Build object contains interesting fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;serviceAccountName: &lt;a href=&#34;https://github.com/knative/docs/blob/master/build/auth.md&#34; target=&#34;_blank&#34;&gt;ServiceAccount that contains the Secrets required to access the Git server or the Docker registry&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;source: Git repository and revision to use for source code.&lt;/li&gt;
&lt;li&gt;steps: Specifies one or more container images that you want to run in your build. Each container image runs until completion or until the first failure is detected.&lt;/li&gt;
&lt;li&gt;template: contains the name of a registered Knative BuildTemplate, along with environment variables to pass to the Build object. The template must be a BuildTemplate object that exists in the cluster. &lt;strong&gt;If template field is defined, the steps field will be ignored&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;steps&#34;&gt;Steps&lt;/h5&gt;

&lt;p&gt;The steps in a build are the different actions that will be executed as part of that build. Each step in a build must specify a Builder image, or type of container image that adheres to the &lt;a href=&#34;https://github.com/knative/docs/blob/master/build/builder-contract.md&#34; target=&#34;_blank&#34;&gt;Knative builder contract&lt;/a&gt;. These steps/builder images&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are run and evaluated in order, starting from the top of the configuration file.&lt;/li&gt;
&lt;li&gt;Each runs until completion or until the first failure is detected.&lt;/li&gt;
&lt;li&gt;Have two volumes that are shared between all the steps. One will be mounted in /workspace, which contains the code specified in the Build source field. Another one is /builder/home that is mounted in $HOME, and it’s mostly used to save credential files that will be used in different steps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A builder image is a special image that we can run as a Build CRD&amp;rsquo;s step, and that it is typically a purpose-built container whose entrypoint is a tool that performs some action and exits with a zero status on success. These entrypoints are often command-line tools, for example, git, docker, mvn, and so on.&lt;/p&gt;

&lt;h5 id=&#34;buildtemplate&#34;&gt;BuildTemplate&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/knative/docs/blob/master/build/build-templates.md&#34; target=&#34;_blank&#34;&gt;A BuildTemplate&lt;/a&gt; encapsulates a shareable build process with some limited parameterization capabilities.&lt;/p&gt;

&lt;p&gt;A template contains steps to be executed in the build. Instead of specifying the same steps in different builds, we can reuse those steps creating a BuildTemplate that contains these steps. We use BuildTemplates to share steps between different Builds. &lt;a href=&#34;https://github.com/knative/build-templates/&#34; target=&#34;_blank&#34;&gt;There are community BuildTemplates&lt;/a&gt; that you can use, or you can define your own templates.&lt;/p&gt;

&lt;h6 id=&#34;jenkins-x-build-templates&#34;&gt;Jenkins X Build Templates&lt;/h6&gt;

&lt;p&gt;Jenkins X uses custom BuildTemplates to run the builds of the applications. &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-serverless&#34; target=&#34;_blank&#34;&gt;In this repository&lt;/a&gt; you can find the different BuildTemplates available, depending on the application language. These BuildTemplates use a different Step builder image depending on the language, since they have to build the application using different tools like maven, go or Gradle. So every Builder image has different tools installed, although eventually all the builder images basically run &lt;a href=&#34;/news/serverless-jenkins/&#34;&gt;serverless Jenkins&lt;/a&gt; (AKA &lt;a href=&#34;https://github.com/jenkinsci/jenkinsfile-runner&#34; target=&#34;_blank&#34;&gt;Jenkinsfile-Runner&lt;/a&gt;). That allows our builds to define the steps in a Jenkinsfile. All these steps are executed inside the same &lt;a href=&#34;https://hub.docker.com/r/jenkins/jenkinsfile-runner/dockerfile/&#34; target=&#34;_blank&#34;&gt;Jenkinsfile Runner container&lt;/a&gt;, which doesn&amp;rsquo;t match the Knative Build steps model.&lt;/p&gt;

&lt;h5 id=&#34;the-job-is-run-inside-a-pod&#34;&gt;The job is run inside a Pod&lt;/h5&gt;

&lt;p&gt;The Pod that’s created to run the actual build has a container that does nothing, but it has init containers to do the steps required to run the job:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/knative/build/tree/master/cmd/creds-init&#34; target=&#34;_blank&#34;&gt;creds-init&lt;/a&gt;: Service account secrets are mounted in /var/build-secrets/ so this container has access to them. It aggregates them into their respective credential files in $HOME, which is another volume shared between all the steps. Typically credentials for git server and docker registry.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/knative/build/tree/master/cmd/git-init&#34; target=&#34;_blank&#34;&gt;git-init&lt;/a&gt;: clones the specified SHA/revision Git repository into one of the shared volumes /workspace.&lt;/li&gt;
&lt;li&gt;Another init-container for every step defined in the Build or BuildTemplate.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember that each init container uses its own container image. Also, they have different filesystem linux namespaces. But they have some shared volumes like the $HOME and the /workspace folders.&lt;/p&gt;

&lt;h2 id=&#34;sinker&#34;&gt;sinker&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/test-infra/tree/master/prow/cmd/sinker&#34; target=&#34;_blank&#34;&gt;Garbage collector&lt;/a&gt; for ProwJobs and Pods created to run builds. It removes completed ProwJobs after 2 days, and completed pods after 30 minutes.&lt;/p&gt;

&lt;h2 id=&#34;crier&#34;&gt;crier&lt;/h2&gt;

&lt;p&gt;Another Kubernetes controller that watches ProwJobs CRDs. It contains different reporters to notify ProwJob changes to external clients, like GitHub status check, or message to PubSub.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s used to update the GitHub commit status when the ProwJob finishes.&lt;/p&gt;

&lt;h2 id=&#34;deck&#34;&gt;deck&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://prow.k8s.io/&#34; target=&#34;_blank&#34;&gt;Presents a UI of recent jobs&lt;/a&gt;, and &lt;a href=&#34;https://prow.k8s.io/command-help&#34; target=&#34;_blank&#34;&gt;command/plugin help information&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;tide&#34;&gt;tide&lt;/h2&gt;

&lt;p&gt;PRs satisfying a set of predefined criteria can be configured to be automatically merged by &lt;a href=&#34;https://github.com/kubernetes/test-infra/blob/master/prow/cmd/tide/README.md&#34; target=&#34;_blank&#34;&gt;Tide&lt;/a&gt;. It will automatically retest PRs that meet the criteria (&amp;ldquo;tide comes in&amp;rdquo;) and automatically merge them when they have up-to-date passing test results (&amp;ldquo;tide goes out”).&lt;/p&gt;

&lt;p&gt;It will query GitHub every once in a while trying to merge PR’s. It doesn’t react to events, it’s not a plugin.&lt;/p&gt;

&lt;h2 id=&#34;ongoing-efforts&#34;&gt;Ongoing efforts&lt;/h2&gt;

&lt;p&gt;Using init-containers for steps &lt;a href=&#34;https://github.com/knative/build/pull/470&#34; target=&#34;_blank&#34;&gt;may change in the future&lt;/a&gt;, due to limitations on init-containers.
Knative Build CRD is being deprecated in favor of the Pipeline CRD. The Build CRD will be superseded by the new Task CRD, but they are really similar.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Jenkins X Security</title>
      <link>/docs/contributing/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/contributing/security/</guid>
      <description>
        
        
        

&lt;p&gt;The Jenkins X project takes security seriously. We make every possible effort to ensure users can adequately secure their automation infrastructure.
To that end, we work with Jenkins X platform and app developers, as well as security researchers, to fix security vulnerabilities in Jenkins X in a timely manner, and to improve the security of Jenkins X in general.&lt;/p&gt;

&lt;h2 id=&#34;how-to-report-a-security-vulnerability&#34;&gt;How to Report a Security Vulnerability&lt;/h2&gt;

&lt;p&gt;If you find a vulnerability in Jenkins X, please report it in the &lt;strong&gt;Jenkins CI&lt;/strong&gt; issue tracker under the &lt;a href=&#34;https://issues.jenkins-ci.org/browse/SECURITY&#34; target=&#34;_blank&#34;&gt;SECURITY project&lt;/a&gt;.
Please &lt;strong&gt;do not report security issues in the github&lt;/strong&gt; tracker.&lt;br /&gt;
This project is configured in such a way that only the reporter and the security team can see the details.
By restricting access to this potentially sensitive information, we can work on a fix and deliver it before the method of attack becomes well-known.&lt;/p&gt;

&lt;p&gt;If you are unable to report using the above issue tracker, you can also send your report to the private Jenkins Security Team mailing list: &lt;a href=&#34;mailto:jenkinsci-cert@googlegroups.com&#34; target=&#34;_blank&#34;&gt;jenkinsci-cert@googlegroups.com&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;vulnerabilities-in-apps&#34;&gt;Vulnerabilities in Apps&lt;/h2&gt;

&lt;p&gt;Whilst the Jenkins X team is not responsible for the quality of third party apps, please still use the above reporting mechanism and we will co-ordinate with the app developer to ensure a fix in a secure maner.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Serverless Apps</title>
      <link>/docs/managing-jx/tutorials/serverless-apps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/tutorials/serverless-apps/</guid>
      <description>
        
        
        

&lt;p&gt;Serverless appications are regular applications that &amp;ldquo;scale to zero&amp;rdquo;. This means when your application isn&amp;rsquo;t in use - no resources at all will be used. You only pay for what you use. These applications scale up elastically to meet the workload.&lt;/p&gt;

&lt;p&gt;Once you have this feature enabled - all new apps you import or quickstarts you use by default will be serverless style (you can override as needed - see below). You don&amp;rsquo;t have to change the way you build web apps. This is currently in a preview state (but works well), and in future most web apps will work in this fashion (and this will be the default).&lt;/p&gt;

&lt;h2 id=&#34;enabling-serverless-apps&#34;&gt;Enabling serverless apps&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;jx create addon gloo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you are then good to go. Any new projects you create will be created in this serverless style.&lt;/p&gt;

&lt;h2 id=&#34;converting-existing-applications&#34;&gt;Converting existing applications&lt;/h2&gt;

&lt;p&gt;If you already have a microservice and you want to convert it over to Knative Serve just &lt;a href=&#34;/docs/using-jx/common-tasks/import/&#34;&gt;import the source repository into Jenkins X&lt;/a&gt; and you should be all done.&lt;/p&gt;

&lt;p&gt;If your application was imported recently into Jenkins X but before you installed and enabled Knative Serve you can use &lt;a href=&#34;/commands/jx_edit_deploy&#34;&gt;jx edit deploy&lt;/a&gt; to switch between the &lt;code&gt;default&lt;/code&gt; deployment kind (using kubernetes &lt;code&gt;Deployment&lt;/code&gt; and &lt;code&gt;Service&lt;/code&gt; resources) and the &lt;code&gt;knative&lt;/code&gt; kind (using Knative &lt;code&gt;Service&lt;/code&gt; resource)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx edit deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will modify the &lt;code&gt;knativeDeploy&lt;/code&gt; flag in your helm &lt;code&gt;charts/myapp/values.yaml&lt;/code&gt; file to enable / disable Knative Serve. Once you have committed that code change and merged to master your application will be released to staging using Knative Serve by the automated CI/CD pipeline in Jenkins X.&lt;/p&gt;

&lt;h2 id=&#34;edit-your-team-s-deploy-kind&#34;&gt;Edit your team’s deploy kind&lt;/h2&gt;

&lt;p&gt;You can edit the default deployment kind for your team which is used when’re you create a QuickStart or import a repository via the &lt;a href=&#34;/commands/jx_edit_deploy&#34;&gt;jx edit deploy&lt;/a&gt; command with the &lt;code&gt;-t&lt;/code&gt; argument:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx edit deploy -t
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-it-works&#34;&gt;How it works&lt;/h3&gt;

&lt;p&gt;We use an open source project called &lt;a href=&#34;https://www.knative.dev/&#34; target=&#34;_blank&#34;&gt;Knative&lt;/a&gt; to provide the elastic scaling of your applications and functions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.knative.dev/&#34; target=&#34;_blank&#34;&gt;Knative Serve&lt;/a&gt; exposes functions in any programming language over HTTP with elastic scaling from zero to many pods. This lets you build serverless applications which run on any cloud or kubernetes cluster and make an efficient use of resources.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.knative.dev/&#34; target=&#34;_blank&#34;&gt;Knative&lt;/a&gt; works with service mesh technologies like &lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34;&gt;Istio&lt;/a&gt; or &lt;a href=&#34;https://gloo.solo.io/&#34; target=&#34;_blank&#34;&gt;Gloo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Jenkins X builld packs create a Knative Serve resource in your helm chart at &lt;code&gt;charts/myapp/templates/ksvc.yaml&lt;/code&gt;. This resource is only created if the &lt;code&gt;knativeDeploy&lt;/code&gt; flag is true / otherwise the default kubernetes &lt;code&gt;Service&lt;/code&gt; &amp;amp; &lt;code&gt;Deployment&lt;/code&gt; are created.&lt;/p&gt;

&lt;h2 id=&#34;installing-knative-serve&#34;&gt;Installing Knative Serve&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gloo.solo.io/&#34; target=&#34;_blank&#34;&gt;Gloo&lt;/a&gt; is much smaller and simpler to install than &lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34;&gt;Istio&lt;/a&gt; so in this guide we are going to use that.&lt;/p&gt;

&lt;p&gt;We have a simple command &lt;a href=&#34;/commands/jx_create_addon_gloo/&#34;&gt;jx create addon gloo&lt;/a&gt; to install Gloo and Knative Serve on Jenkins X:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create addon gloo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will install Knative Serve into the &lt;code&gt;knative-serving&lt;/code&gt; namespace and Gloo into the &lt;code&gt;gloo-system&lt;/code&gt; namespace. You can check it’s all installed and working via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl get pod -n knative-serving
kubectl get pod -n gloo-system
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you can follow the &lt;a href=&#34;https://www.knative.dev/docs/install/&#34; target=&#34;_blank&#34;&gt;Knative install guide&lt;/a&gt; to install it directly via istio or gloo.&lt;/p&gt;

&lt;h2 id=&#34;using-knative-serve&#34;&gt;Using Knative Serve&lt;/h2&gt;

&lt;p&gt;Now you have installed &lt;a href=&#34;https://www.knative.dev/&#34; target=&#34;_blank&#34;&gt;Knative Serve&lt;/a&gt; snd &lt;a href=&#34;https://gloo.solo.io/&#34; target=&#34;_blank&#34;&gt;Gloo&lt;/a&gt; you can &lt;a href=&#34;/docs/getting-started/first-project/create-quickstart/&#34;&gt;create a new quicktart&lt;/a&gt; or &lt;a href=&#34;developing/create-spring/&#34; target=&#34;_blank&#34;&gt;create a new spring boot application&lt;/a&gt; and it will default to using Knative Serve to elastically scale your microservice based on its load over HTTP.&lt;/p&gt;

&lt;p&gt;You can check if Knative Serve is being used on your application by doing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl get ksvc -n jx-staging 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which should show all of the Knative Service resources in your Staging environment.&lt;/p&gt;

&lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;

&lt;p&gt;Here is a &lt;a href=&#34;https://youtu.be/eYIaz_plUOw?t=1980&#34; target=&#34;_blank&#34;&gt;demo of using Knative Serve snd Gloo&lt;/a&gt; from the &lt;a href=&#34;/community/april-4/&#34;&gt;April 4th, 2019&lt;/a&gt; &lt;a href=&#34;/community/&#34;&gt;Office Hours&lt;/a&gt;:&lt;/p&gt;

&lt;iframe width=&#34;565&#34; height=&#34;480&#34; src=&#34;https://www.youtube.com/embed/eYIaz_plUOw&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Lighthouse</title>
      <link>/docs/reference/components/lighthouse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/reference/components/lighthouse/</guid>
      <description>
        
        
        

&lt;p&gt;&lt;a href=&#34;prow.html&#34; target=&#34;_blank&#34;&gt;Prow&lt;/a&gt; is a great way to do &lt;a href=&#34;/docs/using-jx/faq/chatops&#34;&gt;ChatOps&lt;/a&gt; with &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Jenkins X Pipelines&lt;/a&gt; though unfortunately its only supported for GitHub.com and is quite heavy and complex. To work around this we&amp;rsquo;ve created &lt;a href=&#34;https://github.com/jenkins-x/lighthouse&#34; target=&#34;_blank&#34;&gt;Lighthouse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jenkins-x/lighthouse&#34; target=&#34;_blank&#34;&gt;Lighthouse&lt;/a&gt; is a lightweight &lt;a href=&#34;/docs/using-jx/faq/chatops&#34;&gt;ChatOps&lt;/a&gt; based webhook handler which can trigger &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Jenkins X Pipelines&lt;/a&gt; on webhooks from multiple git providers such as: GitHub, GitHub Enterprise, BitBucket Server, BitBucket Cloud, GitLab, Gogs and Gitea.&lt;/p&gt;

&lt;p&gt;Currently Lighthouse is focussed on using &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Jenkins X Pipelines&lt;/a&gt; with tekton though longer term it could be reused with tekton orchestrating Jenkins pipelines via the &lt;a href=&#34;/docs/managing-jx/common-tasks/custom-jenkins/&#34;&gt;Custom Jenkins Server App&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;p&gt;Currently Lighthouse supports the common &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/tree/master/pkg/prow/plugins&#34; target=&#34;_blank&#34;&gt;prow plugins&lt;/a&gt; and handles push webhooks to branches &amp;amp; Pull Request webhooks to then trigger Jenkins X pipelines.&lt;/p&gt;

&lt;p&gt;Lighthouse uses the same &lt;code&gt;config.yaml&lt;/code&gt; and &lt;code&gt;plugins.yaml&lt;/code&gt; file structure from Prow so that we can easily migrate from &lt;code&gt;prow &amp;lt;-&amp;gt; lighthouse&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This also means we get to reuse the clean generation of Prow configuration from the &lt;code&gt;SourceRepository&lt;/code&gt;, &lt;code&gt;SourceRepositoryGroup&lt;/code&gt; and &lt;code&gt;Scheduler&lt;/code&gt; CRDs integrated into &lt;a href=&#34;/docs/reference/boot/&#34;&gt;jx boot&lt;/a&gt;. e.g. here&amp;rsquo;s the &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/env/templates/default-scheduler.yaml&#34; target=&#34;_blank&#34;&gt;default scheduler configuration&lt;/a&gt; which is used for any project imported into your Jenkins X cluster; without you having to touch the actual prow configuration files. You can create many schedulers and associate them to different &lt;code&gt;SourceRepository&lt;/code&gt; resources.&lt;/p&gt;

&lt;p&gt;We can also reuse Prow&amp;rsquo;s capability of defining many separate pipelines on a repository (for PRs or releases) via having separate &lt;code&gt;contexts&lt;/code&gt;. Then on a Pull Request we can use &lt;code&gt;/test something&lt;/code&gt; or &lt;code&gt;/test all&lt;/code&gt; to trigger pipelines and use the &lt;code&gt;/ok-to-test&lt;/code&gt; and &lt;code&gt;/approve&lt;/code&gt; or &lt;code&gt;/lgtm&lt;/code&gt; commands&lt;/p&gt;

&lt;h2 id=&#34;using-lighthouse-with-boot&#34;&gt;Using Lighthouse with boot&lt;/h2&gt;

&lt;p&gt;We have integrated &lt;a href=&#34;https://github.com/jenkins-x/lighthouse&#34; target=&#34;_blank&#34;&gt;lighthouse&lt;/a&gt; into &lt;a href=&#34;/docs/reference/boot/&#34;&gt;jx boot&lt;/a&gt;. To switch to &lt;code&gt;lighthouse&lt;/code&gt; from &lt;code&gt;prow&lt;/code&gt; you need to add something like this to your &lt;code&gt;jx-requirements.yml&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;webhook: lighthouse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have modified your &lt;code&gt;jx-requirements.yml&lt;/code&gt; file you just need to run &lt;code&gt;jx boot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you are using something else other than github.com as your git provider you will also require some extra YAML to configure the git provider. Here are some examples:&lt;/p&gt;

&lt;h2 id=&#34;github-enterprise&#34;&gt;GitHub Enterprise&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
  zone: europe-west1-c
  environmentGitOwner: myowner
  gitKind: github
  gitName: ghe
  gitServer: https://my-github.com
webhook: lighthouse
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;bitbucket-server&#34;&gt;BitBucket Server&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
  environmentGitOwner: myowner
  gitKind: bitbucketserver
  gitName: bs
  gitServer: https://my-bitbucket-server.com
webhook: lighthouse
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gitlab&#34;&gt;GitLab&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cluster:
  provider: gke
  environmentGitOwner: myowner
  gitKind: gitlab
  gitName: gitlab
  gitServer: https://my-gitlab-server.com
webhook: lighthouse
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;comparisons-to-prow&#34;&gt;Comparisons to Prow&lt;/h2&gt;

&lt;p&gt;Lighthouse is very prow-like and currently reuses the Prow plugin source code and a bunch of &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/tree/master/pkg/prow/plugins&#34; target=&#34;_blank&#34;&gt;plugins from prow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Its got a few differences though:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rather than be GitHub specific lighthouse uses &lt;a href=&#34;https://github.com/jenkins-x/go-scm&#34; target=&#34;_blank&#34;&gt;jenkins-x/go-scm&lt;/a&gt; so it can support any git provider&lt;/li&gt;
&lt;li&gt;lighthouse is mostly like &lt;code&gt;hook&lt;/code&gt; from Prow; an auto scaling webhook handler - to keep the footprint small. This also means if anything goes wrong handling webhooks you only have one pod to look into.&lt;/li&gt;
&lt;li&gt;lighthouse is also very light. In Jenkins X we have about 10 pods related to prow; with lighthouse we have just 1 along with the tekton controller itself. That one lighthouse pod could easily be auto scaled too from 0 to many as it starts up very quickly.&lt;/li&gt;
&lt;li&gt;lighthouse focuses purely on Tekton pipelines so it does not require a &lt;code&gt;ProwJob&lt;/code&gt; CRD; instead a push webhook to a release or pull request branch can trigger zero to many &lt;code&gt;PipelineRun&lt;/code&gt; CRDs instead&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;porting-prow-commands&#34;&gt;Porting Prow commands&lt;/h2&gt;

&lt;p&gt;If there are any prow commands you want which we&amp;rsquo;ve not yet ported over, its relatively easy to port prow plugins.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve reused the prow plugin code and configuration code; so its mostly a case of switching imports of &lt;code&gt;k8s.io/test-infra/prow&lt;/code&gt; to &lt;code&gt;github.com/jenkins-x/lighthouse/pkg/prow&lt;/code&gt; - then modifying the github client structs from, say, &lt;code&gt;github.PullRequest&lt;/code&gt; to &lt;code&gt;scm.PullRequest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Most of the github structs map 1-1 with the &lt;a href=&#34;https://github.com/jenkins-x/go-scm&#34; target=&#34;_blank&#34;&gt;jenkins-x/go-scm&lt;/a&gt; equivalents (e.g. Issue, Commit, PullRequest) though the go-scm API does tend to return slices to pointers to resources by default. There are some naming differences at different parts of the API though.&lt;/p&gt;

&lt;p&gt;e.g. compare the &lt;code&gt;githubClient&lt;/code&gt; API for the &lt;a href=&#34;https://github.com/kubernetes/test-infra/blob/344024d30165cda6f4691cc178f25b16f1a1f5af/prow/plugins/lgtm/lgtm.go#L134-L150&#34; target=&#34;_blank&#34;&gt;prow lgtm&lt;/a&gt; versus the &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/pkg/prow/plugins/lgtm/lgtm.go#L135-L150&#34; target=&#34;_blank&#34;&gt;lighthouse lgtm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All the prow plugin related code lives in the &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/tree/master/pkg/prow&#34; target=&#34;_blank&#34;&gt;pkg/prow&lt;/a&gt; tree of packages. Mostly all we&amp;rsquo;ve done is switch to using &lt;a href=&#34;https://github.com/jenkins-x/go-scm&#34; target=&#34;_blank&#34;&gt;jenkins-x/go-scm&lt;/a&gt; and switch out the current prow agents and instead use a single &lt;code&gt;tekton&lt;/code&gt; agent using the &lt;a href=&#34;https://github.com/jenkins-x/lighthouse/blob/master/pkg/plumber/interface.go#L3-L6&#34; target=&#34;_blank&#34;&gt;PlumberClient&lt;/a&gt; to trigger pipelines.&lt;/p&gt;

&lt;h2 id=&#34;environment-variables&#34;&gt;Environment variables&lt;/h2&gt;

&lt;p&gt;The following environment variables are used:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GIT_KIND&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the kind of git server: &lt;code&gt;github, bitbucket, gitea, stash&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GIT_SERVER&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the URL of the server if not using the public hosted git providers: &lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34;&gt;https://github.com&lt;/a&gt; or &lt;a href=&#34;https://bitbucket.org&#34; target=&#34;_blank&#34;&gt;https://bitbucket.org&lt;/a&gt; &lt;a href=&#34;https://gitlab.com&#34; target=&#34;_blank&#34;&gt;https://gitlab.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GIT_USER&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the git user (bot name) to use on git operations&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GIT_TOKEN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the git token to perform operations on git (add comments, labels etc)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;HMAC_TOKEN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the token sent from the git provider in webhooks&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;JX_SERVICE_ACCOUNT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the service account to use for generated pipelines&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Background</title>
      <link>/docs/getting-started/setup/boot/background/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/setup/boot/background/</guid>
      <description>
        
        
        &lt;p&gt;We&amp;rsquo;ve learnt over the last 1-2 years that there are many different kinds of Kubernetes cluster and ways of setting up things like Ingress, DNS, domains, certificates which leads to complexity in the current &lt;a href=&#34;/commands/jx_create_cluster&#34;&gt;jx create cluster&lt;/a&gt; and &lt;a href=&#34;/commands/jx_install/&#34;&gt;jx install&lt;/a&gt; commands.&lt;/p&gt;

&lt;p&gt;Plus its now recommended to use tools like Terraform to manage all of your cloud resources: creating/updating Kubernetes clusters, cloud storage buckets, service accounts, KMS etc.&lt;/p&gt;

&lt;p&gt;We found we had lots of different bits of install logic spread across all kinds of different ways of installing (e.g. &lt;a href=&#34;/commands/jx_create_cluster&#34;&gt;jx create cluster&lt;/a&gt;, &lt;a href=&#34;/commands/jx_install/&#34;&gt;jx install&lt;/a&gt;, the use of the &lt;a href=&#34;/docs/managing-jx/common-tasks/manage-via-gitops/&#34;&gt;&amp;ndash;gitops flag&lt;/a&gt; together with the different ways of managing production secrets - that were hard to test and keep solid.&lt;/p&gt;

&lt;p&gt;We also hit issues that the &lt;a href=&#34;/commands/jx_create_cluster&#34;&gt;jx create cluster&lt;/a&gt; and &lt;a href=&#34;/commands/jx_install/&#34;&gt;jx install&lt;/a&gt; commands would install things like ingress controller and not give users the chance to configure/override their installation.&lt;/p&gt;

&lt;p&gt;Users often struggled with understanding how to easily configure and override things; or upgrade values after things have been installed.&lt;/p&gt;

&lt;p&gt;So we wanted to come up with a new cleaner approach which worked for every kind of installation and provided a standard way to extend and customise the configuration via &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Jenkins X Pipelines&lt;/a&gt; and helm style configuration.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Google</title>
      <link>/docs/getting-started/setup/create-cluster/google/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/setup/create-cluster/google/</guid>
      <description>
        
        
        

&lt;h2 id=&#34;using-the-google-cloud-console&#34;&gt;Using the Google Cloud Console&lt;/h2&gt;

&lt;p&gt;You can create Kubernetes clusters in a few clicks on the &lt;a href=&#34;https://console.cloud.google.com/&#34; target=&#34;_blank&#34;&gt;Google Cloud Console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First make sure you have created/selected a Project:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/quickstart/gke-select-project.png&#34; class=&#34;img-thumbnail&#34;&gt;&lt;/p&gt;

&lt;p&gt;Now you can click the &lt;code&gt;create cluster&lt;/code&gt; button on the &lt;a href=&#34;https://console.cloud.google.com/kubernetes/list&#34; target=&#34;_blank&#34;&gt;kubernetets clusters&lt;/a&gt; page or try &lt;a href=&#34;https://console.cloud.google.com/kubernetes/add&#34; target=&#34;_blank&#34;&gt;create cluster&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;using-gcloud&#34;&gt;Using gcloud&lt;/h2&gt;

&lt;p&gt;The CLI tool for working with google cloud is called &lt;code&gt;gcloud&lt;/code&gt;. If you have not done so already please &lt;a href=&#34;https://cloud.google.com/sdk/install&#34; target=&#34;_blank&#34;&gt;install gcloud&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To create a cluster with gcloud &lt;a href=&#34;https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-cluster&#34; target=&#34;_blank&#34;&gt;follow these instructions&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;using-google-cloud-shell&#34;&gt;Using Google Cloud Shell&lt;/h2&gt;

&lt;p&gt;To avoid having to install &lt;code&gt;gcloud&lt;/code&gt; you can use the &lt;a href=&#34;https://console.cloud.google.com/&#34; target=&#34;_blank&#34;&gt;Google Cloud Shell&lt;/a&gt; as it already comes with most of the things you may need to install (&lt;code&gt;git, gcloud, kubectl&lt;/code&gt; etc).&lt;/p&gt;

&lt;p&gt;First you need to open the Google Cloud Shell via the button in the toolbar:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/quickstart/gke-start-shell.png&#34; class=&#34;img-thumbnail&#34;&gt;&lt;/p&gt;

&lt;p&gt;You can then create a cluster with &lt;code&gt;gcloud&lt;/code&gt; by &lt;a href=&#34;https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-cluster&#34; target=&#34;_blank&#34;&gt;following these instructions&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;connecting-to-your-cluster&#34;&gt;Connecting to your cluster&lt;/h2&gt;

&lt;p&gt;Once you have created a cluster, you need to connect to it so you can access it via the &lt;code&gt;kubectl&lt;/code&gt; or &lt;a href=&#34;/docs/getting-started/setup/install/&#34;&gt;jx&lt;/a&gt; command line tools.&lt;/p&gt;

&lt;p&gt;To do this click on the &lt;code&gt;Connect&lt;/code&gt; button on the &lt;a href=&#34;https://console.cloud.google.com/kubernetes/list&#34; target=&#34;_blank&#34;&gt;Kubernetes Engine page&lt;/a&gt; in the &lt;a href=&#34;https://console.cloud.google.com/&#34; target=&#34;_blank&#34;&gt;Google Console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/quickstart/gke-connect.png&#34; class=&#34;img-thumbnail&#34;&gt;&lt;/p&gt;

&lt;p&gt;You should now be able to use the &lt;code&gt;kubectl&lt;/code&gt; and &lt;code&gt;jx&lt;/code&gt; CLI tools on your laptop to talk to the GKE cluster. e.g. this command should list the nodes in your cluster:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl get node
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Configuration</title>
      <link>/docs/managing-jx/old/config/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/docs/managing-jx/old/config/</guid>
      <description>
        
        
        

&lt;p&gt;Jenkins X should work out of the box with smart defaults for your cloud provider. e.g. Jenkins X automatically uses ECR if you are using AWS or EKS.&lt;/p&gt;

&lt;p&gt;However you can configure values in the underlying helm charts used by Jenkins X.&lt;/p&gt;

&lt;p&gt;To do this you need to create a &lt;code&gt;myvalues.yaml&lt;/code&gt; file in the current directory you are in when you run either &lt;a href=&#34;/commands/jx_create_cluster&#34;&gt;jx create cluster&lt;/a&gt; or &lt;a href=&#34;/commands/jx_install&#34;&gt;jx install&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then this YAML file can be used to override any of the underlying &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/values.yaml&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;values.yaml&lt;/code&gt;&lt;/a&gt; in any of the &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/requirements.yaml&#34; target=&#34;_blank&#34;&gt;charts&lt;/a&gt; in Jenkins X.&lt;/p&gt;

&lt;h2 id=&#34;making-changes-after-the-install&#34;&gt;Making changes after the install&lt;/h2&gt;

&lt;p&gt;Once you have installed you can make more changes via &lt;a href=&#34;/commands/jx_upgrade_platform/&#34;&gt;jx upgrade platform&lt;/a&gt; which will reuse your &lt;code&gt;myvalues.yaml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Or if you use &lt;a href=&#34;/docs/managing-jx/common-tasks/manage-via-gitops/&#34;&gt;GitOps management&lt;/a&gt; you can just create a Pull Request on your Development environment git repository.&lt;/p&gt;

&lt;h2 id=&#34;nexus&#34;&gt;Nexus&lt;/h2&gt;

&lt;p&gt;e.g. if you wish to disable Nexus being installed and instead service link to a separate nexus at a different host name you can use this &lt;code&gt;myvalues.yaml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;nexus:
  enabled: false
nexusServiceLink:
  enabled: true
  externalName: &amp;quot;nexus.jx.svc.cluster.local&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;chartmuseum&#34;&gt;ChartMuseum&lt;/h2&gt;

&lt;p&gt;To disable and service link chart museum add:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;chartmuseum:
  enabled: false
chartmuseumServiceLink:
  enabled: true
  externalName: &amp;quot;jenkins-x-chartmuseum.jx.svc.cluster.local&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jenkins-image&#34;&gt;Jenkins Image&lt;/h2&gt;

&lt;p&gt;We ship with a default Jenkins docker image &lt;a href=&#34;https://hub.docker.com/r/jenkinsxio/jenkinsx/&#34; target=&#34;_blank&#34;&gt;jenkinsxio/jenkinsx&lt;/a&gt; with Jenkins X which has all of our required plugins inside.&lt;/p&gt;

&lt;p&gt;If you wish to add your own plugins you can create your own &lt;code&gt;Dockerfile&lt;/code&gt; and image using our base image like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Dockerfile for adding plugins to Jenkins X 
FROM jenkinsxio/jenkinsx:latest

COPY plugins.txt /usr/share/jenkins/ref/openshift-plugins.txt
RUN /usr/local/bin/install-plugins.sh &amp;lt; /usr/share/jenkins/ref/openshift-plugins.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then add your custom plugins to &lt;code&gt;plugins.txt&lt;/code&gt; locally of the form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myplugin:1.2.3
anotherplugin:4.5.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have built and released your image via CI/CD you can then use it in your Jenkins X installation.&lt;/p&gt;

&lt;p&gt;To configure Jenkins X to use your custom image you can specify your own Jenkins image via a &lt;code&gt;myvalues.yaml&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jenkins:
  Master:
    Image: &amp;quot;acme/my-jenkinsx&amp;quot;
    ImageTag: &amp;quot;1.2.3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is an example OSS project &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-openshift-image&#34; target=&#34;_blank&#34;&gt;jenkins-x/jenkins-x-openshift-image&lt;/a&gt; you could use as a template which creates a new Jenkins image to add OpenShift specific plugins and configuration for using Jenkins X on OpenShift.&lt;/p&gt;

&lt;h2 id=&#34;docker-registry&#34;&gt;Docker Registry&lt;/h2&gt;

&lt;p&gt;We try and use the best defaults for each platform for the Docker Registry; e.g. using ECR on AWS.&lt;/p&gt;

&lt;p&gt;However you can also specify this via the &lt;code&gt;--docker-registry&lt;/code&gt; option when running  &lt;a href=&#34;/commands/jx_create_cluster&#34;&gt;jx create cluster&lt;/a&gt; or &lt;a href=&#34;/commands/jx_install&#34;&gt;jx install&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create cluster gke --docker-registry eu.gcr.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Though if you use a different Docker Registry you will probably need to &lt;a href=&#34;/docs/managing-jx/common-tasks/docker-registry/#update-the-config-json-secret&#34;&gt;also modify the secret for connecting to docker&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
