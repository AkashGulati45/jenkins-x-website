<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X â€“ Core Tasks</title>
    <link>/docs/using-jx/common-tasks/</link>
    <description>Recent content in Core Tasks on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/docs/using-jx/common-tasks/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Browsing</title>
      <link>/docs/using-jx/common-tasks/browsing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-jx/common-tasks/browsing/</guid>
      <description>
        
        
        

&lt;p&gt;If you have used kubernetes before you&amp;rsquo;re probably used the &lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/overview/&#34; target=&#34;_blank&#34;&gt;kubectl&lt;/a&gt; command line to view kubernetes resources:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kubectl get pods
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Jenkins X command line tool, &lt;a href=&#34;/commands/jx&#34;&gt;jx&lt;/a&gt;, has a similar look and feel to &lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/overview/&#34; target=&#34;_blank&#34;&gt;kubectl&lt;/a&gt; and lets you get the status of all the Jenkins X resources.&lt;/p&gt;

&lt;h3 id=&#34;view-jenkins-console&#34;&gt;View Jenkins Console&lt;/h3&gt;

&lt;p&gt;If you are familiar with the Jenkins console then you can use &lt;a href=&#34;/commands/jx_console&#34;&gt;jx console&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to open it in a browser.&lt;/p&gt;

&lt;h3 id=&#34;pipeline-activity&#34;&gt;Pipeline Activity&lt;/h3&gt;

&lt;p&gt;To view the current pipeline activity &lt;a href=&#34;/commands/jx_get_activities&#34;&gt;jx get activities&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get activities
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to watch whats going on with your app &lt;code&gt;myapp&lt;/code&gt;  you can use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get activities -f myapp -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which will watch the pipeline activities and update the screen whenever a significant change happens (e.g. a release completes, a PR is created to start &lt;a href=&#34;/developing/promote&#34;&gt;promotion&lt;/a&gt; etc).&lt;/p&gt;

&lt;h3 id=&#34;pipeline-build-logs&#34;&gt;Pipeline Build logs&lt;/h3&gt;

&lt;p&gt;To view the current pipeline build logs via &lt;a href=&#34;/commands/jx_get_build_logs&#34;&gt;jx get build logs&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get build logs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are then presented with all the possible pipelines to watch.&lt;/p&gt;

&lt;p&gt;You can quickly filter that via&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get build logs -f myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or if you wish to be explicit&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get build logs myorg/myapp/master
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pipelines&#34;&gt;Pipelines&lt;/h3&gt;

&lt;p&gt;To view the current configured pipelines use &lt;a href=&#34;/commands/jx_get_pipelines&#34;&gt;jx get pipelines&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get pipelines
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;applications&#34;&gt;Applications&lt;/h3&gt;

&lt;p&gt;To view all the applications in your team across all your environments with URLs and pod counts use  &lt;a href=&#34;/commands/jx_get_applications&#34;&gt;jx get applications&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get applications
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to hide the URLs or the pod counts you can use &lt;code&gt;u&lt;/code&gt; or &lt;code&gt;-p&lt;/code&gt;. e.g. to hide the URLs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get applications -u
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or hide the pod counts:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get applications -p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also filter the apps by an environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get applications -e staging
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;environments&#34;&gt;Environments&lt;/h3&gt;

&lt;p&gt;To view the &lt;a href=&#34;/docs/concepts/features/#environments&#34;&gt;environments&lt;/a&gt; defined for your team use &lt;a href=&#34;/commands/jx_get_environments&#34;&gt;jx get environments&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx get environments
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a new environment via &lt;a href=&#34;/commands/jx_create_environment&#34;&gt;jx create environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;edit an environment via &lt;a href=&#34;/commands/jx_edit_environment&#34;&gt;jx edit environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;delete an environment via &lt;a href=&#34;/commands/jx_delete_environment&#34;&gt;jx delete environment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create Camel</title>
      <link>/docs/using-jx/common-tasks/create-camel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-jx/common-tasks/create-camel/</guid>
      <description>
        
        
        

&lt;p&gt;If you want to create a new Spring Boot based microservice using &lt;a href=&#34;http://camel.apache.org/&#34; target=&#34;_blank&#34;&gt;Apache Camel&lt;/a&gt; you can use the &lt;a href=&#34;/commands/jx_create_camel&#34;&gt;jx create camel&lt;/a&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx create camel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are then prompted for the project name.&lt;/p&gt;

&lt;p&gt;If you want you can specify this on the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx create camel -a myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;what-happens-when-you-create-a-camel-microservice&#34;&gt;What happens when you create a camel microservice&lt;/h3&gt;

&lt;p&gt;Once you have chosen the project to create and given it a name the following is automated for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;creates a new camel microservice in a sub directory&lt;/li&gt;
&lt;li&gt;add your source code into a git repository&lt;/li&gt;
&lt;li&gt;create a remote git repository on a git service, such as &lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;push your code to the remote git service&lt;/li&gt;
&lt;li&gt;adds default files:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; to build your application as a docker image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jenkinsfile&lt;/code&gt; to implement the CI / CD pipeline&lt;/li&gt;
&lt;li&gt;helm chart to run your application inside Kubernetes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;register a webhook on the remote git repository to your teams Jenkins&lt;/li&gt;
&lt;li&gt;add the git repository to your teams Jenkins&lt;/li&gt;
&lt;li&gt;trigger the first pipeline&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create MLquickstart</title>
      <link>/docs/using-jx/common-tasks/create-mlquickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-jx/common-tasks/create-mlquickstart/</guid>
      <description>
        
        
        

&lt;p&gt;Machine learning quickstarts are pre-made machine-learning applications you can leverage to start your own projects.&lt;/p&gt;

&lt;p&gt;You can create new applications from our list of curated machine learning quickstart applications via the &lt;a href=&#34;/commands/jx_create_mlquickstart&#34;&gt;jx create mlquickstart&lt;/a&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx create mlquickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are then prompted for a list of quickstarts to choose from.&lt;/p&gt;

&lt;p&gt;You will see that these come in groups of three:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;? select the quickstart you wish to create  [Use arrows to move, space to select, type to filter]
&amp;gt; machine-learning-quickstarts/ML-python-pytorch-cpu
  machine-learning-quickstarts/ML-python-pytorch-cpu-service
  machine-learning-quickstarts/ML-python-pytorch-cpu-training
  machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu
  machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu-service
  machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu-training
  machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu
  machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu-service
  machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu-training
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each machine learning quickstart consists of two projects, a training project which manages the training script for your model and a service project that allows you to wrap your trained model instances with service APIs ready for integration into your application.&lt;/p&gt;

&lt;p&gt;If you want to create just the &lt;code&gt;-service&lt;/code&gt; or &lt;code&gt;-training&lt;/code&gt; project on its own, you can do so by selecting the option with the matching name suffix.&lt;/p&gt;

&lt;p&gt;Most of the time, however, what you want to do is to select the &lt;em&gt;project set&lt;/em&gt;, which is the first option with the same prefix name and no suffix. That will create a matched pair of projects that are linked. For example, if you call your project repository &lt;code&gt;my-first-ml-project&lt;/code&gt; and select the &lt;code&gt;ML-python-pytorch-cpu&lt;/code&gt; project set, you will create two independent projects in the current folder, &lt;code&gt;my-first-ml-project-training&lt;/code&gt; and &lt;code&gt;my-first-ml-project-service&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you create these individually, it is important that your projects share the same root name and that they end with the suffixes &lt;code&gt;-training&lt;/code&gt; and &lt;code&gt;-service&lt;/code&gt; so that they can automatically integrate during the build process.&lt;/p&gt;

&lt;p&gt;You can use a text filter to filter on the project names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx create mlquickstart -f gpu
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;what-happens-when-you-create-a-quickstart&#34;&gt;What happens when you create a quickstart&lt;/h3&gt;

&lt;p&gt;Once you have chosen the project to create and given it a name the following is automated for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;creates a pair of new projects from the quickstart in sub directories&lt;/li&gt;
&lt;li&gt;adds the source code for both into a pair of git repositories&lt;/li&gt;
&lt;li&gt;creates matching remote git repositories on a git service, such as &lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pushes your code to the remote git service&lt;/li&gt;
&lt;li&gt;adds default files:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; to build your -service application as a docker image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jenkins-x.yml&lt;/code&gt; to implement the CI / CD pipelines for training and service builds&lt;/li&gt;
&lt;li&gt;Helm charts to run your applications inside Kubernetes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;registers webhooks on the remote git repositories to your teams Jenkins-X server&lt;/li&gt;
&lt;li&gt;triggers the pipelines to train and deploy your service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you create a machine learning quickstart, both the training and service projects will build simultaneously. The service project will deploy but first time around, it will fail to start, because it doesn&amp;rsquo;t yet have a trained model to work with.&lt;/p&gt;

&lt;p&gt;Meanwhile the training project will start work on training the model and once trained, will run some acceptance tests to verify that the trained model instance is sufficiently accurate to be worth promoting for further testing. If the model has not learned well enough, the training build will fail at this point.&lt;/p&gt;

&lt;p&gt;You can restart training with the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx start pipeline
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then select the name of the training project you wish to run again, or you may edit your training script, commit your changes and push them to automatically trigger another training run.&lt;/p&gt;

&lt;p&gt;Once training has completed successfully, the version of your model that has just been trained and the metrics associated with this run will be passed to your &lt;code&gt;-service&lt;/code&gt; project using a pull request. You now need to review the &lt;code&gt;-service&lt;/code&gt; project repository and check the training metrics for suitability. The &lt;code&gt;-service&lt;/code&gt; project will automatically rebuild using the newly trained model instance and deploy into a preview environment where you can test it using its API.&lt;/p&gt;

&lt;p&gt;If all QA checks pass you may then sign-off the release in the same way you would do for any other build within Jenkins-X (have approvers and reviewers issue /approve and /lgtm comments in the pull request thread).&lt;/p&gt;

&lt;p&gt;Once signed off, the trained model instance is merged into the master branch of your -service project, rebuilt and deployed into staging for further testing and integration.&lt;/p&gt;

&lt;p&gt;Each time you restart the traing project, you will get a new model instance that you can chose to promote in the same way. All models are versioned via Git, so you can keep track of each instance and its metrics.&lt;/p&gt;

&lt;h3 id=&#34;how-do-quickstarts-work&#34;&gt;How do quickstarts work?&lt;/h3&gt;

&lt;p&gt;The source of these Quickstarts are maintained in &lt;a href=&#34;https://github.com/machine-learning-quickstarts&#34; target=&#34;_blank&#34;&gt;the machine-learning-quickstarts GitHub organisation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As with conventional Jenkins-X quickstarts, we use the &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34; target=&#34;_blank&#34;&gt;Jenkins X build packs&lt;/a&gt; to match the right pack for the project using the source code language and machine learning framework kinds to pick the most suitable match.&lt;/p&gt;

&lt;p&gt;When you use &lt;a href=&#34;/docs/getting-started/setup/create-cluster/&#34;&gt;jx create&lt;/a&gt;, &lt;a href=&#34;/docs/managing-jx/common-tasks/install-on-cluster/&#34;&gt;jx install&lt;/a&gt; or &lt;a href=&#34;/commands/jx_init/&#34;&gt;jx init&lt;/a&gt; the &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34; target=&#34;_blank&#34;&gt;Jenkins X build packs&lt;/a&gt; are cloned into your &lt;code&gt;~/.jx/draft/packs&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Then when you create a machine learning quickstart, the &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes&#34; target=&#34;_blank&#34;&gt;Jenkins X build packs&lt;/a&gt; are used to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;find the right language pack. e.g. here are the current &lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs&#34; target=&#34;_blank&#34;&gt;list of language packs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;the language pack is then used to default these files if they don&amp;rsquo;t already exist:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; to package the application as a docker image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jenkins-x.yml&lt;/code&gt; to implement the CI / CD pipelines using declarative pipeline as code&lt;/li&gt;
&lt;li&gt;Helm Charts to deploy the application on Kubernetes and to implement &lt;a href=&#34;/docs/concepts/features/#preview-environments&#34;&gt;Preview Environments&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;adding-your-own-quickstarts&#34;&gt;Adding your own Quickstarts&lt;/h2&gt;

&lt;p&gt;If you would like to submit a new Quickstart to Jenkins X please just &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new?labels=quickstart&amp;amp;title=Add%20mlquickstart&amp;amp;body=Please%20add%20this%20github%20mlquickstart:&#34; target=&#34;_blank&#34;&gt;raise an issue&lt;/a&gt; with the URL in GitHub of your quickstart and we can fork it it into the &lt;a href=&#34;https://github.com/machine-learning-quickstarts&#34; target=&#34;_blank&#34;&gt;quickstart organisation&lt;/a&gt; so it appears in the &lt;code&gt;jx create mlquickstart&lt;/code&gt; menu.&lt;/p&gt;

&lt;p&gt;Or if you are part of an open source project and wish to curate your own set of quickstarts for your project; you can &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new?labels=quickstart&amp;amp;title=Add%20mlquickstart&amp;amp;body=Please%20add%20this%20github%20mlquickstart:&#34; target=&#34;_blank&#34;&gt;raise an issue&lt;/a&gt; giving us details of the github organisation where the quickstarts live and we&amp;rsquo;ll add that in as a default organisation to include in the &lt;a href=&#34;/commands/jx_create_mlquickstart&#34;&gt;jx create mlquickstart&lt;/a&gt; command. Its easier for the &lt;a href=&#34;/commands/jx_create_mlquickstart&#34;&gt;jx create mlquickstart&lt;/a&gt; if you maintain the quickstarts in a separate quickstart organisation on github.&lt;/p&gt;

&lt;p&gt;Until we do that you can still use your own Quickstarts in the &lt;code&gt;jx create mlquickstart&lt;/code&gt; command via the &lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--organisations&lt;/code&gt; command line argument. e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx create mlquickstart  --organisations my-github-org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then all machine learning quickstarts found in &lt;code&gt;my-github-org&lt;/code&gt; will be listed in addition to the defaults.&lt;/p&gt;

&lt;p&gt;Note there are some standards for creating machine learning quickstarts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All quickstart names must start with the letters &lt;code&gt;ML-&lt;/code&gt; to distinguish it from a conventional quickstart&lt;/li&gt;
&lt;li&gt;Training projects must be suffixed &lt;code&gt;-training&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Service projects must be suffixed &lt;code&gt;-service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;All components of a project set must share the same root prefix to their name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create a machine learning project set, create a new repository in your quickstart organisation such that the name is the shared prefix for your quickstart, for example: &lt;code&gt;machine-learning-quickstarts/ML-python-pytorch-cpu&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Try to pick explanatory names so that it is clear what language, frameworks and hardware are associated with this project set.&lt;/p&gt;

&lt;p&gt;Inside your project set repository, create a single file named &lt;code&gt;projectset&lt;/code&gt; which has the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[
   {
      &amp;quot;Repo&amp;quot;:&amp;quot;ML-python-pytorch-cpu-service&amp;quot;,
      &amp;quot;Tail&amp;quot;:&amp;quot;-service&amp;quot;
   },
   {
      &amp;quot;Repo&amp;quot;:&amp;quot;ML-python-pytorch-cpu-training&amp;quot;,
      &amp;quot;Tail&amp;quot;:&amp;quot;-training&amp;quot;
   }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;customising-your-teams-quickstarts&#34;&gt;Customising your teams quickstarts&lt;/h2&gt;

&lt;p&gt;You can configure at a team level the quickstarts which are presented to you in the &lt;code&gt;jx create mlquickstart&lt;/code&gt; command. These settings are stored in the &lt;a href=&#34;/docs/reference/components/custom-resources/&#34;&gt;Environment Custom Resource&lt;/a&gt; in Kubernetes.&lt;/p&gt;

&lt;p&gt;To add the location of a set of machine learning quickstarts you can use the &lt;a href=&#34;/commands/jx_create_quickstartlocation/&#34;&gt;jx create quickstartlocation&lt;/a&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx create quickstartlocation --url https://mygit.server.com --owner my-mlquickstarts --includes=[ML-*]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you MUST specify the &lt;code&gt;--includes=[ML-*]&lt;/code&gt; option or your quickstarts will be added to the conventional quickstart list rather than the machine learning list.&lt;/p&gt;

&lt;p&gt;If you omit the &lt;code&gt;--url&lt;/code&gt; argument the command will assume its a &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt; repository. Note that both public and private repositories are supported.&lt;/p&gt;

&lt;p&gt;This means you can have your own shared private quickstarts to reuse within your organisation. Of course we&amp;rsquo;d obviously prefer you to &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new?labels=quickstart&amp;amp;title=Add%20mlquickstart&amp;amp;body=Please%20add%20this%20github%20mlquickstart:&#34; target=&#34;_blank&#34;&gt;share your quickstarts with us via open source&lt;/a&gt; then we can include your quickstart with the entire &lt;a href=&#34;/community&#34;&gt;community&lt;/a&gt; - but there may be times you want to curate your own internal quickstarts using proprietary software.&lt;/p&gt;

&lt;p&gt;You can also specify other &lt;code&gt;--includes&lt;/code&gt; or &lt;code&gt;--excludes&lt;/code&gt; patterns to filter the names of the repositories where &lt;code&gt;*&lt;/code&gt; matches anything and &lt;code&gt;foo*&lt;/code&gt; matches anything starting with &lt;code&gt;foo&lt;/code&gt;. e.g. you could just include the languages and technologies your organisation supports and exclude the rest etc.&lt;/p&gt;

&lt;p&gt;Also note that you can use the alias of &lt;code&gt;qsloc&lt;/code&gt; instead of &lt;code&gt;quickstartlocation&lt;/code&gt; if you like shorter aliases ;)&lt;/p&gt;

&lt;p&gt;You can then view the current quickstart locations for your team via the &lt;a href=&#34;/commands/jx_get_quickstartlocations/&#34;&gt;jx get quickstartlocations&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx get quickstartlocations
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or using an abbreviation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx get qsloc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is also &lt;a href=&#34;/commands/jx_delete_quickstartlocation/&#34;&gt;jx delete quickstartlocation&lt;/a&gt; if you need to remove a git organisation.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create Spring Boot</title>
      <link>/docs/using-jx/common-tasks/create-spring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-jx/common-tasks/create-spring/</guid>
      <description>
        
        
        &lt;p&gt;If you are developing Java microservices then you may well be using the popular &lt;a href=&#34;https://projects.spring.io/spring-boot/&#34; target=&#34;_blank&#34;&gt;Spring Boot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can create new Spring Boot applications using the &lt;a href=&#34;http://start.spring.io/&#34; target=&#34;_blank&#34;&gt;Spring Boot Initializr&lt;/a&gt; and then &lt;a href=&#34;/developing/import&#34;&gt;import them into Jenkins X&lt;/a&gt; via the &lt;a href=&#34;/commands/jx_import&#34;&gt;jx import&lt;/a&gt; command.&lt;/p&gt;

&lt;p&gt;However another alternative is to use the &lt;a href=&#34;/commands/jx_create_spring&#34;&gt;jx create spring&lt;/a&gt; command which provides a fast automated path.&lt;/p&gt;

&lt;p&gt;There is a &lt;a href=&#34;/docs/getting-started/demos-talks-posts/create_spring/&#34;&gt;demo of using the command: jx create spring&lt;/a&gt; or you can try it out yourself in a terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx create spring -d web -d actuator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;-d&lt;/code&gt; argument lets you specify the Spring Boot dependencies you wish to add to your spring boot application.  You can omit the &lt;code&gt;-d&lt;/code&gt; arguments and let the &lt;code&gt;jx&lt;/code&gt; command prompt you to pick the dependencies via a CLI wizard&lt;/p&gt;

&lt;p&gt;We highly recommend you always include the &lt;strong&gt;actuator&lt;/strong&gt; dependency in your Spring Boot applications as it helps provide health checks for &lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/&#34; target=&#34;_blank&#34;&gt;Liveness and Readiness probes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;/commands/jx_create_spring&#34;&gt;jx create spring&lt;/a&gt; will then:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a new Spring Boot application in a subdirectory&lt;/li&gt;
&lt;li&gt;add your source code into a git repository&lt;/li&gt;
&lt;li&gt;create a remote git repository on a git service, such as &lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;push your code to the remote git service&lt;/li&gt;
&lt;li&gt;adds default files:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; to build your application as a docker image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jenkinsfile&lt;/code&gt; to implement the CI / CD pipeline&lt;/li&gt;
&lt;li&gt;helm chart to run your application inside Kubernetes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;register a webhook on the remote git repository to your teams Jenkins&lt;/li&gt;
&lt;li&gt;add the git repository to your teams Jenkins&lt;/li&gt;
&lt;li&gt;trigger the first pipeline&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Developing Using DevPods</title>
      <link>/docs/using-jx/common-tasks/devpods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-jx/common-tasks/devpods/</guid>
      <description>
        
        
        

&lt;p&gt;Jenkins X allows you to edit app code by using a Kubernetes Pod which we call &lt;code&gt;DevPod&lt;/code&gt;.  This helps you develop inside the cloud with the same software tools, platform, container images and pod templates as the CI/CD pipelines. This helps keep everyone in the team and your CI/CD pipelines using the same platform and tools all the time to reduce waste and avoid those pesky &amp;lsquo;it works on my laptop but not in production&amp;rsquo; issues.&lt;/p&gt;

&lt;p&gt;There are a couple of ways that you as a developer can quickly become productive when editing an app, and add value ultra fast.&lt;/p&gt;

&lt;p&gt;There are specific steps for each approach, and we provide you a visual representation of each workflow, as well as the specific steps to quickly get started.&lt;/p&gt;

&lt;aside class=&#34;admonition note&#34;&gt;
    &lt;div class=&#34;note-icon&#34;&gt;
        
    &lt;/div&gt;
    
    
    &lt;div class=&#34;admonition-content&#34;&gt;
Keep in mind, this development workflow helps you make changes before even checking in your code to the repo, or submitting a formal pull request.  Really meant for you to validate your changes fast!

&lt;/div&gt;
&lt;/aside&gt;

&lt;h2 id=&#34;develop-using-devpods-and-a-desktop-ide&#34;&gt;Develop Using DevPods and a desktop IDE&lt;/h2&gt;

&lt;p&gt;In this scenario, you are using a desktop IDE such as VS Code or Intellij which in fact have &lt;a href=&#34;/developing/ide&#34;&gt;a plugin&lt;/a&gt; for &lt;code&gt;Jenkins X&lt;/code&gt;.  You are making &lt;strong&gt;iterative&lt;/strong&gt; changes using your IDE and said changes are reflected immediately when you open the &lt;code&gt;url&lt;/code&gt; assigned to your &lt;code&gt;DevPod&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
&lt;img src=&#34;/images/developing/developer_workflow_ide.png&#34; /&gt;
&lt;figcaption&gt;
&lt;h5&gt;Developer Workflow - Develop Using DevPods and an IDE&lt;/h5&gt;
&lt;/figcaption&gt;&lt;/p&gt;

&lt;aside class=&#34;admonition note&#34;&gt;
    &lt;div class=&#34;note-icon&#34;&gt;
        
    &lt;/div&gt;
    
    
    &lt;div class=&#34;admonition-content&#34;&gt;
See [IDE](/docs/using-jx/common-tasks/ide/#vs-code) for more details on using VSCode
&lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;To get started using this approach, simply execute the following command in the root of your app directory.  We are using a &lt;code&gt;NodeJS&lt;/code&gt; app for this example, therefore we specify the language using the &lt;code&gt;-l&lt;/code&gt; parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  jx create devpod -l nodejs --reuse --sync 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A successful execution will ensures the following happened:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Output the &lt;code&gt;URLs&lt;/code&gt; available to access the &lt;code&gt;Pod&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;App folder will sync with the &lt;code&gt;Pod&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;An ssh session is initiated to the &lt;code&gt;Pod&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once this happens, you must execute one more command within your ssh session to the Pod to ensure any changes are synchronized.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./watch.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;aside class=&#34;admonition note&#34;&gt;
    &lt;div class=&#34;note-icon&#34;&gt;
        
    &lt;/div&gt;
    
    
    &lt;div class=&#34;admonition-content&#34;&gt;
 From this point forward, any changes you make **(step 1 in diagram)**, trigger a Docker Image build, and you should see the output of that build command in your terminal as it happens.
&lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;Once you are happy with changes to your app, you go to &lt;strong&gt;(step 2 in diagram)&lt;/strong&gt; and check-in your code, create a &lt;code&gt;Pull Request&lt;/code&gt; at which point a &lt;code&gt;Jenkins X Pipeline&lt;/code&gt; is triggered immediately to promote your changes to &lt;code&gt;Staging&lt;/code&gt; enviornment.&lt;/p&gt;

&lt;h2 id=&#34;develop-using-devpods-and-a-web-based-ide&#34;&gt;Develop Using DevPods and a Web-based IDE&lt;/h2&gt;

&lt;p&gt;If you prefer not to use an IDE on your desktop using a similar workflow as above.  To edit the app code, you use the well known &lt;a href=&#34;https://www.theia-ide.org/&#34; target=&#34;_blank&#34;&gt;Theia&lt;/a&gt; IDE.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
&lt;img src=&#34;/images/developing/developer_workflow_theia.png&#34; /&gt;
&lt;figcaption&gt;
&lt;h5&gt;Developer Workflow - Develop Using DevPods and Web-based IDE Theia&lt;/h5&gt;
&lt;/figcaption&gt;&lt;/p&gt;

&lt;p&gt;Using this approach, you execute the following on your terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
jx create devpod --verbose true                                 

# some output us removed for brevity
Creating a DevPod of label: nodejs
Created pod me-nodejs - waiting for it to be ready...
Using helmBinary helm with feature flag: none
Updating Helm repository...
Helm repository update done.
...
Pod me-nodejs is now ready!
You can open other shells into this DevPod via jx create devpod

You can edit your app using Theia (a browser based IDE) at http://me-nodejs-theia.jx.yourdomain.com

Attempting to install Bash Completion into DevPod
Running command: kubectl exec -it -n jx -c theia me-nodejs -- /bin/sh -c mkdir -p /workspace
cd /workspace
...
[root@me-nodejs node-app]#
&lt;/code&gt;&lt;/pre&gt;

&lt;aside class=&#34;admonition note&#34;&gt;
    &lt;div class=&#34;note-icon&#34;&gt;
        
    &lt;/div&gt;
    
    
    &lt;div class=&#34;admonition-content&#34;&gt;
 **NOTE**: We are not passing the `--sync` flag because we plan on using the web based IDE
&lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;A succesful execution of the command above, will ensure the following has happened:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DevPod is created, and exposed for you to access app via URL&lt;/li&gt;
&lt;li&gt;Theia Docker container is running&lt;/li&gt;
&lt;li&gt;App folder is mounted to Theia Docker container at &lt;code&gt;/workspace&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;You have a terminal session into the &lt;code&gt;DevPod&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To see your changes in real-time, you must also execute the following command within your terminal session connected to the Pod:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./watch.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;promote-to-staging&#34;&gt;Promote to Staging&lt;/h3&gt;

&lt;p&gt;Once you are happy with the changes you made to the app, you can simply check-in your code and create a &lt;code&gt;pull request&lt;/code&gt;.  This will trigger the pipeline to promote your changes to the &lt;code&gt;Staging&lt;/code&gt; environment (&lt;strong&gt;Step 2 and 3 in diagram&lt;/strong&gt;)&lt;/p&gt;

&lt;h3 id=&#34;promote-to-production&#34;&gt;Promote to Production&lt;/h3&gt;

&lt;p&gt;Most of the time,the Production environment in &lt;strong&gt;Jenkins X&lt;/strong&gt; will have its &lt;code&gt;Promote&lt;/code&gt; setting set to &lt;code&gt;MANUAL&lt;/code&gt;.  Therefore, promoting your app can happen manually after stakeholders have reviewed the staging envionment, for example.&lt;/p&gt;

&lt;p&gt;To promote the app to production, you can execute the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# first get the app version from this output
jx get apps

# promote app version 0.0.2 from staging to production
jx promote --version 0.0.2 --env production
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;additional-learning&#34;&gt;Additional Learning&lt;/h1&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: IDE</title>
      <link>/docs/using-jx/common-tasks/ide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-jx/common-tasks/ide/</guid>
      <description>
        
        
        

&lt;p&gt;As developers we often spend lots of time in our IDE of choice working on code. Jenkins X is all about helping developers deliver business value faster through software; so we want to make Jenkins X super easy to work with from inside your IDE.&lt;/p&gt;

&lt;p&gt;So we have IDE plugins for working with Jenkins X&lt;/p&gt;

&lt;h2 id=&#34;vs-code&#34;&gt;VS Code&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34;&gt;VS Code&lt;/a&gt; is a popular open source IDE from Microsoft.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve created the &lt;a href=&#34;https://github.com/jenkins-x/vscode-jx-tools&#34; target=&#34;_blank&#34;&gt;vscode-jx-tools&lt;/a&gt; extension for VS Code.&lt;/p&gt;

&lt;p&gt;You can install this into VS Code via the &lt;code&gt;Extensions&lt;/code&gt; window, searching for &lt;code&gt;jx&lt;/code&gt; should find the extension.&lt;/p&gt;

&lt;p&gt;After its installed hit &lt;code&gt;Reload&lt;/code&gt; and you should be good to go.&lt;/p&gt;

&lt;p&gt;If you then expand the &lt;code&gt;JENKINS X&lt;/code&gt; navigation window you should see UI that updates in real time as you create projects, as Pull Requests are raised or code is merged to master.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/vscode.png&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;features&#34;&gt;Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;browse all the pipelines in your team with real time updates as release or pull request pipelines start/stop.&lt;/li&gt;
&lt;li&gt;open pipeline build logs inside the VS Code Terminal&lt;/li&gt;
&lt;li&gt;browse the Jenkins pipeline page, git repository, build logs or applications easily

&lt;ul&gt;
&lt;li&gt;right click on the Jenkins X explorer&lt;/li&gt;
&lt;li&gt;start/stop pipelines too!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;open &lt;a href=&#34;/docs/reference/devpods/&#34;&gt;DevPods&lt;/a&gt; with source code synchronisation in a single command in VS Code for developing inside the cloud with the same container images and pod templates as the CI/CD pipelines&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;intellij&#34;&gt;IntelliJ&lt;/h2&gt;

&lt;p&gt;We have a plugin for &lt;a href=&#34;https://www.jetbrains.com/idea/&#34; target=&#34;_blank&#34;&gt;IntelliJ&lt;/a&gt; and the associated IDEs like WebStorm, GoLand, PyCharm et al&lt;/p&gt;

&lt;p&gt;You can find the &lt;a href=&#34;https://plugins.jetbrains.com/plugin/11099-jenkins-x&#34; target=&#34;_blank&#34;&gt;Jenkins X plugin for IntelliJ here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/intellij.png&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;web-based-ide&#34;&gt;Web based IDE&lt;/h2&gt;

&lt;p&gt;To help you work in the cloud we also support a Web Based IDE using  the &lt;a href=&#34;https://www.theia-ide.org/&#34; target=&#34;_blank&#34;&gt;Theia IDE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To get started with Theia see &lt;a href=&#34;/devpods/#using-theia-ide&#34;&gt;how to create a DevPod with an embedded Web IDE&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Import</title>
      <link>/docs/using-jx/common-tasks/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-jx/common-tasks/import/</guid>
      <description>
        
        
        

&lt;p&gt;If you already have some source code you wish to import into Jenkins X then you can use the &lt;a href=&#34;/commands/jx_import&#34;&gt;jx import&lt;/a&gt; command. e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd my-cool-app
$ jx import
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Import will perform the following actions (prompting you along the way):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add your source code into a git repository if it isn&amp;rsquo;t already&lt;/li&gt;
&lt;li&gt;create a remote git repository on a git service, such as &lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;push your code to the remote git service&lt;/li&gt;
&lt;li&gt;add any required files to your project if they do not exist:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt; to build your application as a docker image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jenkinsfile&lt;/code&gt; to implement the CI / CD pipeline&lt;/li&gt;
&lt;li&gt;helm chart to run your application inside Kubernetes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;register a webhook on the remote git repository to your teams Jenkins&lt;/li&gt;
&lt;li&gt;add the git repository to your teams Jenkins&lt;/li&gt;
&lt;li&gt;trigger the first pipeline&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;avoiding-docker-helm&#34;&gt;Avoiding docker + helm&lt;/h3&gt;

&lt;p&gt;If you are importing a repository that does not create a docker image you can use the &lt;code&gt;--no-draft&lt;/code&gt; command line argument which will not use Draft to default the Dockerfile and helm chart.&lt;/p&gt;

&lt;h3 id=&#34;importing-via-url&#34;&gt;Importing via URL&lt;/h3&gt;

&lt;p&gt;If you wish to import a project which is already in a remote git repository then you can use the &lt;code&gt;--url&lt;/code&gt;  argument:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx import --url https://github.com/jenkins-x/spring-boot-web-example.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;importing-github-projects&#34;&gt;Importing GitHub projects&lt;/h3&gt;

&lt;p&gt;If you wish to import projects from a github organisation you can use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx import --github --org myname
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will be prompted for the repositories you wish to import. Use the cursor keys and space bar to select/deselect the repositories to import.&lt;/p&gt;

&lt;p&gt;If you wish to default all repositories to be imported (then deselect any you don&amp;rsquo;t want add &lt;code&gt;--all&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx import --github --org myname --all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To filter the list you can add a &lt;code&gt;--filter&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx import --github --org myname --all --filter foo
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;branch-patterns&#34;&gt;Branch patterns&lt;/h2&gt;

&lt;p&gt;When importing projects into Jenkins X we use git branch patterns to determine which branch names are automatically setup for CI/CD.&lt;/p&gt;

&lt;p&gt;Typically that may default to something like &lt;code&gt;master|PR-.*|feature.*&lt;/code&gt;. That means that the &lt;code&gt;master&lt;/code&gt; branch, any branch starting with &lt;code&gt;PR-&lt;/code&gt; or &lt;code&gt;feature&lt;/code&gt; will be scanned to look for a &lt;code&gt;Jenkinsfile&lt;/code&gt; to setup the CI/CD pipelines.&lt;/p&gt;

&lt;p&gt;If you use another branch name than &lt;code&gt;master&lt;/code&gt; such as &lt;code&gt;develop&lt;/code&gt; or whatever you can change this pattern to be whatever you you like via the &lt;code&gt;--branches&lt;/code&gt; argument whenever you run &lt;a href=&#34;/commands/jx_import&#34;&gt;jx import&lt;/a&gt;, &lt;a href=&#34;/commands/jx_create_spring&#34;&gt;jx create spring&lt;/a&gt; or &lt;a href=&#34;/commands/jx_create_quickstart&#34;&gt;jx create quickstart&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx import --branches &amp;quot;develop|PR-.*|feature.*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may wish to set this to just &lt;code&gt;.*&lt;/code&gt; to work with all branches,.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx import --branches &amp;quot;.*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuring-your-teams-branch-patterns&#34;&gt;Configuring your teams branch patterns&lt;/h2&gt;

&lt;p&gt;Usually a team uses the same naming conventions for branches so you may wish to configure the branch patterns at a team level so that they will be used by default if anyone in your team runs &lt;a href=&#34;/commands/jx_import&#34;&gt;jx import&lt;/a&gt;, &lt;a href=&#34;/commands/jx_create_spring&#34;&gt;jx create spring&lt;/a&gt; or &lt;a href=&#34;/commands/jx_create_quickstart&#34;&gt;jx create quickstart&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These settings are stored in the &lt;a href=&#34;/docs/reference/components/custom-resources/&#34;&gt;Environment Custom Resource&lt;/a&gt; in Kubernetes.&lt;/p&gt;

&lt;p&gt;To set the branch patterns for your team  &lt;a href=&#34;/commands/jx_edit_branchpattern/&#34;&gt;jx edit branchpattern&lt;/a&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx edit branchpattern  &amp;quot;develop|PR-.*|feature.*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then view the current branch patterns for your team via the &lt;a href=&#34;/commands/jx_get_branchpattern/&#34;&gt;jx get branchpattern&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ jx get branchpattern
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Issues</title>
      <link>/docs/using-jx/common-tasks/issues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-jx/common-tasks/issues/</guid>
      <description>
        
        
        

&lt;p&gt;Jenkins X defaults to using the issue tracker in your git provider for creating and browsing issues.&lt;/p&gt;

&lt;p&gt;e.g. if you are inside the source code of a github project then you can type &lt;a href=&#34;/commands/jx_create_issue&#34;&gt;jx create issue&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create issue -t &amp;quot;lets make things more awesome&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And a new issue will be created on github.&lt;/p&gt;

&lt;p&gt;You can list open the issues on your project via &lt;a href=&#34;/commands/jx_get_issues&#34;&gt;jx get issues&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx get issues
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;using-a-different-issue-tracker&#34;&gt;Using a different issue tracker&lt;/h3&gt;

&lt;p&gt;If you wish to use, say, JIRA on a project you first need to add a JIRA service.&lt;/p&gt;

&lt;p&gt;You can register your JIRA service via &lt;a href=&#34;/commands/jx_create_tracker_server&#34;&gt;jx create tracker server&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create tracker server jira https://mycompany.atlassian.net/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then view your issue tracker server via &lt;a href=&#34;/commands/jx_get_tracker&#34;&gt;jx get tracker&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx get tracker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then add a user and token via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create tracker token -n jira  myEmailAddress
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;configure-the-issue-tracker-on-a-project&#34;&gt;configure the issue tracker on a project&lt;/h3&gt;

&lt;p&gt;In the source code of your project then use &lt;a href=&#34;/commands/jx_edit_config&#34;&gt;jx edit config&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx edit config -k issues
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if you have multiple issue trackers, pick the one you wish to use for the project&lt;/li&gt;
&lt;li&gt;enter the name of the project in the issue tracker (e.g. the upper case name of the JIRA project)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A file called &lt;code&gt;jenkins-x.yml&lt;/code&gt; will be modified in your project source code which should be added to your git repository.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Kubernetes Context</title>
      <link>/docs/using-jx/common-tasks/kube-context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-jx/common-tasks/kube-context/</guid>
      <description>
        
        
        

&lt;p&gt;The kubernetes CLI tool &lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/overview/&#34; target=&#34;_blank&#34;&gt;kubectl&lt;/a&gt; keeps track of the kubernetes cluster and namespace you are using via a local file &lt;code&gt;~/.kube/config&lt;/code&gt; (or a file at &lt;code&gt;$KUBECONFIG&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If you want to change the namespace using the kubectl command line you can use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kubectl config set-context `kubectl config current-context` --namespace=foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However &lt;a href=&#34;/commands/jx&#34;&gt;jx&lt;/a&gt; provides lots of helper commands for changing clusters, namespaces or environments:&lt;/p&gt;

&lt;h3 id=&#34;changing-environments&#34;&gt;Changing Environments&lt;/h3&gt;

&lt;p&gt;Use &lt;a href=&#34;/commands/jx_environment&#34;&gt;jx environment&lt;/a&gt; to switch &lt;a href=&#34;/docs/concepts/features/#environments&#34;&gt;environments&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx environment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will be presented with a list of the environments for the current team. Use the cursor keys and enter to select the one you wish to switch to. Or press &lt;code&gt;Ctrl+C&lt;/code&gt; to terminate and not change the environment.&lt;/p&gt;

&lt;p&gt;Or if you know the environment you wish to switch to just type it as an argument:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx env staging
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;changing-namespace&#34;&gt;Changing Namespace&lt;/h3&gt;

&lt;p&gt;Use &lt;a href=&#34;/commands/jx_namespace&#34;&gt;jx namespace&lt;/a&gt; to switch between different kubernetes namespaces.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx namespace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will be presented with a list of all the namespaces in the kubernetes cluster. Use the cursor keys and enter to select the one you wish to switch to. Or press &lt;code&gt;Ctrl+C&lt;/code&gt; to terminate and not change the namespace.&lt;/p&gt;

&lt;p&gt;Or if you know the kubernetes namespace you wish to switch to just type it as an argument:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx ns jx-production
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;changing-cluster&#34;&gt;Changing Cluster&lt;/h3&gt;

&lt;p&gt;Use &lt;a href=&#34;/commands/jx_context&#34;&gt;jx context&lt;/a&gt; to switch between different kubernetes clusters (or contexts).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx context
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will be presented with a list of all the contexts that you have used on your machine. Use the cursor keys and enter to select the one you wish to switch to. Or press &lt;code&gt;Ctrl+C&lt;/code&gt; to terminate and not change the namespace.&lt;/p&gt;

&lt;p&gt;Or if you know the kubernetes namespace you wish to switch to just type it as an argument:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jx ctx gke_jenkinsx-dev_europe-west2-a_myuserid-foo
jx ctx minikube
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;local-changes&#34;&gt;Local changes&lt;/h3&gt;

&lt;p&gt;When you change namespace or context in kubernetes via &lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/overview/&#34; target=&#34;_blank&#34;&gt;kubectl&lt;/a&gt; or the commands above then the kubernetes context and namespace is changed for &lt;strong&gt;all of your terminals&lt;/strong&gt; as it updates the shared file (&lt;code&gt;~/.kube/config&lt;/code&gt; or &lt;code&gt;$KUBECONFIG&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;This can be handy - but is sometimes dangerous. e.g. if you want to do something on a production cluster; but forget and then re-run a command in another terminal to delete all the pods in your development namespace - but forget you just switched to the production namespace!&lt;/p&gt;

&lt;p&gt;So its sometimes useful to be able to change the kubernetes context and/or namespace locally in a single shell only. For example if you ever want to look at a production cluster, only use that cluster in one shell only to minimise accidents.&lt;/p&gt;

&lt;p&gt;You can do that with the &lt;a href=&#34;/commands/jx_shell&#34;&gt;jx shell&lt;/a&gt; command which prompts you to pick a different kubernetes context like the  &lt;a href=&#34;/commands/jx_context&#34;&gt;jx context&lt;/a&gt; command. However changes to the namespace and/or cluster made in this shell only affect the current shell only!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/commands/jx_shell&#34;&gt;jx shell&lt;/a&gt; also automatically updates your command prompt using &lt;a href=&#34;/commands/jx_prompt&#34;&gt;jx prompt&lt;/a&gt;
so that it is clear your shell has changed the context and/or namespace,
and adds bash completion via &lt;a href=&#34;/commands/jx_prompt&#34;&gt;jx prompt&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;customise-your-shell&#34;&gt;Customise your shell&lt;/h3&gt;

&lt;p&gt;You can use &lt;a href=&#34;/commands/jx_prompt&#34;&gt;jx prompt&lt;/a&gt;  to add the current kubernetes cluster and namespace to your terminals prompt.&lt;/p&gt;

&lt;p&gt;To add bash completion to your shell for &lt;a href=&#34;/commands/jx&#34;&gt;jx commands&lt;/a&gt; then try the  &lt;a href=&#34;/commands/jx_completion&#34;&gt;jx completion&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
