<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting Started on Jenkins X</title>
    <link>https://jenkins-x.io/developing/</link>
    <description>Recent content in Getting Started on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Feb 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jenkins-x.io/developing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create Spring Boot</title>
      <link>https://jenkins-x.io/developing/create-spring/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/developing/create-spring/</guid>
      <description>If you are developing Java microservices then you may well be using the popular Spring Boot.
You can create new Spring Boot applications using the Spring Boot Initializr and then import them into Jenkins X via the jx import command.
However another alternative is to use the jx create spring command which provides a fast automated path.
There is a demo of using the command: jx create spring or you can try it out yourself in a terminal:</description>
    </item>
    
    <item>
      <title>Create MLquickstart</title>
      <link>https://jenkins-x.io/developing/create-mlquickstart/</link>
      <pubDate>Sun, 14 Jul 2019 20:34:02 +0100</pubDate>
      
      <guid>https://jenkins-x.io/developing/create-mlquickstart/</guid>
      <description>Machine learning quickstarts are pre-made machine-learning applications you can leverage to start your own projects.
You can create new applications from our list of curated machine learning quickstart applications via the jx create mlquickstart command.
$ jx create mlquickstart You are then prompted for a list of quickstarts to choose from.
You will see that these come in groups of three:
? select the quickstart you wish to create [Use arrows to move, space to select, type to filter] &amp;gt; machine-learning-quickstarts/ML-python-pytorch-cpu machine-learning-quickstarts/ML-python-pytorch-cpu-service machine-learning-quickstarts/ML-python-pytorch-cpu-training machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu-service machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu-training machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu-service machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu-training Each machine learning quickstart consists of two projects, a training project which manages the training script for your model and a service project that allows you to wrap your trained model instances with service APIs ready for integration into your application.</description>
    </item>
    
    <item>
      <title>Create Quickstart</title>
      <link>https://jenkins-x.io/developing/create-quickstart/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/developing/create-quickstart/</guid>
      <description>Quickstarts are pre-made applications you can start a project from, instead of starting from scratch.
You can create new applications from our list of curated Quickstart applications via the jx create quickstart command.
$ jx create quickstart You are then prompted for a list of quickstarts to choose from.
If you know the language you wish to use you can filter the list of quickstarts shown via:
$ jx create quickstart -l go Or use a text filter to filter on the project names:</description>
    </item>
    
    <item>
      <title>Create Camel</title>
      <link>https://jenkins-x.io/developing/create-camel/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/developing/create-camel/</guid>
      <description>If you want to create a new Spring Boot based microservice using Apache Camel you can use the jx create camel command.
$ jx create camel You are then prompted for the project name.
If you want you can specify this on the command line:
$ jx create camel -a myapp What happens when you create a camel microservice Once you have chosen the project to create and given it a name the following is automated for you:</description>
    </item>
    
    <item>
      <title>Import</title>
      <link>https://jenkins-x.io/developing/import/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/developing/import/</guid>
      <description>If you already have some source code you wish to import into Jenkins X then you can use the jx import command. e.g.
$ cd my-cool-app $ jx import Import will perform the following actions (prompting you along the way):
 add your source code into a git repository if it isn&amp;rsquo;t already create a remote git repository on a git service, such as GitHub push your code to the remote git service add any required files to your project if they do not exist:  Dockerfile to build your application as a docker image Jenkinsfile to implement the CI / CD pipeline helm chart to run your application inside Kubernetes  register a webhook on the remote git repository to your teams Jenkins add the git repository to your teams Jenkins trigger the first pipeline  Avoiding docker + helm If you are importing a repository that does not create a docker image you can use the --no-draft command line argument which will not use Draft to default the Dockerfile and helm chart.</description>
    </item>
    
    <item>
      <title>Browsing</title>
      <link>https://jenkins-x.io/developing/browsing/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/developing/browsing/</guid>
      <description>If you have used kubernetes before you&amp;rsquo;re probably used the kubectl command line to view kubernetes resources:
kubectl get pods The Jenkins X command line tool, jx, has a similar look and feel to kubectl and lets you get the status of all the Jenkins X resources.
View Jenkins Console If you are familiar with the Jenkins console then you can use jx console:
jx console to open it in a browser.</description>
    </item>
    
    <item>
      <title>Kubernetes Context</title>
      <link>https://jenkins-x.io/developing/kube-context/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/developing/kube-context/</guid>
      <description>The kubernetes CLI tool kubectl keeps track of the kubernetes cluster and namespace you are using via a local file ~/.kube/config (or a file at $KUBECONFIG).
If you want to change the namespace using the kubectl command line you can use:
kubectl config set-context `kubectl config current-context` --namespace=foo However jx provides lots of helper commands for changing clusters, namespaces or environments:
Changing Environments Use jx environment to switch environments</description>
    </item>
    
    <item>
      <title>Promote</title>
      <link>https://jenkins-x.io/developing/promote/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/developing/promote/</guid>
      <description>The CD Pipelines of Jenkins X automate the promotion of version changes through each Environment which is configured with a promotion strategy property of Auto. By default the Staging environment uses automatic promotion and the Production environment uses Manual promotion.
To manually Promote a version of your application to an environment use the jx promote command.
jx promote --app myapp --version 1.2.3 --env production The command waits for the promotion to complete, logging details of its progress.</description>
    </item>
    
    <item>
      <title>Preview Environments</title>
      <link>https://jenkins-x.io/developing/preview/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/developing/preview/</guid>
      <description>We highly recommend the use of Preview Environments to get early feedback on changes to applications before the changes are merged into master.
Typically the creation of preview environments is automated inside the Pipelines created by Jenkins X.
However you can manually create a Preview Environment using jx via the jx preview command.
jx preview What happens when a Preview environment is created  a new Environment of kind Preview is created along with a kubernetes namespace which shows up in the jx get environments command along with the jx environment and jx namespace commands so you can see which preview environments are active and switch into them to look around the Pull Request is built as a preview docker image and chart and deployed into the preview environment a comment is added to the Pull Request to let your team know the preview application is ready for testing with a link to open the application.</description>
    </item>
    
    <item>
      <title>IDE</title>
      <link>https://jenkins-x.io/developing/ide/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/developing/ide/</guid>
      <description>As developers we often spend lots of time in our IDE of choice working on code. Jenkins X is all about helping developers deliver business value faster through software; so we want to make Jenkins X super easy to work with from inside your IDE.
So we have IDE plugins for working with Jenkins X
VS Code VS Code is a popular open source IDE from Microsoft.
We&amp;rsquo;ve created the vscode-jx-tools extension for VS Code.</description>
    </item>
    
    <item>
      <title>Dev Pods</title>
      <link>https://jenkins-x.io/developing/devpods/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/developing/devpods/</guid>
      <description>The initial focus of Jenkins X is around automating and improving CI/CD for kubernetes. The use of Preview Environments really helps to validate and approve Pull Requests before they get merged to master; but how do you try things out before you are ready submit a Pull Request?
Jenkins X has a concept of Dev Pods which are pods for developers to use as a terminal/shell which are based on the exact same operating system, docker containers and tools installed as the pod templates used in the Jenkins X CI/CD pipelines.</description>
    </item>
    
    <item>
      <title>Git Servers</title>
      <link>https://jenkins-x.io/developing/git/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/developing/git/</guid>
      <description>Jenkins X defaults to using GitHub, the free public git hosting solution for open source projects.
However when working in the enterprise you may wish to use different git servers.
You can list the git servers configured via jx get git:
jx get git  {{ note }} NOTE: All of the Git Providers mentioned here are supported if you are using Jenkins Static Masters. However, if you are using Jenkins X Serverless with Tekton, only GitHub is supported.</description>
    </item>
    
    <item>
      <title>Issues</title>
      <link>https://jenkins-x.io/developing/issues/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/developing/issues/</guid>
      <description>Jenkins X defaults to using the issue tracker in your git provider for creating and browsing issues.
e.g. if you are inside the source code of a github project then you can type jx create issue:
jx create issue -t &amp;quot;lets make things more awesome&amp;quot;  And a new issue will be created on github.
You can list open the issues on your project via jx get issues:
jx get issues  Using a different issue tracker If you wish to use, say, JIRA on a project you first need to add a JIRA service.</description>
    </item>
    
    <item>
      <title>Security Features</title>
      <link>https://jenkins-x.io/developing/security-features/</link>
      <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/developing/security-features/</guid>
      <description>Jenkins X has a few useful addons that can aid with ensuring the ongoing security of your deployed applications. There are static and container security, as well as dynamic security addons available.
Static security The Anchore Engine is used to provide image security, by examining contents of containers either in pull request/review state, or on running containers.
This was introduced in this blog post
To enable this run the following command and let it prepare the services:</description>
    </item>
    
    <item>
      <title>Continuous Integrating JX itself</title>
      <link>https://jenkins-x.io/developing/continuous-integrating-jx-itself/</link>
      <pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/developing/continuous-integrating-jx-itself/</guid>
      <description>You may be wondering how Jenkins X introduce changes to Jenkins X. Of course, Jenkins X is built using Jenkins X itself! That means that new changes to the project go through a CI process, and are built and tested using pipelines that run on a Jenkins X Kubernetes cluster.
Pipelines A Pull Request in the jx repository will automatically trigger some jobs to do CI. The jobs are triggered by Prow, and we can configure which jobs to execute.</description>
    </item>
    
    <item>
      <title>Progressive Delivery</title>
      <link>https://jenkins-x.io/developing/progressive-delivery/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/developing/progressive-delivery/</guid>
      <description>It&amp;rsquo;s likely you have heard of &amp;ldquo;blue green deployment&amp;rdquo; or &amp;ldquo;canary deployment&amp;rdquo;. The idea is to carefully roll out new versions of your application, if problems happen (gasp!) in production, then the system will automatically roll them back, and the majority of users will not be impacted.
This has become a popular CD technique over the years.
As Jenkins X runs on top of Kubernetes, there are some additional built in protections about starting new versions: if a new application fails to start, it is likely that it will never really make it to production, this is a good thing!</description>
    </item>
    
    <item>
      <title>Serverless Apps</title>
      <link>https://jenkins-x.io/developing/serverless-apps/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/developing/serverless-apps/</guid>
      <description>Serverless appications are regular applications that &amp;ldquo;scale to zero&amp;rdquo;. This means when your application isn&amp;rsquo;t in use - no resources at all will be used. You only pay for what you use. These applications scale up elastically to meet the workload.
Once you have this feature enabled - all new apps you import or quickstarts you use by default will be serverless style (you can override as needed - see below).</description>
    </item>
    
  </channel>
</rss>