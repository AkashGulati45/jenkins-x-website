<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on Jenkins X</title>
    <link>https://jenkins-x.io/architecture/</link>
    <description>Recent content in Architecture on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Feb 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jenkins-x.io/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Diagram</title>
      <link>https://jenkins-x.io/architecture/diagram/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/architecture/diagram/</guid>
      <description>There are several architectures based on how you choose to install Jenkins X. We show you two common architectures below.
  Architecture depicts a deployment with static Jenkins instance     Architecture depicts a serverless deployment using Tekton Pipelines   </description>
    </item>
    
    <item>
      <title>Components</title>
      <link>https://jenkins-x.io/architecture/components/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/architecture/components/</guid>
      <description>An installation of Jenkins X consists of:
 a Development Environment per team which is a kubernetes namespace zero to many other Permanent Environments  the out of the box is for each team to get their own Staging and Production environments each team can have as many environments as they wish and can call them whatever they like  optional Preview Environments  Typically each environment is associated with its own kubernetes namespace which are usually different to ensure clean isolation between the environments.</description>
    </item>
    
    <item>
      <title>Source</title>
      <link>https://jenkins-x.io/architecture/source/</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/architecture/source/</guid>
      <description>Jenkins X is built on the shoulders of giants and also has lots of different source repositories to make various things from CLI tools, docker images, helm charts and addon Apps
This page lists the main organisations and repositories.
Organisations  jenkins-x the main organisation for source code jenkins-x-apps contains the standard addon Apps for Jenkins X jenkins-x-buildpacks contains the available build packs jenkins-x-charts the main helm charts we distribute jenkins-x-images contains some custom docker image builds jenkins-x-quickstarts the quickstart projects used by create quickstart jenkins-x-test-projects test projects we use in test cases  Repositories Here we&amp;rsquo;ll call out of some of the main repositories in the above organisations:</description>
    </item>
    
    <item>
      <title>Jenkins X Pipelines</title>
      <link>https://jenkins-x.io/architecture/jenkins-x-pipelines/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/architecture/jenkins-x-pipelines/</guid>
      <description>We recently announced that we are introducing Jenkins X Pipelines, a new serverless pipeline execution engine based on the Tekton Pipelines open source project.
Tekton has been designed to be a modern cloud native solution for running pipelines.
The work here is still experimental but we&amp;rsquo;d love feedback and help from the community to drive it forward.
Trying Jenkins X Pipelines Right now to enable a Tekton based install you can create a new cluster using jx along with these flags:</description>
    </item>
    
    <item>
      <title>Jenkins X Pipeline Syntax Reference</title>
      <link>https://jenkins-x.io/architecture/pipeline-syntax-reference/</link>
      <pubDate>Thu, 20 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/architecture/pipeline-syntax-reference/</guid>
      <description>Where to Define Your Pipelines Pipelines can either be defined in build packs, used for multiple projects, or in the jenkins-x.yml file in a project&amp;rsquo;s repository. When defining pipelines in a build pack, the top-level configuration below is used directly, while in jenkins-x.yml, the top-level configuration is under the pipelineConfig key.
Top-Level Configuration  extends - A build pack can extend another build pack, inheriting its configuration and contributing its own additional behavior.</description>
    </item>
    
    <item>
      <title>Build Packs</title>
      <link>https://jenkins-x.io/architecture/build-packs/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/architecture/build-packs/</guid>
      <description>We use draft style build packs for different languages, runtimes and build tools to add the necessary configuration files to projects as we import them or create them so that we can build and deploy them in kubernetes.
The build packs are used to default the following files if they do not already exist in the project being created/imported:
 Dockerfile to turn the code into an immutable docker image for running on kubernetes Jenkinsfile to define the declarative Jenkins pipeline to define the CI/CD steps for the application helm chart in the charts folder to generate the kubernetes resources to run the application on kubernetes a preview chart in the charts/preview folder to define any dependencies for deploying a preview environment on a Pull Request</description>
    </item>
    
    <item>
      <title>Custom Resources</title>
      <link>https://jenkins-x.io/architecture/custom-resources/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/architecture/custom-resources/</guid>
      <description>Kubernetes provides an extension mechanism called Custom Resources which allows microservices to extend the Kubernetes platform to solve higher order problems.
So in Jenkins X, we have added a number of Custom Resources to help extend Kubernetes to support CI/CD.
You can also browse the Custom Resource API Reference
Environments Jenkins X natively supports environments allowing them to be defined for your team and then queried via jx get environments:</description>
    </item>
    
    <item>
      <title>Prow</title>
      <link>https://jenkins-x.io/architecture/prow/</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/architecture/prow/</guid>
      <description>Prow is a Kubernetes based CI/CD system. Jobs can be triggered by various types of events and report their status to many different services. In addition to job execution, Prow provides GitHub automation in the form of policy enforcement, chat-ops via /foo style commands, and automatic PR merging.
Prow has a microservice architecture implemented as a collection of container images that run as Kubernetes deployments
hook There is a binary called hook that receives all the web hooks from GitHub.</description>
    </item>
    
    <item>
      <title>Cloud Native Jenkins</title>
      <link>https://jenkins-x.io/architecture/cloud-native-jenkins/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/architecture/cloud-native-jenkins/</guid>
      <description>Jenkins X helps to support cloud native jenkins via:
 orchestrating either serverless jenkins using prow or a Static Jenkins masters per team. This lets teams move towards servlerless while bring along static masters too. each team can install its own Jenkins X in its own namespace (via jx install --namespace myteam) support for different workloads per team (see jx edit buildpack).  Different workloads Some teams develop cloud native applications on kubernetes and so should use the kubernetes workloads option.</description>
    </item>
    
    <item>
      <title>Pod Templates</title>
      <link>https://jenkins-x.io/architecture/pod-templates/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/architecture/pod-templates/</guid>
      <description>We implement CI/CD pipelines using declarative Jenkins pipelines using a Jenkinsfile in the source of each application or environment git repository.
We use the kubernetes plugin for Jenkins to be able to spin up new pods on kubernetes for each build - giving us an elastic pool of agents to run pipelines thanks to kubernetes.
The Kubernetes plugin uses pod templates to define the pod used to run a CI/CD pipeline which consists of:</description>
    </item>
    
    <item>
      <title>Storage</title>
      <link>https://jenkins-x.io/architecture/storage/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/architecture/storage/</guid>
      <description>When we use a Static Jenkins Server with Jenkins X we inherit the usual Jenkins storage model; that build logs and test results and reports are stored on the Persistent Volume of the Jenkins server.
However as we move towards a more Cloud Native Jenkins and use Serverless Jenkins we need a better solution for the storage of things like logs, test results, code coverage reports etc.
Storage Extensions So we&amp;rsquo;ve added a storage extension point which is used from:</description>
    </item>
    
    <item>
      <title>Version Stream</title>
      <link>https://jenkins-x.io/architecture/version-stream/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/architecture/version-stream/</guid>
      <description>Jenkins X is made up of a large number of command line packages and helm charts, some of which are released by the Jenkins X community and others come from the wider open source ecosystem.
To improve the stability of Jenkins X when lots of packages and charts are changing all the time we have introduced the Jenkins X Version Stream
How it works The version stream is stored in the jenkins-x/jenkins-x-versions git repository and stores the stable version of all packages and charts used by Jenkins X.</description>
    </item>
    
    <item>
      <title>Docker Registry</title>
      <link>https://jenkins-x.io/architecture/docker-registry/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/architecture/docker-registry/</guid>
      <description>To be able to create and publish docker images we need to use a Docker Registry.
By default Jenkins X ships with a Docker Registry which is included in the system namespace for Jenkins X along with Jenkins and Nexus. Since this docker registry is running inside your kubernetes cluster and is used internally inside your cluster its hard to expose it via HTTPS with self signed certificates - so we default to using insecure docker registries for the IP range of service IPs in your kubernetes cluster.</description>
    </item>
    
    <item>
      <title>Access Control</title>
      <link>https://jenkins-x.io/architecture/access-control/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/architecture/access-control/</guid>
      <description>Jenkins X uses Role-Based Access Control (RBAC) policies to control access to its various resources. The enforcement of the policies is provided by Kubernetes&amp;rsquo; RBAC support.
Teams can have a number of Environments (e.g., Dev, Staging, Production) along with dynamic Preview Environments; keeping the Role and RoleBinding resources from Kubernetes RBAC in sync with all the various namespaces and members of your team can be challenging.
To make this management easier, Jenkins X creates a new Custom Resource called EnvironmentRoleBinding which allows you to associate a Role labeled with jenkins.</description>
    </item>
    
    <item>
      <title>Custom Jenkins Servers</title>
      <link>https://jenkins-x.io/architecture/custom-jenkins/</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/architecture/custom-jenkins/</guid>
      <description>Jenkins X provides automated CI/CD for your libraries and microservices you want to deploy on Kubernetes, but what about those other Jenkinsfile based pipelines you have already created on a custom Jenkins Server?
Jenkins X now has a Jenkins App that makes it easy to add one or more custom Jenkins servers to your Team and use the custom Jenkins Server to implement any custom pipelines you have developed.</description>
    </item>
    
  </channel>
</rss>