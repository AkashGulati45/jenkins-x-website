<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>研发 on Jenkins X</title>
    <link>https://jenkins-x.io/zh/developing/</link>
    <description>Recent content in 研发 on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 01 Feb 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jenkins-x.io/zh/developing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>创建 Spring Boot</title>
      <link>https://jenkins-x.io/zh/developing/create-spring/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/developing/create-spring/</guid>
      <description>如果你在开发基于Java的微服务，那么，你可能正在用流行的Spring Boot。
你可以利用Spring Boot Initializr创建Spring Boot应用，然后通过执行命令 jx import 来导入Jenkins X。
然而，另外一个快速自动化的方式，是通过执行 jx create spring 命令实现：
$ jx create spring -d web -d actuator 参数 -d 允许你指定希望添加到 Spring Boot 应用中的依赖。
我们强烈建议你总是包括依赖 actuator 到你的 Spring Boot 应用中，它可以为 Liveness and Readiness probes 提供健康检查。
命令 jx create spring 的步骤如下：
 在子目录中创建一个新的 Spring Boot 应用 把你的源码加入到git库中 在 git 服务，例如 GitHub,添加 git 远程库 推送代码到 git 远程库 添加默认的文件：  Dockerfile 把你的应用构建为 docker 镜像 Jenkinsfile 实现 CI / CD 流水线 在 Kubernetes 中通过 helm chart 运行你的应用  为你的 Jenkins 在 git 远程库上注册 webhook 为你的 Jenkins 添加 git 库 首次触发流水线  </description>
    </item>
    
    <item>
      <title>快速入门</title>
      <link>https://jenkins-x.io/zh/developing/create-quickstart/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/developing/create-quickstart/</guid>
      <description>你可以由预制的应用开始一个项目，而不是从头开始。
你可以通过命令 jx create quickstart ，从我们预制的快速应用列表中创建一个新的应用。
$ jx create quickstart 然后，根据列表选择一个。
如果你清楚列表中你所需要的语言，可以进行如下过滤：
$ jx create quickstart -l go 或者使用文本过滤器对项目名称做过滤：
$ jx create quickstart -f http 当你选择快速入门时的细节 一旦你选择项目并命名后，下面的步骤会自动完成：
 在子目录中创建应用 把你的代码添加到 git 库中 在 git 服务上添加远程库，例如： GitHub 推送代码到远程库 添加默认文件：  Dockerfile to build your application as a docker image Dockerfile 把你的应用构建为 docker 镜像 Jenkinsfile to implement the CI / CD pipeline Jenkinsfile 实现 CI / CD 流水线 在 Kubernetes 中通过 helm chart 运行你的应用  为你的 Jenkins 在 git 远程库上注册 webhook 为你的 Jenkins 添加 git 库 首次触发流水线  快速入门的原理？ 快速入门的源码托管在 the jenkins-quickstarts Github organisation。</description>
    </item>
    
    <item>
      <title>导入</title>
      <link>https://jenkins-x.io/zh/developing/import/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/developing/import/</guid>
      <description>如果你已经有一些源码，希望导入 Jenkins X，你可以使用 jx import 命令。
$ cd my-cool-app $ jx import 导入将会执行下面的动作（提示你按照这个方法来）：
 如果你的源码还不在 git 库中，添加进去 在给定的 git 服务上创建一个远程库，例如 GitHub 把你的代码推送到远程 git 服务 添加任何需要的文件到你的工程中，如果不存在的话：  Dockerfile 把你的应用作为 docker 镜像进行构建 Jenkinsfile 实现持续集成、持续构建流水线 helm chart 让你的应用在 Kubernetes 中运行  为你们团队的 Jenkins 注册一个 webhook 到远程 git 仓库 为你们团队的 Jenkins 添加这个 git 仓库 首次触发流水线  避免 docker + helm 如果你正在导入的仓库而不需要创建 docker 镜像，你可以使用命令参数 --no-draft ，就不会使用 Draft 默认的 Dockerfile 和 helm chart。
通过 URL 导入 如果你希望导入的工程已经在 git 远程库中，那么，你可以使用参数 --url：</description>
    </item>
    
    <item>
      <title>浏览</title>
      <link>https://jenkins-x.io/zh/developing/browsing/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/developing/browsing/</guid>
      <description>如果你之前用过 Kubernetes，你可能使用过 kubectl 命令查看 Kubernetes 资源：
kubectl get pods Jenkins X 的命令行工具，jx，和 kubectl 看起来相似，并且可以让你看到所有的 Jenkins X 资源。
查看 Jenkins 控制台 如果你熟悉 Jenkins 控制台，那么你可以使用 jx console ：
jx console 就会打开一个浏览器。
流水线 要查看当前流水线使用 jx get pipelines:
jx get pipelines 流水线构建日志 通过 jx get build logs 查看当前流水线构建日志：
jx get build logs 你当前看到的是所有能看到的流水线。
你可以通过下面快速过滤
jx get build logs -f myapp 或者，你希望指定
jx get build logs myorg/myapp/master 流水线活动 为了查看当前流水线的活动 jx get activities：
jx get activities 如果你想要观察你的应用 myapp，你可以使用：</description>
    </item>
    
    <item>
      <title>Kubernetes 上下文</title>
      <link>https://jenkins-x.io/zh/developing/kube-context/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/developing/kube-context/</guid>
      <description>Kubernetes 命令行工具 kubectl 通过本地文件 ~/.kube/config（会在 $KUBECONFIG 的文件） 记录你使用的 Kubernetes 集群和命名空间。
如果你想要改变命名空间，你可以使用 kubectl 命令行：
kubectl config set-context`kubectl config current-context` --namespace=foo 然而 jx 还提供了很多有用的命令，用来改变集群、命名空间或环境：
切换环境 使用 jx environment 来切换 环境
jx environment 你将会看到当前团队的环境列表。使用方向键和回车来选择你想要切换的环境。或者按下 Ctrl+C 终止，不切换环境。
或者，如果你知道想要切换的环境，可以直接把它作为参数：
jx env staging 切换命名空间 使用 jx namespace 在 Kubernetes 不同的命名空间之间进行切换。
jx namespace 你会看到 Kubernetes 集群中所有命名空间的列表。使用方向键和回车选择你想要切换的。或者，按下 Ctrl+C 中断，不切换命名空间。
或者，如果你知道想要切换的 Kubernetes 命名空间，可以直接把它作为参数：
jx ns jx-production 切换集群 使用 jx context 在不同的 Kubernetes 集群（或者上下文）之间切换。
jx context 你会得到当前机器上所有上下文的列表。使用方向键或者回车选择你想要切换的。或者，按下 Ctrl+C 中断，不切换集群。</description>
    </item>
    
    <item>
      <title>Promote</title>
      <link>https://jenkins-x.io/zh/developing/promote/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/developing/promote/</guid>
      <description>The CD Pipelines of Jenkins X automate the promotion of version changes through each Environment which is configured with a promotion strategy property of Auto. By default the Staging environment uses automatic promotion and the Production environment uses Manual promotion.
To manually Promote a version of your application to an environment use the jx promote command.
jx promote myapp --version 1.2.3 --env production The command waits for the promotion to complete, logging details of its progress.</description>
    </item>
    
    <item>
      <title>Preview</title>
      <link>https://jenkins-x.io/zh/developing/preview/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/developing/preview/</guid>
      <description>We highly recommend the use of Preview Environments to get early feedback on changes to applications before the changes are merged into master.
Typically the creation of preview environments is automated inside the Pipelines created by Jenkins X.
However you can manually create a Preview Environment using jx via the jx preview command.
jx preview What happens when a Preview environment is created  a new Environment of kind Preview is created along with a kubernetes namespace which shows up in the jx get environments command along with the jx environment and jx namespace commands so you can see which preview environments are active and switch into them to look around the Pull Request is built as a preview docker image and chart and deployed into the preview environment a comment is added to the Pull Request to let your team know the preview application is ready for testing with a link to open the application.</description>
    </item>
    
    <item>
      <title>问题</title>
      <link>https://jenkins-x.io/zh/developing/issues/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/developing/issues/</guid>
      <description>Jenkins X 默认使用你的 git 提供商中的问题跟踪系统来创建和浏览问题。
e.g. if you are inside the source code of a github project then you can type jx create issue:
jx create issue -t &amp;quot;lets make things more awesome&amp;quot;  And a new issue will be created on github.
You can list open the issues on your project via jx get issues:
jx get issues  使用不同的问题跟踪 If you wish to use, say, JIRA on a project you first need to add a JIRA service.</description>
    </item>
    
    <item>
      <title>Git 服务器</title>
      <link>https://jenkins-x.io/zh/developing/git/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/developing/git/</guid>
      <description>Jenkins X defaults to using GitHub, the free public git hosting solution for open source projects.
However when working in the enterprise you may wish to use different git servers.
You can list the git servers configured via jx get git:
jx get git  Adding a new git provider If you already have a git server somewhere you can add it into Jenkins X via jx create git server:</description>
    </item>
    
  </channel>
</rss>