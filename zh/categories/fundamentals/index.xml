<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fundamentals on Jenkins X</title>
    <link>https://jenkins-x.io/zh/categories/fundamentals/</link>
    <description>Recent content in Fundamentals on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 27 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jenkins-x.io/zh/categories/fundamentals/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>架构</title>
      <link>https://jenkins-x.io/zh/architecture/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/architecture/</guid>
      <description></description>
    </item>
    
    <item>
      <title>入门</title>
      <link>https://jenkins-x.io/zh/getting-started/</link>
      <pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/getting-started/</guid>
      <description>首先，需要在你本地的机器上安装 jx 命令行工具 。
你可以使用 jx 命令 来创建一个新的 kubernetes 集群 ，然后 Jenkins X 就会自动安装。
或者，如果你已经有了一个 kubernetes 集群，那么可以在你的 kubernetes 集群上安装 Jenkins X。</description>
    </item>
    
    <item>
      <title>示例</title>
      <link>https://jenkins-x.io/zh/demos/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/demos/</guid>
      <description></description>
    </item>
    
    <item>
      <title>特色</title>
      <link>https://jenkins-x.io/zh/about/features/</link>
      <pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/about/features/</guid>
      <description>命令行 Jenkins X 带来了一个方便使用的命令行工具 jx ：
 安装 Jenkins X 到你已经存在的 Kubernetes 集群 创建一个新的 kubernetes 集群 并把 Jenkins X 安装进去 导入项目 到 Jenkins X 中以及他们的持续部署流水线设置 创建新的 Spring Boot 应用 并导入 Jenkins X 中，以及他们的持续部署流水线设置  流水线 不必深入了解 Jenkins 流水线的内部，Jenkins X 会默认给你的项目提供一些很好的流水线——基于DevOps 最佳实践实现了所有的持续集成和持续部署
环境 环境指的是应用部署的地方。开发人员通常使用缩写来描述环境，例如：“测试中（Testing）、Staging/UAT或者生产（Production）”。
在 Jenkins X 中每个团队都有一套自己的环境。默认情况下，Jenkins X 会给每个团队创建一个 Staging 和 生产 环境，但你可以通过命令 jx create environment创建一个新的环境。
我们使用 GitOps 来管理要部署到每个环境中的 Kubernetes 资源的配置和版本。因此，每个环境都有自己的 git 仓库，应用在这个环境中运行需要的 Helm Charts、版本以及配置都在库中。
在 Kubernetes 集群中一个环境对应一个命名空间。当 Pull Requests 被合并到环境所在的 git 库后，该环境的流水线就会把 git 库中的 Helm Charts 应用到环境命名空间中。</description>
    </item>
    
    <item>
      <title>路线图</title>
      <link>https://jenkins-x.io/zh/contribute/roadmap/</link>
      <pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/contribute/roadmap/</guid>
      <description>特色 未计划 已计划 进行中 已发布     操作系统       macOS    1.1.x   Linux    1.1.x   Windows  已计划     Cloud Providers       AWS    1.1.x   Azure    1.1.x   EKS  已计划     GKE    1.</description>
    </item>
    
    <item>
      <title>概念</title>
      <link>https://jenkins-x.io/zh/about/concepts/</link>
      <pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/about/concepts/</guid>
      <description>Jenkins X 旨在使得 DevOps 原则和最佳实践对于研发人员来说简单。
原则 &amp;ldquo;DevOps 是一套旨在缩短从提交变更到生产发布的时间的实践，同时保证高质量&amp;rdquo;
DevOps项目的目标：
 市场需求 提高部署频率 缩短修复时间 更低的市场错误率 更快的平均恢复时间  相对于行业平均水平——每周一次和每月一次来说，高效的团队应该有能力每天部署多次。
代码从已提交到上生产应该少于一个小时，变更失败率也应该小于15%，而平均值在31-45%之间。
从失败中的平均恢复时间应该少于一个小时。
Jenkins X 设计了第一原则，允许团队采用 DevOps 的最佳实践，来达到行业的最高目标。
实践 下列最佳实践被认为是DevOps成功的关键：
 架构松耦合 自服务配置 自动化管理 持续构建 / 集成和部署 自动发布管理 增量测试 配置即代码  Jenkins X 把大量常见的方法论和组件集成为复杂度最小的方法。
架构 Jenkins X 基于松耦合架构的 DevOps 模型，被设计用来支持在多个团队之间，部署大量可重复、可管理的分布式微服务。
概念模型 构成 Jenkins X 基于以下的核心组件：
Kubernetes 和 Docker Kubernetes 是系统的核心，它已经成为了 DevOps 事实上的虚拟基础设施平台。每个主要的云服务商现在都已经提供了 Kubernetes 基础设施，并且可能已经在很多私有基础设施中也被安装了。测试环境可能也在使用 Minikube 安装器创建本地开发环境。
从功能上，该Kubernetes 平台扩展了 Docker 提供的基本容器化原则，用于跨多个物理节点。
简单来说，Kubernetes 提供了同构的虚拟基础设施，可以通过动态添加或者移除节点实现伸缩。每个节点都在一个大型专用虚拟网络空间里。
Kubernetes 中的部署单元是 Pod，它包含一个或多个 Docker 容器以及一些元数据。Pod 中所有的容器分享同样的虚拟 IP 地址和端口范围。Deployments在 Kubernetes 中是申明式的，因此，用户指定特定版本的 Pod 中部署的实例数量，Kubernetes 据此来计算跨节点中的 Pod 是应该删除或部署。根据标签匹配来决定资源的实例数量。一旦被部署，Kubernetes 就会通过定期的健康检查来保证 Pod 的数量，终止或则替换没响应的 Pod。</description>
    </item>
    
    <item>
      <title>创建 Spring Boot</title>
      <link>https://jenkins-x.io/zh/developing/create-spring/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/developing/create-spring/</guid>
      <description>如果你在开发基于Java的微服务，那么，你可能正在用流行的Spring Boot。
你可以利用Spring Boot Initializr创建Spring Boot应用，然后通过执行命令 jx import 来导入Jenkins X。
然而，另外一个快速自动化的方式，是通过执行 jx create spring 命令实现：
$ jx create spring -d web -d actuator 参数 -d 允许你指定希望添加到 Spring Boot 应用中的依赖。
我们强烈建议你总是包括依赖 actuator 到你的 Spring Boot 应用中，它可以为 Liveness and Readiness probes 提供健康检查。
命令 jx create spring 的步骤如下：
 在子目录中创建一个新的 Spring Boot 应用 把你的源码加入到git库中 在 git 服务，例如 GitHub,添加 git 远程库 推送代码到 git 远程库 添加默认的文件：  Dockerfile 把你的应用构建为 docker 镜像 Jenkinsfile 实现 CI / CD 流水线 在 Kubernetes 中通过 helm chart 运行你的应用  为你的 Jenkins 在 git 远程库上注册 webhook 为你的 Jenkins 添加 git 库 首次触发流水线  </description>
    </item>
    
    <item>
      <title>快速入门</title>
      <link>https://jenkins-x.io/zh/developing/create-quickstart/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/developing/create-quickstart/</guid>
      <description>你可以由预制的应用开始一个项目，而不是从头开始。
你可以通过命令 jx create quickstart ，从我们预制的快速应用列表中创建一个新的应用。
$ jx create quickstart 然后，根据列表选择一个。
如果你清楚列表中你所需要的语言，可以进行如下过滤：
$ jx create quickstart -l go 或者使用文本过滤器对项目名称做过滤：
$ jx create quickstart -f http 当你选择快速入门时的细节 一旦你选择项目并命名后，下面的步骤会自动完成：
 在子目录中创建应用 把你的代码添加到 git 库中 在 git 服务上添加远程库，例如： GitHub 推送代码到远程库 添加默认文件：  Dockerfile to build your application as a docker image Dockerfile 把你的应用构建为 docker 镜像 Jenkinsfile to implement the CI / CD pipeline Jenkinsfile 实现 CI / CD 流水线 在 Kubernetes 中通过 helm chart 运行你的应用  为你的 Jenkins 在 git 远程库上注册 webhook 为你的 Jenkins 添加 git 库 首次触发流水线  快速入门的原理？ 快速入门的源码托管在 the jenkins-quickstarts Github organisation。</description>
    </item>
    
  </channel>
</rss>