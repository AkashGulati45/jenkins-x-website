<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fundamentals on Jenkins X</title>
    <link>https://jenkins-x.io/zh/categories/fundamentals/</link>
    <description>Recent content in Fundamentals on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 27 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jenkins-x.io/zh/categories/fundamentals/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>架构</title>
      <link>https://jenkins-x.io/zh/architecture/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/architecture/</guid>
      <description></description>
    </item>
    
    <item>
      <title>概念</title>
      <link>https://jenkins-x.io/zh/about/concepts/</link>
      <pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/about/concepts/</guid>
      <description>Jenkins X 旨在使得 DevOps 原则和最佳实践对于研发人员来说简单。
原则 &amp;ldquo;DevOps 是一套旨在缩短从提交变更到生产发布的时间的实践，同时保证高质量&amp;rdquo;
DevOps项目的目标：
 市场需求 提高部署频率 缩短修复时间 更低的市场错误率 更快的平均恢复时间  相对于行业平均水平——每周一次和每月一次来说，高效的团队应该有能力每天部署多次。
代码从已提交到上生产应该少于一个小时，变更失败率也应该小于15%，而平均值在31-45%之间。
从失败中的平均恢复时间应该少于一个小时。
Jenkins X 设计了第一原则，允许团队采用 DevOps 的最佳实践，来达到行业的最高目标。
实践 下列最佳实践被认为是DevOps成功的关键：
 架构松耦合 自服务配置 自动化管理 持续构建 / 集成和部署 自动发布管理 增量测试 配置即代码  Jenkins X 把大量常见的方法论和组件集成为复杂度最小的方法。
架构 Jenkins X 基于松耦合架构的 DevOps 模型，被设计用来支持在多个团队之间，部署大量可重复、可管理的分布式微服务。
概念模型 构成 Jenkins X 基于以下的核心组件：
Kubernetes 和 Docker Kubernetes 是系统的核心，它已经成为了 DevOps 事实上的虚拟基础设施平台。每个主要的云服务商现在都已经提供了 Kubernetes 基础设施，并且可能已经在很多私有基础设施中也被安装了。测试环境可能也在使用 Minikube 安装器创建本地开发环境。
从功能上，该Kubernetes 平台扩展了 Docker 提供的基本容器化原则，用于跨多个物理节点。
简单来说，Kubernetes 提供了同构的虚拟基础设施，可以通过动态添加或者移除节点实现伸缩。每个节点都在一个大型专用虚拟网络空间里。
Kubernetes 中的部署单元是 Pod，它包含一个或多个 Docker 容器以及一些元数据。Pod 中所有的容器分享同样的虚拟 IP 地址和端口范围。Deployments在 Kubernetes 中是申明式的，因此，用户指定特定版本的 Pod 中部署的实例数量，Kubernetes 据此来计算跨节点中的 Pod 是应该删除或部署。根据标签匹配来决定资源的实例数量。一旦被部署，Kubernetes 就会通过定期的健康检查来保证 Pod 的数量，终止或则替换没响应的 Pod。</description>
    </item>
    
  </channel>
</rss>