<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X – getting started</title>
    <link>/zh/categories/getting-started/</link>
    <description>Recent content in getting started on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 22 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/zh/categories/getting-started/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 创建自定义 Builder</title>
      <link>/zh/docs/managing-jx/common-tasks/create-custom-builder/</link>
      <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/zh/docs/managing-jx/common-tasks/create-custom-builder/</guid>
      <description>
        
        
        

&lt;p&gt;在 Jenkins X 中，可以创建字段自定义的 Builder （也就是 &lt;a href=&#34;https://github.com/jenkinsci/kubernetes-plugin&#34; target=&#34;_blank&#34;&gt;POD templates&lt;/a&gt;）或覆盖已有的。你只需要基于 &lt;a href=&#34;https://github.com/jenkins-x/builder-base/blob/master/Dockerfile.common&#34; target=&#34;_blank&#34;&gt;builder-base&lt;/a&gt; 或它的 &lt;a href=&#34;https://github.com/jenkins-x/builder-base/blob/master/Dockerfile.slim&#34; target=&#34;_blank&#34;&gt;slim&lt;/a&gt; 版本的镜像。&lt;/p&gt;

&lt;h2 id=&#34;从零创建一个自定义-builder&#34;&gt;从零创建一个自定义 Builder&lt;/h2&gt;

&lt;h3 id=&#34;builder-镜像&#34;&gt;Builder 镜像&lt;/h3&gt;

&lt;p&gt;首先，您需要为 Builder 创建一个 docker 镜像。从 &lt;code&gt;Dockerfile&lt;/code&gt; 开始的一个实例可能类似于：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM jenkinsxio/builder-base:latest

# Install your tools and libraries
RUN yum install -y gcc openssl-devel

CMD [&amp;quot;gcc&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在，您可以构建并发布这个镜像到您的 registry：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export BUILDER_IMAGE=&amp;lt;YOUR_REGISTRY&amp;gt;/&amp;lt;YOUR_BUILDER_IMAGE&amp;gt;:&amp;lt;VERSION&amp;gt;
docker build -t ${BUILDER_IMAGE} .
docker push ${BUILDER_IMAGE}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;别担心，当新的镜像需要构建时，您无需每次手动执行这些步骤。Jenkins X 可以为您管理这些。您只需要把 &lt;code&gt;Dockerfile&lt;/code&gt; 推送到类似于&lt;a href=&#34;https://github.com/jenkins-x/builder-go&#34; target=&#34;_blank&#34;&gt;这个&lt;/a&gt;代码仓库中。然后，根据您的组织名称来调整 &lt;code&gt;Jenkinsfile&lt;/code&gt; ，并使用下面的命令导入 Jenkins X 平台：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx import --url &amp;lt;REPOSITORY_URL&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后，您每次推送一个变更，Jenkins X 将会自动地构建和发布镜像。&lt;/p&gt;

&lt;h3 id=&#34;安装-builder&#34;&gt;安装 Builder&lt;/h3&gt;

&lt;p&gt;当您安装或者升级 Jenkins X 时就可以安装您的 Builder 了。&lt;/p&gt;

&lt;p&gt;在您的 &lt;code&gt;~/.jx/&lt;/code&gt; 目录下创建文件  &lt;code&gt;myvalues.yaml&lt;/code&gt; 并写入下面内容：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jenkins:
  Agent:
    PodTemplates:
      MyBuilder:
        Name: mybuilder
        Label: jenkins-mybuilder
        volumes:
        - type: Secret
          secretName: jenkins-docker-cfg
          mountPath: /home/jenkins/.docker
        EnvVars:
          JENKINS_URL: http://jenkins:8080
          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_NAME: jenkins-x-bot
          GIT_COMMITTER_NAME: jenkins-x-bot
          XDG_CONFIG_HOME: /home/jenkins
          DOCKER_CONFIG: /home/jenkins/.docker/
        ServiceAccount: jenkins
        Containers:
          Jnlp:
            Image: jenkinsci/jnlp-slave:3.14-1
            RequestCpu: &amp;quot;100m&amp;quot;
            RequestMemory: &amp;quot;128Mi&amp;quot;
            Args: &#39;${computer.jnlpmac} ${computer.name}&#39;
          Dlang:
            Image: &amp;lt;YOUR_BUILDER_IMAGE&amp;gt;
            Privileged: true
            RequestCpu: &amp;quot;400m&amp;quot;
            RequestMemory: &amp;quot;512Mi&amp;quot;
            LimitCpu: &amp;quot;1&amp;quot;
            LimitMemory: &amp;quot;1024Mi&amp;quot;
            Command: &amp;quot;/bin/sh -c&amp;quot;
            Args: &amp;quot;cat&amp;quot;
            Tty: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根据需要替换 Builder 名称和镜像。&lt;/p&gt;

&lt;p&gt;您可以继续安装 Jenkins X ，然后 Builder 将会自动添加到平台。&lt;/p&gt;

&lt;h3 id=&#34;使用-builder&#34;&gt;使用 Builder&lt;/h3&gt;

&lt;p&gt;现在，您的 Builder 已经在 Jenkins 中安装了，您可以在 &lt;code&gt;Jenkinsfile&lt;/code&gt; 中轻松地引用：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Groovy&#34;&gt;pipeline {
    agent {
        label &amp;quot;jenkins-mybuilder&amp;quot;
    }
    stages {
      stage(&#39;Build&#39;) {
        when {
          branch &#39;master&#39;
        }
        steps {
          container(&#39;mybuilder&#39;) {
              // your steps
          }
        }
      }
    }
    post {
        always {
            cleanWs()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;覆盖已有的-builder&#34;&gt;覆盖已有的 Builder&lt;/h2&gt;

&lt;p&gt;Jenkins X 自带了很多&lt;a href=&#34;https://raw.githubusercontent.com/jenkins-x/jenkins-x-platform/master/values.yaml&#34; target=&#34;_blank&#34;&gt;预安装的 Builder&lt;/a&gt;，在安装或升级过程中可以根据需要覆盖。&lt;/p&gt;

&lt;p&gt;您只需要基于&lt;a href=&#34;https://github.com/jenkins-x/builder-base/blob/master/Dockerfile.common&#34; target=&#34;_blank&#34;&gt;基础 Builder&lt;/a&gt; 镜像或者&lt;a href=&#34;https://hub.docker.com/u/jenkinsxio/&#34; target=&#34;_blank&#34;&gt;Builder 镜像&lt;/a&gt; 自定义。在上面查看细节。&lt;/p&gt;

&lt;p&gt;然后，您可以在目录 &lt;code&gt;~/.jx/&lt;/code&gt; 中创建文件 &lt;code&gt;myvalues.yaml&lt;/code&gt; ，并写入一下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jenkins:
  Agent:
    PodTemplates:
      Maven:
        Containers:
          Maven:
            Image: &amp;lt;YOUR_REGISTRY&amp;gt;/&amp;lt;YOUR_MAVEN_BUILDER_IMAGE&amp;gt;:&amp;lt;VERSION&amp;gt;
      Nodejs:
        Containers:
          Nodejs:
            Image: &amp;lt;YOUR_REGISTRY&amp;gt;/&amp;lt;YOUR_NODEJS_BUILDER_IMAGE&amp;gt;:&amp;lt;VERSION&amp;gt;
      Go:
        Containers:
          Go:
            Image: &amp;lt;YOUR_REGISTRY&amp;gt;/&amp;lt;YOUR_GO_BUILDER_IMAGE&amp;gt;:&amp;lt;VERSION&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;您可以继续安装 Jenkins X，这些 Builder 将会自动地添加到平台。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 配置</title>
      <link>/zh/docs/managing-jx/common-tasks/config/</link>
      <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/zh/docs/managing-jx/common-tasks/config/</guid>
      <description>
        
        
        

&lt;p&gt;Jenkins X 应该为你的云服务商提供默认可用的配置。例如：如果你使用 AWS 或 EKS，Jenkins X 自动地使用 ECR。&lt;/p&gt;

&lt;p&gt;然而，你可以修改 Jenkins X 使用的 helm charts 的配置。&lt;/p&gt;

&lt;p&gt;要做到这一点，你需要在运行命令 &lt;a href=&#34;/commands/jx_create_cluster/&#34;&gt;jx create cluster&lt;/a&gt; 或 &lt;a href=&#34;/commands/deprecation/&#34;&gt;jx install&lt;/a&gt; 的目录下创建一个文件 &lt;code&gt;myvalues.yaml&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;然后，这个 YAML 文件可以覆盖 Jenkins X 中的任何 charts 中的 &lt;code&gt;values.yaml&lt;/code&gt; 文件。&lt;/p&gt;

&lt;h2 id=&#34;nexus&#34;&gt;Nexus&lt;/h2&gt;

&lt;p&gt;例如：如果你希望在安装过程中禁用 Nexus，而使用不同主机上的一个独立的 Nexus，那么，你可以使用 &lt;code&gt;myvalues.yaml&lt;/code&gt; 中的服务链接来替代：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;nexus:
  enabled: false
nexusServiceLink:
  enabled: true
  externalName: &amp;quot;nexus.jx.svc.cluster.local&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要禁用并使用 chart museum 的服务链接的话添加：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;chartmuseum:
  enabled: false
chartmuseumServiceLink:
  enabled: true
  externalName: &amp;quot;jenkins-x-chartmuseum.jx.svc.cluster.local&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jenkins-镜像&#34;&gt;Jenkins 镜像&lt;/h2&gt;

&lt;p&gt;Jenkins X 中我们提供了一个默认的 Jenkins docker 镜像 &lt;a href=&#34;https://hub.docker.com/r/jenkinsxio/jenkinsx/&#34; target=&#34;_blank&#34;&gt;jenkinsxio/jenkinsx&lt;/a&gt;，把我们所需要的所有插件包含在里面。&lt;/p&gt;

&lt;p&gt;如果你想添加自己的插件，你可以使用我们的基础镜像创建一个你自己的 Dockerfile 和镜像，如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# Dockerfile for adding plugins to Jenkins X
FROM jenkinsxio/jenkinsx:latest

COPY plugins.txt /usr/share/jenkins/ref/openshift-plugins.txt
RUN /usr/local/bin/install-plugins.sh &amp;lt; /usr/share/jenkins/ref/openshift-plugins.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后以下面的形式将你所有自定义插件放到 &lt;code&gt;plugins.txt&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;myplugin:1.2.3
anotherplugin:4.5.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一旦你通过 CI/CD 构建和发布了你的镜像，你就可以在安装 Jenkins X 时使用它：&lt;/p&gt;

&lt;p&gt;为了用你自定义的镜像配置 Jenkins X ，你可以在 &lt;code&gt;myvalues.yaml&lt;/code&gt; 文件中指定你的 Jenkins 镜像：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jenkins:
  Master:
    Image: &amp;quot;acme/my-jenkinsx&amp;quot;
    ImageTag: &amp;quot;1.2.3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里有一个开源项目的例子 &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-openshift-image&#34; target=&#34;_blank&#34;&gt;jenkins-x/jenkins-x-openshift-image&lt;/a&gt;，你可以以它为模板创建一个新的 Jenkins 镜像用来在 OpenShift 上使用 Jenkins X 时增加 OpenShift 特定的插件和配置。&lt;/p&gt;

&lt;h2 id=&#34;docker-registry&#34;&gt;Docker Registry&lt;/h2&gt;

&lt;p&gt;We try and use the best defaults for each platform for the Docker Registry; e.g. using ECR on AWS.&lt;/p&gt;

&lt;p&gt;然而，你也可以在执行命令 &lt;a href=&#34;/commands/jx_create_cluster/&#34;&gt;jx create cluster&lt;/a&gt; 或 &lt;a href=&#34;/commands/deprecation/&#34;&gt;jx install&lt;/a&gt; 时，通过选项 &lt;code&gt;--docker-registry&lt;/code&gt; 来指定。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jx create cluster gke --docker-registry eu.gcr.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是，如果你使用了不同的 Docker Registry 的话，你可能需要&lt;a href=&#34;/docs/reference/components/docker-registry/#update-the-config-json-secret&#34;&gt;修改 secret 才能连接到 docker&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 安装过程中发生了什么</title>
      <link>/zh/docs/managing-jx/common-tasks/install-on-cluster-what-happens/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/zh/docs/managing-jx/common-tasks/install-on-cluster-what-happens/</guid>
      <description>
        
        
        

&lt;p&gt;Jenkins X 命令行在安装 Jenkins X 平台时会做如下事情：&lt;/p&gt;

&lt;h2 id=&#34;安装二进制客户端来管理你的集群&#34;&gt;安装二进制客户端来管理你的集群&lt;/h2&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

如果您运行在 Mac OS X 上，Jenkins X 会使用 &lt;code&gt;Homebrew&lt;/code&gt; 来安装不同的命令行。不存在就会安装。
&lt;/div&gt;


&lt;h3 id=&#34;安装-kubectl&#34;&gt;安装 kubectl&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/reference/kubectl/kubectl/&#34; target=&#34;_blank&#34;&gt;kubectl&lt;/a&gt; 是 Kubernetes 的命令行。它允许您和您的 Kubernetes 集群通过 API server 交互。&lt;/p&gt;

&lt;h3 id=&#34;安装-helm&#34;&gt;安装 Helm&lt;/h3&gt;

&lt;p&gt;Jenkins X 将会安装 &lt;a href=&#34;https://github.com/kubernetes/helm&#34; target=&#34;_blank&#34;&gt;helm&lt;/a&gt; 客户端 - (可能是  helm &lt;em&gt;2.x&lt;/em&gt; 或 helm &lt;em&gt;3&lt;/em&gt;)，如果它不在您的环境变量里的话。Helm 是用于打包 Kubernetes 中的应用或资源（也叫做 charts），并迅速地成为标准。&lt;/p&gt;

&lt;h3 id=&#34;安装云提供商的命令行&#34;&gt;安装云提供商的命令行&lt;/h3&gt;

&lt;p&gt;如果您在使用公有云，会有相关的命令行来与之交互。当通过 &lt;a href=&#34;/docs/getting-started/setup/create-cluster/&#34;&gt;jx create cluster&lt;/a&gt; 命令来安装时，您的云提供商相关的二进制如果不在环境变量里的话，也会被安装。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AKS 集群（Azure）的 &lt;code&gt;az&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;GKE 集群 (Google Cloud) 的 &lt;code&gt;gcloud&lt;/code&gt; for GKE cluster (Google Cloud)&lt;/li&gt;
&lt;li&gt;AWS 集群 (Amazon Web Services) 的 &lt;code&gt;kops&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/eks/&#34; target=&#34;_blank&#34;&gt;AWS EKS&lt;/a&gt; 集群的 &lt;code&gt;eksctl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;OKS 集群 (Oracle Cloud) 的 &lt;code&gt;oci&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果您想要在本地通过 minikube 或 minishift 运行 Jenkins X 的话，下面的二进制会被添加：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;本地 minishift (OpenShift) 集群 的 &lt;code&gt;oc&lt;/code&gt; (OpenShift CLI) 和 &lt;code&gt;minishift&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;本地 minikube 集群的 &lt;code&gt;minikube&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后，Jenkins X 将会根据需要安装 VM 驱动，通常 Mac OS X 上是 &lt;code&gt;xhyve&lt;/code&gt; 或 Windows 上是 &lt;code&gt;hyperv&lt;/code&gt; 。其他驱动则需要手动安装。&lt;/p&gt;

&lt;h2 id=&#34;创建-kubernetes-集群&#34;&gt;创建 Kubernetes 集群&lt;/h2&gt;

&lt;p&gt;之后，集群会通过云提供商的命令来创建（例如：Azure 的 &lt;code&gt;az aks create&lt;/code&gt; 命令）。&lt;/p&gt;

&lt;h2 id=&#34;设置-jenkins-x-平台&#34;&gt;设置 Jenkins X 平台&lt;/h2&gt;

&lt;h3 id=&#34;创建-jenkins-x-命名空间&#34;&gt;创建 Jenkins X 命名空间&lt;/h3&gt;

&lt;p&gt;然后，会为 Jenkins X 平台创建一个命名空间，用于存放 Jenkins X 基础组件。默认为：*jx*。&lt;/p&gt;

&lt;h3 id=&#34;安装-tiller-可选-只有-helm-2-需要&#34;&gt;安装 Tiller（可选，只有 Helm 2 需要）&lt;/h3&gt;

&lt;p&gt;Tiller，也就是 Helm 的服务器端，会部署到命名空间 &lt;em&gt;kube-system&lt;/em&gt; 中。&lt;a href=&#34;https://www.helm.sh/&#34; target=&#34;_blank&#34;&gt;Helm&lt;/a&gt; 是 Kubernetes 的包管理器，也用于部署 Jenkins X 的其他组件。&lt;/p&gt;

&lt;h3 id=&#34;设置-ingress-控制器&#34;&gt;设置 Ingress 控制器&lt;/h3&gt;

&lt;p&gt;在 Kubernetes 集群中，Service 和 Pod 的 IP 只能在集群网络中访问。为了能够访问集群，必须要创建一个 Ingress。Ingress 是路由到集群内的 Service 的规则集。Ingress 规则是由 Kubernetes API 配置在 Ingress 资源中，而 Ingress Controller 是必要的。所有的这些 Jenkins X 都会替您做——为下面的 Service 设置一个 Ingress Controller 和相关联的后端 Ingress 规则（一旦部署完后）：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;chartmuseum&lt;/li&gt;
&lt;li&gt;docker-registry&lt;/li&gt;
&lt;li&gt;jenkins&lt;/li&gt;
&lt;li&gt;monocular&lt;/li&gt;
&lt;li&gt;nexus&lt;/li&gt;
&lt;/ul&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

默认，Jenkins X 将会通过域名 &lt;em&gt;nip.io&lt;/em&gt; 暴露 Ingress，并生成自签名的证书。当按照完后，您可以通过命令 &lt;code&gt;jx upgrade ingress --cluster&lt;/code&gt; 轻松地修改为您自己的域名和签名。
&lt;/div&gt;


&lt;h3 id=&#34;配置-git-仓库&#34;&gt;配置 git 仓库&lt;/h3&gt;

&lt;p&gt;Jenkins X 需要一个 Git 仓库提供商，以便能够插件环境仓库。如果您没有提供参数 &lt;em&gt;git-provider-url&lt;/em&gt; 的划，默认使用 GitHub。您需要提供用户名和 Token 来和 Git 交互，尤其是 Jenkins。&lt;/p&gt;

&lt;h2 id=&#34;创建管理员凭据&#34;&gt;创建管理员凭据&lt;/h2&gt;

&lt;p&gt;Jenkins X 为 Monocular/Nexus/Jenkins 生成管理员密码并保存到 Secret 中。当在 helm 安装的时候就会取出来使用（因此，密码可以用在流水线中）。&lt;/p&gt;

&lt;h3 id=&#34;检出云环境仓库&#34;&gt;检出云环境仓库&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jenkins-x/cloud-environments&#34; target=&#34;_blank&#34;&gt;云环境仓库&lt;/a&gt;保存所有特定的配置以及加密的 Secret，这些将会应用在您的 Kubernetes 集群中的 Jenkins 平台。这些 Secret 将会由 Helm 包管理器来加解密。&lt;/p&gt;

&lt;h2 id=&#34;安装-jenkins-x-平台&#34;&gt;安装 Jenkins X 平台&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform&#34; target=&#34;_blank&#34;&gt;Jenkins X 平台&lt;/a&gt;保存安装了的组件的 Helm Chart，用于提供 Jenins X 真正的 CD 解决方案。这包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jenkinsci/jenkins&#34; target=&#34;_blank&#34;&gt;Jenkins&lt;/a&gt; 一个 CI/CD 流水线方案&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sonatype.com/nexus-repository-oss&#34; target=&#34;_blank&#34;&gt;Nexus&lt;/a&gt; 一个制品仓库&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-helm/chartmuseum&#34; target=&#34;_blank&#34;&gt;ChartMuseum&lt;/a&gt; 一个 Helm Chart 仓库&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-helm/monocular&#34; target=&#34;_blank&#34;&gt;Monocular&lt;/a&gt; 提供了一个 Web UI 用于搜索和发现通过 Jenkins X 部署到您的集群中的 Chart。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 在 Kubernetes 上安装</title>
      <link>/zh/docs/managing-jx/common-tasks/install-on-cluster/</link>
      <pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/zh/docs/managing-jx/common-tasks/install-on-cluster/</guid>
      <description>
        
        
        

&lt;p&gt;Jenkins X 可以在 Kubernetes 1.8 以及更高版本上安装。需要的依赖有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RBAC 是可用的&lt;/li&gt;
&lt;li&gt;启用 docker 私有仓库。这样的话，流水线可以在 Kubernetes 集群中使用 docker 仓库（通常不是公共的因此不支持 https）。后续，你可以修改你的流水线来使用其他仓库。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;通过-kops-启用私有仓库&#34;&gt;通过 kops 启用私有仓库&lt;/h3&gt;

&lt;p&gt;注意，如果你是在 AWS 环境中，你可能会想使用 &lt;a href=&#34;/zh/docs/getting-started/setup/create-cluster/&#34;&gt;jx create aws&lt;/a&gt; 命令来帮你自动化完成所有步骤！&lt;/p&gt;

&lt;p&gt;如果你是通过 &lt;a href=&#34;https://github.com/kubernetes/kops&#34; target=&#34;_blank&#34;&gt;kops&lt;/a&gt; 创建的 kubernetes 集群，那么你可以这么做：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kops edit cluster
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，确保在 YAML 文件的章节 &lt;code&gt;spec&lt;/code&gt; 中有 &lt;code&gt;docker&lt;/code&gt; 配置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;...
spec:
  docker:
    insecureRegistry: 100.64.0.0/10
    logDriver: &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的 IP 范围 &lt;code&gt;100.64.0.0/10&lt;/code&gt; 是 AWS 上的，但你需要修改为其他 Kubernetes 集群的；它依赖于 Kubernetes 服务的 IP 范围。&lt;/p&gt;

&lt;p&gt;保存后，你可以参考下面的命令进行验证：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kops get cluster -oyaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后查找 &lt;code&gt;insecureRegistry&lt;/code&gt; 章节。&lt;/p&gt;

&lt;p&gt;现在，确保这些修改在你的集群类型上是激活的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kops update cluster --yes
kops rolling-update cluster --yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你现在可以继续了！&lt;/p&gt;

&lt;h3 id=&#34;安装-jenkins-x&#34;&gt;安装 Jenkins X&lt;/h3&gt;

&lt;p&gt;为了在已有的 kubernetes 集群上安装 Jenkins X 你可以使用命令 &lt;a href=&#34;/commands/deprecation/&#34;&gt;jx install&lt;/a&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你知道提供商的话，可以通过命令行来指定。例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx install --provider=aws
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 通过 GitOps 管理</title>
      <link>/zh/docs/managing-jx/common-tasks/manage-via-gitops/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/zh/docs/managing-jx/common-tasks/manage-via-gitops/</guid>
      <description>
        
        
        

&lt;p&gt;我们推荐你使用 GitOps 管理你的 Jenkins X 设施，升级它、配置它、以及添加或移除扩展&lt;a href=&#34;/docs/contributing/addons/&#34;&gt;应用&lt;/a&gt;，这样容易审计谁在你的设施上做了什么变更并且容易恢复坏的变更。&lt;/p&gt;

&lt;p&gt;当前这仅在 AWS 和 Google 云可用，因为它要求我们的 vault 操作员（需要云存储和 KMS ）存储凭据，而所有其他配置都存储在开发环境 git 仓库中。&lt;/p&gt;

&lt;h2 id=&#34;使用-gitops-管理-jenkins-x&#34;&gt;使用 GitOps 管理 Jenkins X&lt;/h2&gt;

&lt;p&gt;如果你正在创建一个集群或者在已经存在的集群安装，这里有一种快速简便的方法来使用 GitOps 来管理 Jenkins X 本身。它是 &lt;code&gt;—ng&lt;/code&gt; ，为下一代 Jenkins X 而来。在我们今年晚些时候发布 Jenkins X 2.x 时，我们会将此功能标记设为默认选项。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;—ng&lt;/code&gt; 标记是这些标记的一个别名：&lt;code&gt;—gitops —vault —no-tiller —tekton&lt;/code&gt; 。所以它还附带了对 &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Jenkins X 流水线&lt;/a&gt; - 基于 Tekton 的新式云原生流水线引擎的支持。&lt;/p&gt;

&lt;p&gt;如果你仍然想要使用Jenkins服务器作为 Jenkins X 中自动化 CI/CD 流水线的执行引擎，那么你可以使用 &lt;code&gt;—gitops —vault&lt;/code&gt; 代替。仍要注意是的即使使用了 &lt;code&gt;—ng&lt;/code&gt; 以及使用了由 Tekton 驱动的 &lt;a href=&#34;/docs/concepts/jenkins-x-pipelines/&#34;&gt;Jenkins X 流水线&lt;/a&gt;,你仍然需要创建你自己的&lt;a href=&#34;/docs/managing-jx/common-tasks/custom-jenkins/&#34;&gt;自定义 Jenkins 服务器&lt;/a&gt;来运行传统的 Jenkins 任务和流水线。&lt;/p&gt;

&lt;p&gt;一旦你使用 GitOps 安装了 Jenkins X 来管理开发环境，那么表明安装了 Jenkins X 和它的附加应用程序，你将为 Dev，Staging，Production 环境获得一个额外的 git 仓库。它也意味着如果你用一个更新命令如 &lt;a href=&#34;/commands/deprecation/&#34;&gt;jx upgrade platform&lt;/a&gt; 或通过 &lt;a href=&#34;http://localhost:1313/commands/jx_add_app/&#34; target=&#34;_blank&#34;&gt;jx add app&lt;/a&gt; 添加、更新、删除应用，那么那些命令将在开发环境的 git 存储库生成 Pull Request ，就像当你发布新版本的微服务时， promotion 是如何工作的。&lt;/p&gt;

&lt;h2 id=&#34;如果出现问题&#34;&gt;如果出现问题&lt;/h2&gt;

&lt;p&gt;一般来说，当使用 Tekton 时，Jenkins X 可以很容易地自我升级。但是，如果升级让 Jenkins X 无法实施 CI/CD ，那么使用 GitOps 回退更改将不起作用；）&lt;/p&gt;

&lt;p&gt;如果你在升级 Jenkins X 过程中遇到任何问题，这里有一种手动方法可以应用开发环境的 git 存储库的内容：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone $MY_DEV_GIT_CLONE_URL jenkins-x-dev-env
cd jenkins-x-dev-env/env
jx step env apply
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
  </channel>
</rss>
