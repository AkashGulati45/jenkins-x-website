<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>给 Jenkins X 项目做贡献 on Jenkins X</title>
    <link>https://jenkins-x.io/zh/contribute/</link>
    <description>Recent content in 给 Jenkins X 项目做贡献 on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 01 Feb 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jenkins-x.io/zh/contribute/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>贡献代码</title>
      <link>https://jenkins-x.io/zh/contribute/development/</link>
      <pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/contribute/development/</guid>
      <description>介绍 Jenkins X 是由众多开发者开发的开源项目。还有很多 open issues，我们需要你的帮助来使 Jenkins X 变得更棒。即使你不是一个 Go 语言的专家，也可以对项目的开发贡献力量。
假设 本篇指导文档将帮助新接触 Jenkins X 的读者逐步熟悉它，因此我们假定：
 你是刚刚接触 Git 或者开源项目 你是 Jenkins X 的爱好者并乐于对项目的发展贡献力量   如果在阅读此指导文档过程中有任何问题，请向 Jenkins X 社区的讨论组寻求帮助。
  安装 Go Go 语言环境的安装仅需要几分钟。并且多种方式可供选择。
如果在安装过程当中遇到问题，请查阅 Go Bootcamp,which contains setups for every platform 或者向 Jenkins X 论坛中寻求帮助。
从源码安装 Go 下载最新版 Go 源码并通过官方安装文档进行安装。
安装完成后，确认是否一切工作正常。打开一个新的终端或者在 Windows 上的命令行并输入:
go version  在终端的窗口上可以看到类似如下的信息。注意 version 表示的是在在更新此文档时最新的 Go 的版本信息:
go version go1.8 darwin/amd64  下一步，确保根据安装文档 设置了 GOPATH 环境变量。 通过 echo $GOPATH 输出 GOPATH。应该是指向了你的合法的 Go 的工作目录的非空字符串，如:</description>
    </item>
    
    <item>
      <title>给 API 文档做贡献</title>
      <link>https://jenkins-x.io/zh/contribute/apidocs/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/contribute/apidocs/</guid>
      <description>Jenkins X 有两种类型的 API 文档：Kubernetes Custom Resource Documentation 和 Godoc。这两种类型都是由 jx 的代码生成。
设置你的开发环境 最好在你的本地电脑上对 Jenkinx X 的代码进行修改。按照 开发 指导文档进行配置。
编写自定义资源文档 自定义资源的文档大部分是由 go structs that define the custom resources 上的注释以及融合了 introductory content 和 structure 而生成的。
工具链 自定义资源文档是由与 Kubernetes 同样的工具链而生成的，但是一系列的 jx 的命令将其包装了起来，因此你不需要下载以及配置这些不同的工具。
HTML 文档是由 OpenAPI 说明 生成的，依次的由 Go 结构体 生成，而这些结构体是由代码的注释生成的。想要生成结构体和 OpenAPI 说明执行命令：
$ make generate-openapi  make generate-openapi 仅仅是对 jx create client openapi 进行了包装，通过传入参数：从哪个包来生成、生成的目标包的名称和组（jenkins.io）以及版本(v1)来生成最终的文件。如果你愿意的话，也可以直接运行这个命令。
  生成 HTML 运行：
make generate-docs  make generate-docs 仅仅是对 jx create client docs 进行了包装。 Y如果你愿意的话，也可以直接运行这个命令。</description>
    </item>
    
    <item>
      <title>计划的特性</title>
      <link>https://jenkins-x.io/zh/contribute/roadmap/</link>
      <pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/contribute/roadmap/</guid>
      <description>特性 未计划 已计划 进行中 已发布     操作系统       macOS    1.1.x   Linux    1.1.x   Windows   进行中    Cloud Providers       AWS kops    1.1.x   AWS EKS    1.3.x   Azure    1.1.x   Digital Ocean  已计划     GKE    1.</description>
    </item>
    
    <item>
      <title>文档贡献</title>
      <link>https://jenkins-x.io/zh/contribute/documentation/</link>
      <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/contribute/documentation/</guid>
      <description>创建派生库 最好在你本地的机器上修改 Jenkins X 文档，检查视觉风格一致。确保你已经在 GitHub 上派生了 jx-docs，并在你的机器上克隆了这个库。更多信息，你可以查看 GitHub 的&amp;rdquo;派生&amp;rdquo;文档 或者按照 Jenkins X 开发贡献指导。
然后，你可以创建一个独立的分支。一定要选择符合内容类型的描述性分支名称。下面的一个示例分支的名称，你可以用于添加一个新的网站用于展示：
git checkout -b jon-doe-showcase-addition  添加新的内容 Jenkins X 文档重用 Jenkins X 的骨架特点。在 Jenkins X 文档中所有内容章节都分配了骨架。
向 Jenkins X 中添加新的内容遵循下面相似的模式，不用考虑内容章节：
hugo new &amp;lt;DOCS-SECTION&amp;gt;/&amp;lt;new-content-lowercase&amp;gt;.md  语法标准 Jenkins X 文档中所有的页面，使用典型的三个反引号这样的语法。如果你不想花额外的时间来遵循下面的代码块简码，请使用标准的 GitHub 风格的 markdown。Jenkins X 使用 highlight.js 的一组语言。
你可选的语言是 xml/html, go/golang, md/markdown/mkd, handlebars, apache, toml, yaml, json, css, asciidoc, ruby, powershell/ps, scss, sh/zsh/bash/git, http/https, 和 javascript/js.
&amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt;  代码块简码 Jenkins X 文档带有强大的简码，用于增加交互式的代码块。</description>
    </item>
    
    <item>
      <title>分类问题</title>
      <link>https://jenkins-x.io/zh/contribute/triage/</link>
      <pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/contribute/triage/</guid>
      <description>Jenkins X 项目主要的问题跟踪系统是 https://github.com/jenkins-x/jx/issues。这旨在捕捉问题、想法和开发工作。如有疑问请提交一个问题，一名 Jenkins X 团队成员将考虑尽快给它分类。
由于 Jenkins X 使用来自 Kubernetes 生态的 prow，我们认为，我们应该带领他们参与处理分类大量问题，以帮助和鼓励贡献者。我们正在重用标签的样式，包括颜色，以尝试在跨开源项目时创建熟悉度，并减少贡献的障碍。
分类问题 所有可用标签列表请参考：https://github.com/jenkins-x/jx/labels
当对问题进行分类时，来自 Jenkins X 团队的某个成员将分配标签用来描述问题的 area 和 kind 。有可能，他们还将增加一个 priority ，但是，在进一步分析或更广泛的可见性之后，这些 priority 可能会发生变化。
标签通过 prow label 插件使用 GitHub 评论被添加。例如：
/kind bug /area prow /priority important-soon  分配问题 当进行分类时我们尝试将问题分配给某个人。这可能会随着调查或人员的可用性而改变。
调查问题 当任何人在处理一个问题时，我们的目的是通过添加注释来捕获任何分析。这有助于人们学习如何调查类似问题的技巧，帮助人们理解思考过程，并通过 pull request 为任何链接修复提供上下文。
新建标签 如果你想要请求创建一个新的标签，那么请提交一个问题并附带尽可能多的内容。
陈旧的问题 当我们鼓励广泛的问题类型，如一般的想法和想法，问题跟踪器可能增长得相当高。我们将启用 prow lifecycle 插件来帮助管理陈旧的问题。这并不意味着具有侵入性，而是允许我们不断地重新思考问题，并保持跨问题的势头。</description>
    </item>
    
  </channel>
</rss>