<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>架构 on Jenkins X</title>
    <link>https://jenkins-x.io/zh/architecture/</link>
    <description>Recent content in 架构 on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 27 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jenkins-x.io/zh/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>自定义资源</title>
      <link>https://jenkins-x.io/zh/architecture/custom-resources/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/architecture/custom-resources/</guid>
      <description>Kubernetes 提供了一个叫做自定义资源的扩展机制，它允许微服务扩展 Kubernetes 平台来解决更高级的问题。
因此，在 Jenkins X 中定义了若干个自定义资源来扩展 Kubernetes 支持 CI/CD：
环境 Jenkins X 原生地支持环境，允许为你们团队定义环境，并通过 jx get environments 查询：
jx get environments 以下的命令都使用 Kubernetes 自定义资源环境。
因此，你还可以通过 kubectl 查询环境：
kubectl get environments 或者你想要通过 YAML 直接编辑它们的话：
kubectl edit env staging 尽管，你使用命令 jx edit environment 会更容易。
发版 Jenkins X 流水线生成了一个自定义资源 发版，我们可以用来跟踪：
 版本、git 标签、git 地址映射到 Kubernetes/Helm 中的发版 Jenkins 流水线地址和执行日志用于执行发布 提交日志、问题和 Pull Requests 是每次发版的一部分，因此我们可以实现在 Staging/生产环境中修复的问题反馈  流水线活动 该资源保存了基于 Jenkins 流水线阶段以及 升级活动 的流水线状态
该资源还会被命令 jx get activities 用到</description>
    </item>
    
    <item>
      <title>组件</title>
      <link>https://jenkins-x.io/zh/architecture/components/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/architecture/components/</guid>
      <description>An installation of Jenkins X consists of:
 a Development Environment per team which is a kubernetes namespace zero to many other Permanent Environments  the out of the box is for each team to get their own Staging and Production environments each team can have as many environments as they wish and can call them whatever they like  optional Preview Environments  Typically each environment is associated with its own kubernetes namespace which are usually different to ensure clean isolation between the environments.</description>
    </item>
    
    <item>
      <title>构建打包</title>
      <link>https://jenkins-x.io/zh/architecture/build-packs/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/architecture/build-packs/</guid>
      <description>我们使用 draft 风格为不同的语言构建打包 ，我们通过导入或者创建他们，运行时和构建工具添加必要的配置文件，因此我们可以在 Kubernetes 中构建和部署他们。
如果由于工程没有被创建或导入而不存在的话，构建包会默认使用下面的文件：
 Dockerfile 把代码构建为不可变的 docker 镜像，准备在 Kubernetes 中运行 Jenkinsfile 为应用使用申明式 Jenkins 流水线定义 CI/CD 步骤 helm chart 在文件夹 charts 中生成可以在 Kubernets 中运行的 Kubernetes 资源 在 charts/preview 文件夹中的 preview chart 定义了基于 Pull Request 部署一个预览环境的所有依赖  默认的构建包在 https://github.com/jenkins-x/draft-packs，每个语言或者构建工具在一个文件夹中。
jx 命令行克隆构建包到你的文件夹 .~/.jx/draft/packs/ ，并在你每次尝试创建或者到一个工程时通过 git pull 来更新他们。
创建新的构建 我们欢迎贡献，因此，请考虑增加新的构建包和 pod 模板。
这里有如何创建一个新的构建包的指导 —— 如果有任何不清楚的请加入社区并提问，我们很乐意帮助！
最好的开始就是 快速开始 应用。你可以当作一个测试的样例工程。因此，创建或查找一个合适的例子工程，然后导入。
然后，如果不存在的话，手动添加 Dockerfile 和 Jenkinsfile 。你可以从当前构建包文件夹开始 —— 使用相似的语言或框架。
如果你的构建包使用了 pod 模板 中不存在的构建工具，你需要提交一个新的 pod 模板，还可能需要一个新的构建容器景象。</description>
    </item>
    
    <item>
      <title>Pod 模板</title>
      <link>https://jenkins-x.io/zh/architecture/pod-templates/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/zh/architecture/pod-templates/</guid>
      <description>We implement CI/CD pipelines using declarative Jenkins pipelines using a Jenkinsfile in the source of each application or environment git repository.
We use the kubernetes plugin for Jenkins to be able to spin up new pods on kubernetes for each build - giving us an elastic pool of agents to run pipelines thanks to kubernetes.
The Kubernetes plugin uses pod templates to define the pod used to run a CI/CD pipeline which consists of:</description>
    </item>
    
  </channel>
</rss>